
AutonomousRC_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00006108  0000619c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  008001d2  008001d2  0000630e  2**0
                  ALLOC
  3 .stab         000078d8  00000000  00000000  00006310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003af8  00000000  00000000  0000dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000116e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00011ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000140c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00015594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000168a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00016a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00016d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000177a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__vector_1>
       8:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__vector_2>
       c:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__vector_3>
      10:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__vector_4>
      14:	0c 94 36 14 	jmp	0x286c	; 0x286c <__vector_5>
      18:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_6>
      1c:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_7>
      20:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_8>
      24:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_9>
      28:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__vector_10>
      2c:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_13>
      38:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_14>
      3c:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__vector_15>
      40:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 30 	call	0x6006	; 0x6006 <main>
      8a:	0c 94 82 30 	jmp	0x6104	; 0x6104 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 30 	jmp	0x60ce	; 0x60ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 30 	jmp	0x60ce	; 0x60ce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 30 	jmp	0x60a6	; 0x60a6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6f 30 	jmp	0x60de	; 0x60de <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 70 30 	jmp	0x60e0	; 0x60e0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 53 30 	jmp	0x60a6	; 0x60a6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 6f 30 	jmp	0x60de	; 0x60de <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WD_voidInit>:
#include "WD_interface.h"
#include "WD_private.h"
#include "WD_config.h"

void WD_voidInit()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	//enable the watch dog
	WD_voidEnable();
     ef2:	0e 94 81 07 	call	0xf02	; 0xf02 <WD_voidEnable>

	//set watch dog prescaler
	WD_voidSetPrescalar(WD_u8_INITIAL_PRESCALER);
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <WD_voidSetPrescalar>
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <WD_voidEnable>:


void WD_voidEnable()
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WD_u8_WDTCR_REG,WD_u8_WDE_BIT);
     f0a:	a1 e4       	ldi	r26, 0x41	; 65
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 e4       	ldi	r30, 0x41	; 65
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	8c 93       	st	X, r24
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <WD_voidDisable>:

void WD_voidDisable()
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	WD_voidFeed();
     f26:	0e 94 ba 07 	call	0xf74	; 0xf74 <WD_voidFeed>

	WD_u8_WDTCR_REG |= WD_u8_WATCH_DISABLE_MASK;
     f2a:	a1 e4       	ldi	r26, 0x41	; 65
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e1 e4       	ldi	r30, 0x41	; 65
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 61       	ori	r24, 0x18	; 24
     f36:	8c 93       	st	X, r24
	CLR_BIT(WD_u8_WDTCR_REG,WD_u8_WDE_BIT);
     f38:	a1 e4       	ldi	r26, 0x41	; 65
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e4       	ldi	r30, 0x41	; 65
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	87 7f       	andi	r24, 0xF7	; 247
     f44:	8c 93       	st	X, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <WD_voidSetPrescalar>:

void WD_voidSetPrescalar(u8 WD_u8_Prescaler_xK)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	WD_u8_WDTCR_REG = (WD_u8_WDTCR_REG & WD_u8_PRESCALER_MASK) | WD_u8_Prescaler_xK;
     f58:	a1 e4       	ldi	r26, 0x41	; 65
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 e4       	ldi	r30, 0x41	; 65
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	98 2f       	mov	r25, r24
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	89 2b       	or	r24, r25
     f6a:	8c 93       	st	X, r24
}
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <WD_voidFeed>:

void WD_voidFeed()
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	//reset the watch dog
	asm("wdr");
     f7c:	a8 95       	wdr
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <UART_voidInit>:
void (*RecieveCompleteFuncPointer)(void) = NULL;
void (*TransmissionCompleteFuncPointer)(void) = NULL;
void (*DataRegisterEmptyFuncPointer)(void) = NULL;

void UART_voidInit()
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	UART_voidTransmitterEnable();
     f8c:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_voidTransmitterEnable>
	UART_voidReceiverEnable();
     f90:	0e 94 b2 08 	call	0x1164	; 0x1164 <UART_voidReceiverEnable>

	UART_voidSetBaudRate(51);//for 9600 Baud rate
     f94:	83 e3       	ldi	r24, 0x33	; 51
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 87 08 	call	0x110e	; 0x110e <UART_voidSetBaudRate>

	UART_voidSetWordSize(UART_u8_INITIAL_WORD_SIZE);
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_voidSetWordSize>

	//these functions doesn't work for some reason
	//UART_voidSetParityMode(UART_u8_INITIAL_PARITY);
	//UART_voidSetStopBits(UART_u8_INITIAL_STOP_BITS);

}
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <UART_voidMode>:

void UART_voidMode(u8 UART_u8_Mode)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	89 83       	std	Y+1, r24	; 0x01
	if(UART_u8_Mode)
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	88 23       	and	r24, r24
     fb8:	41 f0       	breq	.+16     	; 0xfca <UART_voidMode+0x22>
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) | (1<<UART_u8_UMSEL_BIT);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 6c       	ori	r24, 0xC0	; 192
     fc6:	8c 93       	st	X, r24
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <UART_voidMode+0x32>
	}
	else
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) & (~(1<<UART_u8_UMSEL_BIT));
     fca:	a0 e4       	ldi	r26, 0x40	; 64
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e0 e4       	ldi	r30, 0x40	; 64
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 73       	andi	r24, 0x3F	; 63
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24
	}
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <UART_voidSetParityMode>:

void UART_voidSetParityMode(u8 UART_u8_Parity_Mode)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01
	UART_u8_UCSRC_UBRRH_REG = (((UART_u8_UCSRC_UBRRH_REG| (1<<UART_u8_URSEL_BIT)) & UART_u8_PARITY_MASK) | (UART_u8_Parity_Mode<<4));
     fee:	a0 e4       	ldi	r26, 0x40	; 64
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e0 e4       	ldi	r30, 0x40	; 64
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 74       	andi	r24, 0x4F	; 79
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	28 2f       	mov	r18, r24
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	82 95       	swap	r24
    1006:	92 95       	swap	r25
    1008:	90 7f       	andi	r25, 0xF0	; 240
    100a:	98 27       	eor	r25, r24
    100c:	80 7f       	andi	r24, 0xF0	; 240
    100e:	98 27       	eor	r25, r24
    1010:	82 2b       	or	r24, r18
    1012:	8c 93       	st	X, r24
}
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <UART_voidSetStopBits>:

void UART_voidSetStopBits(u8 UART_u8_Num_Of_Stop_Bits)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	if(UART_u8_Num_Of_Stop_Bits)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 23       	and	r24, r24
    102c:	41 f0       	breq	.+16     	; 0x103e <UART_voidSetStopBits+0x22>
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) | (1<<UART_u8_USBS_BIT);
    102e:	a0 e4       	ldi	r26, 0x40	; 64
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e0 e4       	ldi	r30, 0x40	; 64
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 68       	ori	r24, 0x88	; 136
    103a:	8c 93       	st	X, r24
    103c:	08 c0       	rjmp	.+16     	; 0x104e <UART_voidSetStopBits+0x32>
	}
	else
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) & (~(1<<UART_u8_USBS_BIT));
    103e:	a0 e4       	ldi	r26, 0x40	; 64
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e0 e4       	ldi	r30, 0x40	; 64
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	87 77       	andi	r24, 0x77	; 119
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24
	}

}
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <UART_voidSetWordSize>:

void UART_voidSetWordSize(u8 UART_u8_Word_Size)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <UART_voidSetWordSize+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	switch(UART_u8_Word_Size)
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3b 83       	std	Y+3, r19	; 0x03
    106c:	2a 83       	std	Y+2, r18	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	99 23       	and	r25, r25
    1074:	4c f1       	brlt	.+82     	; 0x10c8 <UART_voidSetWordSize+0x72>
    1076:	2a 81       	ldd	r18, Y+2	; 0x02
    1078:	3b 81       	ldd	r19, Y+3	; 0x03
    107a:	24 30       	cpi	r18, 0x04	; 4
    107c:	31 05       	cpc	r19, r1
    107e:	34 f0       	brlt	.+12     	; 0x108c <UART_voidSetWordSize+0x36>
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	87 30       	cpi	r24, 0x07	; 7
    1086:	91 05       	cpc	r25, r1
    1088:	89 f0       	breq	.+34     	; 0x10ac <UART_voidSetWordSize+0x56>
    108a:	1e c0       	rjmp	.+60     	; 0x10c8 <UART_voidSetWordSize+0x72>
	{
	case UART_u8_FIVE_BIT_WORD:
	case UART_u8_SIX_BIT_WORD:
	case UART_u8_SEVEN_BIT_WORD:
	case UART_u8_EIGHT_BIT_WORD:
		UART_u8_UCSRC_UBRRH_REG = (((UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) & UART_u8_WORD_SIZE_MASK) | (UART_u8_Word_Size <<1));
    108c:	a0 e4       	ldi	r26, 0x40	; 64
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e0 e4       	ldi	r30, 0x40	; 64
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	89 77       	andi	r24, 0x79	; 121
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	28 2f       	mov	r18, r24
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	82 2b       	or	r24, r18
    10a8:	8c 93       	st	X, r24
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <UART_voidSetWordSize+0x72>
		break;
	case UART_u8_NINE_BIT_WORD:
		UART_u8_UCSRC_UBRRH_REG = (((UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) & UART_u8_WORD_SIZE_MASK) | (0b00000110));
    10ac:	a0 e4       	ldi	r26, 0x40	; 64
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e0 e4       	ldi	r30, 0x40	; 64
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	86 68       	ori	r24, 0x86	; 134
    10b8:	8c 93       	st	X, r24
		SET_BIT(UART_u8_UCSRB_REG, UART_u8_UCSZ2_BIT);
    10ba:	aa e2       	ldi	r26, 0x2A	; 42
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ea e2       	ldi	r30, 0x2A	; 42
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	84 60       	ori	r24, 0x04	; 4
    10c6:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <UART_voidSetClockPolarity>:

void UART_voidSetClockPolarity(u8 UART_u8_Polarity)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
	if(UART_u8_Polarity)
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	88 23       	and	r24, r24
    10e4:	41 f0       	breq	.+16     	; 0x10f6 <UART_voidSetClockPolarity+0x22>
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) | (1<<UART_u8_UCPOL_BIT);
    10e6:	a0 e4       	ldi	r26, 0x40	; 64
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e0 e4       	ldi	r30, 0x40	; 64
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	81 68       	ori	r24, 0x81	; 129
    10f2:	8c 93       	st	X, r24
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <UART_voidSetClockPolarity+0x32>
	}
	else
	{
		UART_u8_UCSRC_UBRRH_REG = ( UART_u8_UCSRC_UBRRH_REG | (1<<UART_u8_URSEL_BIT)) & (~(1<<UART_u8_UCPOL_BIT));
    10f6:	a0 e4       	ldi	r26, 0x40	; 64
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e0 e4       	ldi	r30, 0x40	; 64
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8e 77       	andi	r24, 0x7E	; 126
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	8c 93       	st	X, r24
	}
}
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <UART_voidSetBaudRate>:

void UART_voidSetBaudRate(u16 UART_u16_Baud_Rate)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <UART_voidSetBaudRate+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	UART_u8_UBRRL_REG = (u8)UART_u16_Baud_Rate;
    111c:	e9 e2       	ldi	r30, 0x29	; 41
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	80 83       	st	Z, r24

	UART_u8_UCSRC_UBRRH_REG = ((UART_u8_UCSRC_UBRRH_REG & UART_u8_UBRRH_MASK) | ((u8)(UART_u16_Baud_Rate >> 8)));
    1124:	a0 e4       	ldi	r26, 0x40	; 64
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e0 e4       	ldi	r30, 0x40	; 64
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	20 77       	andi	r18, 0x70	; 112
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	89 2f       	mov	r24, r25
    1138:	99 27       	eor	r25, r25
    113a:	82 2b       	or	r24, r18
    113c:	8c 93       	st	X, r24
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <UART_voidTransmitterEnable>:

void UART_voidTransmitterEnable()
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_u8_UCSRB_REG, UART_u8_TXEN_BIT);
    1150:	aa e2       	ldi	r26, 0x2A	; 42
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e2       	ldi	r30, 0x2A	; 42
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 60       	ori	r24, 0x08	; 8
    115c:	8c 93       	st	X, r24
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <UART_voidReceiverEnable>:

void UART_voidReceiverEnable()
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_u8_UCSRB_REG, UART_u8_RXEN_BIT);
    116c:	aa e2       	ldi	r26, 0x2A	; 42
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ea e2       	ldi	r30, 0x2A	; 42
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	80 61       	ori	r24, 0x10	; 16
    1178:	8c 93       	st	X, r24
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <UART_voidTransmitterDisable>:

void UART_voidTransmitterDisable()
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UART_u8_UCSRB_REG, UART_u8_TXEN_BIT);
    1188:	aa e2       	ldi	r26, 0x2A	; 42
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e2       	ldi	r30, 0x2A	; 42
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	8c 93       	st	X, r24
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <UART_voidReceiverDisable>:

void UART_voidReceiverDisable()
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UART_u8_UCSRB_REG, UART_u8_RXEN_BIT);
    11a4:	aa e2       	ldi	r26, 0x2A	; 42
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e2       	ldi	r30, 0x2A	; 42
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8f 7e       	andi	r24, 0xEF	; 239
    11b0:	8c 93       	st	X, r24
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <UART_voidTransmit>:


void UART_voidTransmit(u8 UART_u16_Data)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0)
    11c4:	eb e2       	ldi	r30, 0x2B	; 43
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	82 95       	swap	r24
    11cc:	86 95       	lsr	r24
    11ce:	87 70       	andi	r24, 0x07	; 7
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	90 70       	andi	r25, 0x00	; 0
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	a1 f3       	breq	.-24     	; 0x11c4 <UART_voidTransmit+0xc>
	{}
	UART_u8_UDR_REG = UART_u16_Data;
    11dc:	ec e2       	ldi	r30, 0x2C	; 44
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	80 83       	st	Z, r24
	while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_TXC_BIT) == 0)
    11e4:	eb e2       	ldi	r30, 0x2B	; 43
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	82 95       	swap	r24
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	99 f3       	breq	.-26     	; 0x11e4 <UART_voidTransmit+0x2c>
	{}
}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <UART_voidTransmitNewLine>:

void UART_voidTransmitNewLine()
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	UART_voidTransmit('\r');
    120e:	8d e0       	ldi	r24, 0x0D	; 13
    1210:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
	UART_voidTransmit('\n');
    1214:	8a e0       	ldi	r24, 0x0A	; 10
    1216:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <UART_voidTransmitInteger>:

void UART_voidTransmitInteger(u32 integer)
{
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	29 97       	sbiw	r28, 0x09	; 9
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	6e 83       	std	Y+6, r22	; 0x06
    123e:	7f 83       	std	Y+7, r23	; 0x07
    1240:	88 87       	std	Y+8, r24	; 0x08
    1242:	99 87       	std	Y+9, r25	; 0x09
	if(integer == 0)
    1244:	8e 81       	ldd	r24, Y+6	; 0x06
    1246:	9f 81       	ldd	r25, Y+7	; 0x07
    1248:	a8 85       	ldd	r26, Y+8	; 0x08
    124a:	b9 85       	ldd	r27, Y+9	; 0x09
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	a1 05       	cpc	r26, r1
    1250:	b1 05       	cpc	r27, r1
    1252:	21 f4       	brne	.+8      	; 0x125c <UART_voidTransmitInteger+0x3c>
		{
			UART_voidTransmit('0');
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
    125a:	74 c0       	rjmp	.+232    	; 0x1344 <UART_voidTransmitInteger+0x124>
			return;
		}

		u8 count  = 0;
    125c:	1d 82       	std	Y+5, r1	; 0x05
		u32 invertedInteger = 0;
    125e:	19 82       	std	Y+1, r1	; 0x01
    1260:	1a 82       	std	Y+2, r1	; 0x02
    1262:	1b 82       	std	Y+3, r1	; 0x03
    1264:	1c 82       	std	Y+4, r1	; 0x04
    1266:	3b c0       	rjmp	.+118    	; 0x12de <UART_voidTransmitInteger+0xbe>
		while(integer != 0)
		{
			invertedInteger = (integer%10) + invertedInteger*10;
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	a8 85       	ldd	r26, Y+8	; 0x08
    126e:	b9 85       	ldd	r27, Y+9	; 0x09
    1270:	2a e0       	ldi	r18, 0x0A	; 10
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	7c 01       	movw	r14, r24
    1286:	8d 01       	movw	r16, r26
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	ab 81       	ldd	r26, Y+3	; 0x03
    128e:	bc 81       	ldd	r27, Y+4	; 0x04
    1290:	2a e0       	ldi	r18, 0x0A	; 10
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 0a 30 	call	0x6014	; 0x6014 <__mulsi3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	8e 0d       	add	r24, r14
    12a6:	9f 1d       	adc	r25, r15
    12a8:	a0 1f       	adc	r26, r16
    12aa:	b1 1f       	adc	r27, r17
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	ab 83       	std	Y+3, r26	; 0x03
    12b2:	bc 83       	std	Y+4, r27	; 0x04
			integer /= 10;
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	a8 85       	ldd	r26, Y+8	; 0x08
    12ba:	b9 85       	ldd	r27, Y+9	; 0x09
    12bc:	2a e0       	ldi	r18, 0x0A	; 10
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    12cc:	da 01       	movw	r26, r20
    12ce:	c9 01       	movw	r24, r18
    12d0:	8e 83       	std	Y+6, r24	; 0x06
    12d2:	9f 83       	std	Y+7, r25	; 0x07
    12d4:	a8 87       	std	Y+8, r26	; 0x08
    12d6:	b9 87       	std	Y+9, r27	; 0x09
			count++;
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	8d 83       	std	Y+5, r24	; 0x05
			return;
		}

		u8 count  = 0;
		u32 invertedInteger = 0;
		while(integer != 0)
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	a8 85       	ldd	r26, Y+8	; 0x08
    12e4:	b9 85       	ldd	r27, Y+9	; 0x09
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	a1 05       	cpc	r26, r1
    12ea:	b1 05       	cpc	r27, r1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <UART_voidTransmitInteger+0xd0>
    12ee:	bc cf       	rjmp	.-136    	; 0x1268 <UART_voidTransmitInteger+0x48>
    12f0:	26 c0       	rjmp	.+76     	; 0x133e <UART_voidTransmitInteger+0x11e>
			count++;
		}

		while(count != 0)
		{
			UART_voidTransmit(invertedInteger%10 + 48);
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	ab 81       	ldd	r26, Y+3	; 0x03
    12f8:	bc 81       	ldd	r27, Y+4	; 0x04
    12fa:	2a e0       	ldi	r18, 0x0A	; 10
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	80 5d       	subi	r24, 0xD0	; 208
    1310:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
			invertedInteger /=10;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	ab 81       	ldd	r26, Y+3	; 0x03
    131a:	bc 81       	ldd	r27, Y+4	; 0x04
    131c:	2a e0       	ldi	r18, 0x0A	; 10
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    132c:	da 01       	movw	r26, r20
    132e:	c9 01       	movw	r24, r18
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	ab 83       	std	Y+3, r26	; 0x03
    1336:	bc 83       	std	Y+4, r27	; 0x04
			count--;
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	8d 83       	std	Y+5, r24	; 0x05
			invertedInteger = (integer%10) + invertedInteger*10;
			integer /= 10;
			count++;
		}

		while(count != 0)
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	88 23       	and	r24, r24
    1342:	b9 f6       	brne	.-82     	; 0x12f2 <UART_voidTransmitInteger+0xd2>
		{
			UART_voidTransmit(invertedInteger%10 + 48);
			invertedInteger /=10;
			count--;
		}
}
    1344:	29 96       	adiw	r28, 0x09	; 9
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	08 95       	ret

0000135e <UART_voidTransmitFraction>:

void UART_voidTransmitFraction(u32 frac)
{
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	2a 97       	sbiw	r28, 0x0a	; 10
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	6f 83       	std	Y+7, r22	; 0x07
    137c:	78 87       	std	Y+8, r23	; 0x08
    137e:	89 87       	std	Y+9, r24	; 0x09
    1380:	9a 87       	std	Y+10, r25	; 0x0a
	u8 count  = 0;
    1382:	1e 82       	std	Y+6, r1	; 0x06
	u32 invertedFrac = 0;
    1384:	1a 82       	std	Y+2, r1	; 0x02
    1386:	1b 82       	std	Y+3, r1	; 0x03
    1388:	1c 82       	std	Y+4, r1	; 0x04
    138a:	1d 82       	std	Y+5, r1	; 0x05
    138c:	3b c0       	rjmp	.+118    	; 0x1404 <UART_voidTransmitFraction+0xa6>
	while(frac != 0)
	{
		invertedFrac = (frac%10) + invertedFrac*10;
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	a9 85       	ldd	r26, Y+9	; 0x09
    1394:	ba 85       	ldd	r27, Y+10	; 0x0a
    1396:	2a e0       	ldi	r18, 0x0A	; 10
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	7c 01       	movw	r14, r24
    13ac:	8d 01       	movw	r16, r26
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	9b 81       	ldd	r25, Y+3	; 0x03
    13b2:	ac 81       	ldd	r26, Y+4	; 0x04
    13b4:	bd 81       	ldd	r27, Y+5	; 0x05
    13b6:	2a e0       	ldi	r18, 0x0A	; 10
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 0a 30 	call	0x6014	; 0x6014 <__mulsi3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8e 0d       	add	r24, r14
    13cc:	9f 1d       	adc	r25, r15
    13ce:	a0 1f       	adc	r26, r16
    13d0:	b1 1f       	adc	r27, r17
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	ac 83       	std	Y+4, r26	; 0x04
    13d8:	bd 83       	std	Y+5, r27	; 0x05
		frac /= 10;
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	a9 85       	ldd	r26, Y+9	; 0x09
    13e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    13e2:	2a e0       	ldi	r18, 0x0A	; 10
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    13f2:	da 01       	movw	r26, r20
    13f4:	c9 01       	movw	r24, r18
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
    13fa:	a9 87       	std	Y+9, r26	; 0x09
    13fc:	ba 87       	std	Y+10, r27	; 0x0a
		count++;
    13fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	8e 83       	std	Y+6, r24	; 0x06

void UART_voidTransmitFraction(u32 frac)
{
	u8 count  = 0;
	u32 invertedFrac = 0;
	while(frac != 0)
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	a9 85       	ldd	r26, Y+9	; 0x09
    140a:	ba 85       	ldd	r27, Y+10	; 0x0a
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	a1 05       	cpc	r26, r1
    1410:	b1 05       	cpc	r27, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <UART_voidTransmitFraction+0xb8>
    1414:	bc cf       	rjmp	.-136    	; 0x138e <UART_voidTransmitFraction+0x30>
		invertedFrac = (frac%10) + invertedFrac*10;
		frac /= 10;
		count++;
	}

	u8 zerosToPrint = UART_u8_MAX_FRACTION_DIGITS - count;
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	89 1b       	sub	r24, r25
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	06 c0       	rjmp	.+12     	; 0x142c <UART_voidTransmitFraction+0xce>
	while(zerosToPrint)
	{
		UART_voidTransmit('0');
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
		zerosToPrint--;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
		frac /= 10;
		count++;
	}

	u8 zerosToPrint = UART_u8_MAX_FRACTION_DIGITS - count;
	while(zerosToPrint)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	88 23       	and	r24, r24
    1430:	b9 f7       	brne	.-18     	; 0x1420 <UART_voidTransmitFraction+0xc2>
    1432:	26 c0       	rjmp	.+76     	; 0x1480 <UART_voidTransmitFraction+0x122>
		zerosToPrint--;
	}

	while(count != 0)
	{
		UART_voidTransmit(invertedFrac%10 + 48);
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	ac 81       	ldd	r26, Y+4	; 0x04
    143a:	bd 81       	ldd	r27, Y+5	; 0x05
    143c:	2a e0       	ldi	r18, 0x0A	; 10
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	80 5d       	subi	r24, 0xD0	; 208
    1452:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
		invertedFrac /=10;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	ac 81       	ldd	r26, Y+4	; 0x04
    145c:	bd 81       	ldd	r27, Y+5	; 0x05
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    146e:	da 01       	movw	r26, r20
    1470:	c9 01       	movw	r24, r18
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	9b 83       	std	Y+3, r25	; 0x03
    1476:	ac 83       	std	Y+4, r26	; 0x04
    1478:	bd 83       	std	Y+5, r27	; 0x05
		count--;
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	8e 83       	std	Y+6, r24	; 0x06
	{
		UART_voidTransmit('0');
		zerosToPrint--;
	}

	while(count != 0)
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	88 23       	and	r24, r24
    1484:	b9 f6       	brne	.-82     	; 0x1434 <UART_voidTransmitFraction+0xd6>
	{
		UART_voidTransmit(invertedFrac%10 + 48);
		invertedFrac /=10;
		count--;
	}
}
    1486:	2a 96       	adiw	r28, 0x0a	; 10
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	08 95       	ret

000014a0 <UART_voidTransmitNumber>:

void UART_voidTransmitNumber(f32 num)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	2c 97       	sbiw	r28, 0x0c	; 12
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	69 87       	std	Y+9, r22	; 0x09
    14b6:	7a 87       	std	Y+10, r23	; 0x0a
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	9c 87       	std	Y+12, r25	; 0x0c

	if(num < 0)
    14bc:	69 85       	ldd	r22, Y+9	; 0x09
    14be:	7a 85       	ldd	r23, Y+10	; 0x0a
    14c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	64 f4       	brge	.+24     	; 0x14ec <UART_voidTransmitNumber+0x4c>
	{
		num *= -1;
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    14da:	bc 85       	ldd	r27, Y+12	; 0x0c
    14dc:	b0 58       	subi	r27, 0x80	; 128
    14de:	89 87       	std	Y+9, r24	; 0x09
    14e0:	9a 87       	std	Y+10, r25	; 0x0a
    14e2:	ab 87       	std	Y+11, r26	; 0x0b
    14e4:	bc 87       	std	Y+12, r27	; 0x0c
		UART_voidTransmit('-');
    14e6:	8d e2       	ldi	r24, 0x2D	; 45
    14e8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
	}

	u32 intNum = (s32)num;
    14ec:	69 85       	ldd	r22, Y+9	; 0x09
    14ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    14f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14f4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	af 83       	std	Y+7, r26	; 0x07
    1502:	b8 87       	std	Y+8, r27	; 0x08
	f32 afterDecimalPoint = num - (f32)intNum;
    1504:	6d 81       	ldd	r22, Y+5	; 0x05
    1506:	7e 81       	ldd	r23, Y+6	; 0x06
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1510:	9b 01       	movw	r18, r22
    1512:	ac 01       	movw	r20, r24
    1514:	69 85       	ldd	r22, Y+9	; 0x09
    1516:	7a 85       	ldd	r23, Y+10	; 0x0a
    1518:	8b 85       	ldd	r24, Y+11	; 0x0b
    151a:	9c 85       	ldd	r25, Y+12	; 0x0c
    151c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	ab 83       	std	Y+3, r26	; 0x03
    152a:	bc 83       	std	Y+4, r27	; 0x04

	UART_voidTransmitInteger(intNum);
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	af 81       	ldd	r26, Y+7	; 0x07
    1532:	b8 85       	ldd	r27, Y+8	; 0x08
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 10 09 	call	0x1220	; 0x1220 <UART_voidTransmitInteger>

	if(afterDecimalPoint > UART_u8_MINMUM_FRACTION)
    153c:	69 81       	ldd	r22, Y+1	; 0x01
    153e:	7a 81       	ldd	r23, Y+2	; 0x02
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	2f e6       	ldi	r18, 0x6F	; 111
    1546:	32 e1       	ldi	r19, 0x12	; 18
    1548:	43 e8       	ldi	r20, 0x83	; 131
    154a:	5a e3       	ldi	r21, 0x3A	; 58
    154c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	cc f4       	brge	.+50     	; 0x1586 <UART_voidTransmitNumber+0xe6>
	{
		UART_voidTransmit('.');
    1554:	8e e2       	ldi	r24, 0x2E	; 46
    1556:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
		UART_voidTransmitFraction(afterDecimalPoint*UART_u8_MAX_FRACTION_DIGITS_FACTOR);
    155a:	69 81       	ldd	r22, Y+1	; 0x01
    155c:	7a 81       	ldd	r23, Y+2	; 0x02
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a e7       	ldi	r20, 0x7A	; 122
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 af 09 	call	0x135e	; 0x135e <UART_voidTransmitFraction>
	}
}
    1586:	2c 96       	adiw	r28, 0x0c	; 12
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <UART_voidTransmitStr>:

void UART_voidTransmitStr(u8* str)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <UART_voidTransmitStr+0x6>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <UART_voidTransmitStr+0x34>
	while(*str != '\0')
	{
		if(*str == '\n')
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	80 81       	ld	r24, Z
    15ae:	8a 30       	cpi	r24, 0x0A	; 10
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <UART_voidTransmitStr+0x20>
		{
			UART_voidTransmitNewLine();
    15b2:	0e 94 03 09 	call	0x1206	; 0x1206 <UART_voidTransmitNewLine>
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <UART_voidTransmitStr+0x2a>
		}
		else
		{
			UART_voidTransmit(*str);
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	80 81       	ld	r24, Z
    15be:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_voidTransmit>
		}
		str++;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	}
}

void UART_voidTransmitStr(u8* str)
{
	while(*str != '\0')
    15cc:	e9 81       	ldd	r30, Y+1	; 0x01
    15ce:	fa 81       	ldd	r31, Y+2	; 0x02
    15d0:	80 81       	ld	r24, Z
    15d2:	88 23       	and	r24, r24
    15d4:	49 f7       	brne	.-46     	; 0x15a8 <UART_voidTransmitStr+0x10>
		{
			UART_voidTransmit(*str);
		}
		str++;
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <UART_u16Receive>:

u16 UART_u16Receive(u8* errorState)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <UART_u16Receive+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <UART_u16Receive+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
		errorState = UART_u8_RECEIVE_CORRECT;
    15f0:	1c 82       	std	Y+4, r1	; 0x04
    15f2:	1b 82       	std	Y+3, r1	; 0x03
		u16 UART_u16_Received_Data;
		while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT) == 0)
    15f4:	eb e2       	ldi	r30, 0x2B	; 43
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	dc f7       	brge	.-10     	; 0x15f4 <UART_u16Receive+0x14>
		{}

		UART_u16_Received_Data = ((u16)GET_BIT(UART_u8_UCSRB_REG,UART_u8_RXB8_BIT)) << 8;
    15fe:	ea e2       	ldi	r30, 0x2A	; 42
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	86 95       	lsr	r24
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	90 70       	andi	r25, 0x00	; 0
    160e:	98 2f       	mov	r25, r24
    1610:	88 27       	eor	r24, r24
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
		UART_u16_Received_Data |= UART_u8_UDR_REG;
    1616:	ec e2       	ldi	r30, 0x2C	; 44
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	82 2b       	or	r24, r18
    1626:	93 2b       	or	r25, r19
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01

		if(GET_BIT(UART_u8_UCSRA_REG,UART_u8_DOR_BIT))
    162c:	eb e2       	ldi	r30, 0x2B	; 43
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	86 95       	lsr	r24
    1634:	86 95       	lsr	r24
    1636:	86 95       	lsr	r24
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	90 70       	andi	r25, 0x00	; 0
    1640:	88 23       	and	r24, r24
    1642:	29 f0       	breq	.+10     	; 0x164e <UART_u16Receive+0x6e>
		{
			*errorState = UART_u8_DATA_OVERRUN;
    1644:	eb 81       	ldd	r30, Y+3	; 0x03
    1646:	fc 81       	ldd	r31, Y+4	; 0x04
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	80 83       	st	Z, r24
    164c:	1f c0       	rjmp	.+62     	; 0x168c <UART_u16Receive+0xac>
		}
		else if(GET_BIT(UART_u8_UCSRA_REG,UART_u8_PE_BIT))
    164e:	eb e2       	ldi	r30, 0x2B	; 43
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	88 23       	and	r24, r24
    1662:	29 f0       	breq	.+10     	; 0x166e <UART_u16Receive+0x8e>
		{
			*errorState = UART_u8_PARITY_ERROR;
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	80 83       	st	Z, r24
    166c:	0f c0       	rjmp	.+30     	; 0x168c <UART_u16Receive+0xac>
		}
		else if(GET_BIT(UART_u8_UCSRA_REG,UART_u8_FE_BIT))
    166e:	eb e2       	ldi	r30, 0x2B	; 43
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	82 95       	swap	r24
    1676:	8f 70       	andi	r24, 0x0F	; 15
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	81 70       	andi	r24, 0x01	; 1
    167e:	90 70       	andi	r25, 0x00	; 0
    1680:	88 23       	and	r24, r24
    1682:	21 f0       	breq	.+8      	; 0x168c <UART_u16Receive+0xac>
		{
			*errorState = UART_u8_FRAME_ERROR;
    1684:	eb 81       	ldd	r30, Y+3	; 0x03
    1686:	fc 81       	ldd	r31, Y+4	; 0x04
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 83       	st	Z, r24
		}

		return UART_u16_Received_Data;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <UART_u16Read>:

u8 UART_u16Read()
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	//the interrupt handler
//	u16 UART_u16_Received_Data;
//	UART_u16_Received_Data = ((u16)GET_BIT(UART_u8_UCSRB_REG,UART_u8_RXB8_BIT)) << 8;
//	UART_u16_Received_Data |= UART_u8_UDR_REG;
//	return UART_u16_Received_Data;
	return UART_u8_UDR_REG;
    16a6:	ec e2       	ldi	r30, 0x2C	; 44
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <UART_voidEnableReceiveInterrupt>:
void UART_voidEnableReceiveInterrupt()
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXCIE_BIT);
    16ba:	aa e2       	ldi	r26, 0x2A	; 42
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ea e2       	ldi	r30, 0x2A	; 42
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 68       	ori	r24, 0x80	; 128
    16c6:	8c 93       	st	X, r24
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <UART_voidDisableReceiveInterrupt>:

void UART_voidDisableReceiveInterrupt()
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_RXCIE_BIT);
    16d6:	aa e2       	ldi	r26, 0x2A	; 42
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ea e2       	ldi	r30, 0x2A	; 42
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 77       	andi	r24, 0x7F	; 127
    16e2:	8c 93       	st	X, r24
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <UART_voidEnableTransmissionInterrupt>:

void UART_voidEnableTransmissionInterrupt()
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXCIE_BIT);
    16f2:	aa e2       	ldi	r26, 0x2A	; 42
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ea e2       	ldi	r30, 0x2A	; 42
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 64       	ori	r24, 0x40	; 64
    16fe:	8c 93       	st	X, r24
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <UART_voidDisableTransmissionInterrupt>:

void UART_voidDisableTransmissionInterrupt()
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_TXCIE_BIT);
    170e:	aa e2       	ldi	r26, 0x2A	; 42
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ea e2       	ldi	r30, 0x2A	; 42
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8f 7b       	andi	r24, 0xBF	; 191
    171a:	8c 93       	st	X, r24
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <UART_voidEnableDataRegisterEmptyInterrupt>:

void UART_voidEnableDataRegisterEmptyInterrupt()
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_u8_UCSRB_REG,UART_u8_UDRIE_BIT);
    172a:	aa e2       	ldi	r26, 0x2A	; 42
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ea e2       	ldi	r30, 0x2A	; 42
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 62       	ori	r24, 0x20	; 32
    1736:	8c 93       	st	X, r24
}
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <UART_voidDisableDataRegisterEmptyInterrupt>:

void UART_voidDisableDataRegisterEmptyInterrupt()
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UDRIE_BIT);
    1746:	aa e2       	ldi	r26, 0x2A	; 42
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ea e2       	ldi	r30, 0x2A	; 42
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8f 7d       	andi	r24, 0xDF	; 223
    1752:	8c 93       	st	X, r24
}
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <UART_voidSetReceiveCallBack>:


void UART_voidSetReceiveCallBack(void (*pf)(void))
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <UART_voidSetReceiveCallBack+0x6>
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
	RecieveCompleteFuncPointer = pf;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	90 93 d3 01 	sts	0x01D3, r25
    1770:	80 93 d2 01 	sts	0x01D2, r24
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <UART_voidSetTransmissionCallBack>:

void UART_voidSetTransmissionCallBack(void (*pf)(void))
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <UART_voidSetTransmissionCallBack+0x6>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
	TransmissionCompleteFuncPointer = pf;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	90 93 d5 01 	sts	0x01D5, r25
    1794:	80 93 d4 01 	sts	0x01D4, r24
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <UART_voidSetDataRegisterEmptyCallBack>:

void UART_voidSetDataRegisterEmptyCallBack(void (*pf)(void))
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <UART_voidSetDataRegisterEmptyCallBack+0x6>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
	DataRegisterEmptyFuncPointer = pf;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	90 93 d7 01 	sts	0x01D7, r25
    17b8:	80 93 d6 01 	sts	0x01D6, r24
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <__vector_13>:


void __vector_13(void)	__attribute__((signal));
void __vector_13(void)
{
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	0f 92       	push	r0
    17ce:	11 24       	eor	r1, r1
    17d0:	2f 93       	push	r18
    17d2:	3f 93       	push	r19
    17d4:	4f 93       	push	r20
    17d6:	5f 93       	push	r21
    17d8:	6f 93       	push	r22
    17da:	7f 93       	push	r23
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	if(RecieveCompleteFuncPointer != NULL)
    17f0:	80 91 d2 01 	lds	r24, 0x01D2
    17f4:	90 91 d3 01 	lds	r25, 0x01D3
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	29 f0       	breq	.+10     	; 0x1806 <__vector_13+0x40>
	{
		RecieveCompleteFuncPointer();
    17fc:	e0 91 d2 01 	lds	r30, 0x01D2
    1800:	f0 91 d3 01 	lds	r31, 0x01D3
    1804:	09 95       	icall
	}
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	bf 91       	pop	r27
    1810:	af 91       	pop	r26
    1812:	9f 91       	pop	r25
    1814:	8f 91       	pop	r24
    1816:	7f 91       	pop	r23
    1818:	6f 91       	pop	r22
    181a:	5f 91       	pop	r21
    181c:	4f 91       	pop	r20
    181e:	3f 91       	pop	r19
    1820:	2f 91       	pop	r18
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	0f 90       	pop	r0
    1828:	1f 90       	pop	r1
    182a:	18 95       	reti

0000182c <__vector_15>:

void __vector_15(void)	__attribute__((signal));
void __vector_15(void)
{
    182c:	1f 92       	push	r1
    182e:	0f 92       	push	r0
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	0f 92       	push	r0
    1834:	11 24       	eor	r1, r1
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	if(TransmissionCompleteFuncPointer != NULL)
    1856:	80 91 d4 01 	lds	r24, 0x01D4
    185a:	90 91 d5 01 	lds	r25, 0x01D5
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	29 f0       	breq	.+10     	; 0x186c <__vector_15+0x40>
	{
		TransmissionCompleteFuncPointer();
    1862:	e0 91 d4 01 	lds	r30, 0x01D4
    1866:	f0 91 d5 01 	lds	r31, 0x01D5
    186a:	09 95       	icall
	}
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	bf 91       	pop	r27
    1876:	af 91       	pop	r26
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	7f 91       	pop	r23
    187e:	6f 91       	pop	r22
    1880:	5f 91       	pop	r21
    1882:	4f 91       	pop	r20
    1884:	3f 91       	pop	r19
    1886:	2f 91       	pop	r18
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti

00001892 <__vector_14>:

void __vector_14(void)	__attribute__((signal));
void __vector_14(void)
{
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
	if(DataRegisterEmptyFuncPointer != NULL)
    18bc:	80 91 d6 01 	lds	r24, 0x01D6
    18c0:	90 91 d7 01 	lds	r25, 0x01D7
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	29 f0       	breq	.+10     	; 0x18d2 <__vector_14+0x40>
	{
		DataRegisterEmptyFuncPointer();
    18c8:	e0 91 d6 01 	lds	r30, 0x01D6
    18cc:	f0 91 d7 01 	lds	r31, 0x01D7
    18d0:	09 95       	icall
	}
}
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	0f 90       	pop	r0
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	0f 90       	pop	r0
    18f4:	1f 90       	pop	r1
    18f6:	18 95       	reti

000018f8 <TWI_voidInitMaster>:
/* Desc:This Function initialize Two wire interface (I2C) as Master Node		**/
/*********************************************************************************/
/* Copy_u8Address:Assign the address of the Master Node							**/
/*********************************************************************************/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWEA);
    1904:	a6 e5       	ldi	r26, 0x56	; 86
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 64       	ori	r24, 0x40	; 64
    1910:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWI_u8_TWBR = 2*/
	TWI_u8_TWBR_REG = 2;
    1912:	e0 e2       	ldi	r30, 0x20	; 32
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	SET_BIT(TWI_u8_TWSR_REG, TWI_u8_TWSR_TWPS0);
    191a:	a1 e2       	ldi	r26, 0x21	; 33
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e1 e2       	ldi	r30, 0x21	; 33
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	8c 93       	st	X, r24
	SET_BIT(TWI_u8_TWSR_REG, TWI_u8_TWSR_TWPS1);
    1928:	a1 e2       	ldi	r26, 0x21	; 33
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e1 e2       	ldi	r30, 0x21	; 33
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	82 60       	ori	r24, 0x02	; 2
    1934:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	88 23       	and	r24, r24
    193a:	29 f0       	breq	.+10     	; 0x1946 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWI_u8_TWAR_REG = (Copy_u8Address << 1);
    193c:	e2 e2       	ldi	r30, 0x22	; 34
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 0f       	add	r24, r24
    1944:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWEN);
    1946:	a6 e5       	ldi	r26, 0x56	; 86
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	84 60       	ori	r24, 0x04	; 4
    1952:	8c 93       	st	X, r24
}
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <TWI_voidInitSlave>:
/* Desc:This Function initialize Two wire interface (I2C) as Slave Node			**/
/*********************************************************************************/
/* Copy_u8Address:Assign the address of the Slave Node							**/
/*********************************************************************************/
void TWI_voidInitSlave(u8 Copy_u8Address)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWI_u8_TWAR_REG = Copy_u8Address << 1;
    1968:	e2 e2       	ldi	r30, 0x22	; 34
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	88 0f       	add	r24, r24
    1970:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWEA);
    1972:	a6 e5       	ldi	r26, 0x56	; 86
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e6 e5       	ldi	r30, 0x56	; 86
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 64       	ori	r24, 0x40	; 64
    197e:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWEN);
    1980:	a6 e5       	ldi	r26, 0x56	; 86
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	84 60       	ori	r24, 0x04	; 4
    198c:	8c 93       	st	X, r24
}
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <TWI_ErrorStatusSendStartConditionWithACK>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns TWI_ErrorStatus_t                        				    **/
/* Desc:This Function Send Start Condition With ACK								**/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    19a0:	19 82       	std	Y+1, r1	; 0x01
//	TWI_u8_TWCR |= (1 << TWI_u8_TWCR_TWINT) | (1 << TWI_u8_TWCR_TWSTA) | (1 << TWI_u8_TWCR_TWEN);
	/*Send Start Condition Bit*/
		SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWSTA);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 62       	ori	r24, 0x20	; 32
    19ae:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    19b0:	a6 e5       	ldi	r26, 0x56	; 86
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	dc f7       	brge	.-10     	; 0x19be <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != START_ACK)
    19c8:	e1 e2       	ldi	r30, 0x21	; 33
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	88 7f       	andi	r24, 0xF8	; 248
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	88 30       	cpi	r24, 0x08	; 8
    19d8:	91 05       	cpc	r25, r1
    19da:	11 f0       	breq	.+4      	; 0x19e0 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns TWI_ErrorStatus_t                        				    **/
/* Desc:This Function Send repeated Start Condition With ACK					**/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    19f4:	19 82       	std	Y+1, r1	; 0x01
	TWI_u8_TWCR_REG |= (1 << TWI_u8_TWCR_TWINT) | (1 << TWI_u8_TWCR_TWSTA) | (1 << TWI_u8_TWCR_TWEN);
    19f6:	a6 e5       	ldi	r26, 0x56	; 86
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e6 e5       	ldi	r30, 0x56	; 86
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	84 6a       	ori	r24, 0xA4	; 164
    1a02:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWI_u8_TWCR, TWI_u8_TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1a04:	e6 e5       	ldi	r30, 0x56	; 86
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 23       	and	r24, r24
    1a0c:	dc f7       	brge	.-10     	; 0x1a04 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != REP_START_ACK)
    1a0e:	e1 e2       	ldi	r30, 0x21	; 33
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	88 7f       	andi	r24, 0xF8	; 248
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	80 31       	cpi	r24, 0x10	; 16
    1a1e:	91 05       	cpc	r25, r1
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns TWI_ErrorStatus_t                        				    **/
/* Desc:This Function Send Slave Address With Write ACK							**/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	//u8 Local_u8TWI_u8_TWCRValue = 0;

	/*Set 7 bits slave address to the bus*/
	TWI_u8_TWDR_REG = (Copy_u8SlaveAddress << 1);
    1a3e:	e3 e2       	ldi	r30, 0x23	; 35
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	88 0f       	add	r24, r24
    1a46:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWI_u8_TWDR_REG, TWI_u8_TWDR_TWD0);
    1a48:	a3 e2       	ldi	r26, 0x23	; 35
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e2       	ldi	r30, 0x23	; 35
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8e 7f       	andi	r24, 0xFE	; 254
    1a54:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWSTA);
    1a56:	a6 e5       	ldi	r26, 0x56	; 86
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e6 e5       	ldi	r30, 0x56	; 86
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 7d       	andi	r24, 0xDF	; 223
    1a62:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1a64:	a6 e5       	ldi	r26, 0x56	; 86
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e6 e5       	ldi	r30, 0x56	; 86
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 68       	ori	r24, 0x80	; 128
    1a70:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1a72:	e6 e5       	ldi	r30, 0x56	; 86
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 23       	and	r24, r24
    1a7a:	dc f7       	brge	.-10     	; 0x1a72 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    1a7c:	e1 e2       	ldi	r30, 0x21	; 33
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	88 7f       	andi	r24, 0xF8	; 248
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	88 31       	cpi	r24, 0x18	; 24
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	11 f0       	breq	.+4      	; 0x1a94 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns TWI_ErrorStatus_t                        				    **/
/* Desc:This Function Send Slave Address With Read ACK							**/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1aac:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1;
    1aae:	e3 e2       	ldi	r30, 0x23	; 35
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	88 0f       	add	r24, r24
    1ab6:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWI_u8_TWDR_REG, TWI_u8_TWDR_TWD0);
    1ab8:	a3 e2       	ldi	r26, 0x23	; 35
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e3 e2       	ldi	r30, 0x23	; 35
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 60       	ori	r24, 0x01	; 1
    1ac4:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWSTA);
    1ac6:	a6 e5       	ldi	r26, 0x56	; 86
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e6 e5       	ldi	r30, 0x56	; 86
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1ad4:	a6 e5       	ldi	r26, 0x56	; 86
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e6 e5       	ldi	r30, 0x56	; 86
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1ae2:	e6 e5       	ldi	r30, 0x56	; 86
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 23       	and	r24, r24
    1aea:	dc f7       	brge	.-10     	; 0x1ae2 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    1aec:	e1 e2       	ldi	r30, 0x21	; 33
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	88 7f       	andi	r24, 0xF8	; 248
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	80 34       	cpi	r24, 0x40	; 64
    1afc:	91 05       	cpc	r25, r1
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <TWI_ErrorStatusMasterWriteDataByteWithACK>:
/* Desc:This Function allows master to write byte of data With ACK				**/
/*********************************************************************************/
/* Copy_u8DataByte options: Byte of data to be sent			          		    **/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1b1c:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWI_u8_TWDR Register*/
	TWI_u8_TWDR_REG = Copy_u8DataByte;
    1b1e:	e3 e2       	ldi	r30, 0x23	; 35
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1b26:	a6 e5       	ldi	r26, 0x56	; 86
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e6 e5       	ldi	r30, 0x56	; 86
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 68       	ori	r24, 0x80	; 128
    1b32:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1b34:	e6 e5       	ldi	r30, 0x56	; 86
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 23       	and	r24, r24
    1b3c:	dc f7       	brge	.-10     	; 0x1b34 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    1b3e:	e1 e2       	ldi	r30, 0x21	; 33
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	88 7f       	andi	r24, 0xF8	; 248
    1b4a:	90 70       	andi	r25, 0x00	; 0
    1b4c:	88 32       	cpi	r24, 0x28	; 40
    1b4e:	91 05       	cpc	r25, r1
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    1b52:	85 e0       	ldi	r24, 0x05	; 5
    1b54:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <TWI_ErrorStatusMasterReadDataByteWithACK>:
/* Desc:This Function allows master to recieve byte of data With ACK			**/
/*********************************************************************************/
/* *Copy_pu8ReceivedByte options: Address of variable to store the recieved byte**/
/*********************************************************************************/
TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9b 83       	std	Y+3, r25	; 0x03
    1b70:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1b72:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1b74:	a6 e5       	ldi	r26, 0x56	; 86
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e6 e5       	ldi	r30, 0x56	; 86
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 68       	ori	r24, 0x80	; 128
    1b80:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1b82:	e6 e5       	ldi	r30, 0x56	; 86
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 23       	and	r24, r24
    1b8a:	dc f7       	brge	.-10     	; 0x1b82 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    1b8c:	e1 e2       	ldi	r30, 0x21	; 33
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	88 7f       	andi	r24, 0xF8	; 248
    1b98:	90 70       	andi	r25, 0x00	; 0
    1b9a:	80 35       	cpi	r24, 0x50	; 80
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    1ba0:	86 e0       	ldi	r24, 0x06	; 6
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	06 c0       	rjmp	.+12     	; 0x1bb2 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWI_u8_TWDR_REG;
    1ba6:	e3 e2       	ldi	r30, 0x23	; 35
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	ea 81       	ldd	r30, Y+2	; 0x02
    1bae:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb0:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <TWI_voidSendStopCondition>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function Sends a stop condition to the bus							**/
/*********************************************************************************/
void TWI_voidSendStopCondition(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWSTO);
    1bc8:	a6 e5       	ldi	r26, 0x56	; 86
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e6 e5       	ldi	r30, 0x56	; 86
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 61       	ori	r24, 0x10	; 16
    1bd4:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1bd6:	a6 e5       	ldi	r26, 0x56	; 86
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e6 e5       	ldi	r30, 0x56	; 86
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 68       	ori	r24, 0x80	; 128
    1be2:	8c 93       	st	X, r24
}
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <TWI_ErrorStatusMasterReadDataByteWithNACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithNACK(u8 * Copy_pu8ReceivedByte)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x6>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	9b 83       	std	Y+3, r25	; 0x03
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1bfa:	19 82       	std	Y+1, r1	; 0x01

	CLR_BIT(TWI_u8_TWCR_REG,TWI_u8_TWCR_TWEA);
    1bfc:	a6 e5       	ldi	r26, 0x56	; 86
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e6 e5       	ldi	r30, 0x56	; 86
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 7b       	andi	r24, 0xBF	; 191
    1c08:	8c 93       	st	X, r24

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT);
    1c0a:	a6 e5       	ldi	r26, 0x56	; 86
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e6 e5       	ldi	r30, 0x56	; 86
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWI_u8_TWCR_REG, TWI_u8_TWCR_TWINT) == 0 );
    1c18:	e6 e5       	ldi	r30, 0x56	; 86
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	dc f7       	brge	.-10     	; 0x1c18 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x2e>

	/*Check For The Condition Status Code*/
	if((TWI_u8_TWSR_REG & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    1c22:	e1 e2       	ldi	r30, 0x21	; 33
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	88 7f       	andi	r24, 0xF8	; 248
    1c2e:	90 70       	andi	r25, 0x00	; 0
    1c30:	80 35       	cpi	r24, 0x50	; 80
    1c32:	91 05       	cpc	r25, r1
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <TWI_ErrorStatusMasterReadDataByteWithNACK+0x52>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    1c36:	86 e0       	ldi	r24, 0x06	; 6
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x5e>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWI_u8_TWDR_REG;
    1c3c:	e3 e2       	ldi	r30, 0x23	; 35
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	ea 81       	ldd	r30, Y+2	; 0x02
    1c44:	fb 81       	ldd	r31, Y+3	; 0x03
    1c46:	80 83       	st	Z, r24
	}

	SET_BIT(TWI_u8_TWCR_REG,TWI_u8_TWCR_TWEA);
    1c48:	a6 e5       	ldi	r26, 0x56	; 86
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e6 e5       	ldi	r30, 0x56	; 86
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8c 93       	st	X, r24

	return Local_ErrorStatus;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <TIM0_voidPWMInit>:
static void (*TIM0_pu8_OverFlow_Interrupt)(void) = NULL;
static void (*TIM0_pu8_CompareMatch_Interrupt)(void) = NULL;


void TIM0_voidPWMInit()
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	//set clock(prescalar)
	TIM0_voidSetPrescaler(TIM0_u8_INITIAL_PWM_CLK);
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TIM0_voidSetPrescaler>
	//set mode
	TIM0_voidSetWaveFormGenMode(TIM0_u8_INTIIAL_PWM_MODE);
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <TIM0_voidSetWaveFormGenMode>

	//setting the CO0 pin
	DIO_u8SetPinDirection(TIM0_u8_PORT,TIM0_u8_OC0_PIN,DIO_u8_OUTPUT);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	63 e0       	ldi	r22, 0x03	; 3
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <TIM0_voidInit>:

void TIM0_voidInit()
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	//set clock(prescalar)
	TIM0_voidSetPrescaler(TIM0_u8_INITIAL_CLK);
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TIM0_voidSetPrescaler>
	//set mode
	TIM0_voidSetWaveFormGenMode(TIM0_u8_INITIAL_MODE);
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <TIM0_voidSetWaveFormGenMode>

}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <TIM0_voidSetWaveFormGenMode>:

void TIM0_voidSetWaveFormGenMode(u8 TIM0_u8_Mode)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <TIM0_voidSetWaveFormGenMode+0x6>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
	switch(TIM0_u8_Mode)
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	3b 83       	std	Y+3, r19	; 0x03
    1cb8:	2a 83       	std	Y+2, r18	; 0x02
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	21 f1       	breq	.+72     	; 0x1d0c <TIM0_voidSetWaveFormGenMode+0x6a>
    1cc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <TIM0_voidSetWaveFormGenMode+0x36>
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	61 f0       	breq	.+24     	; 0x1cee <TIM0_voidSetWaveFormGenMode+0x4c>
    1cd6:	46 c0       	rjmp	.+140    	; 0x1d64 <TIM0_voidSetWaveFormGenMode+0xc2>
    1cd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1cda:	3b 81       	ldd	r19, Y+3	; 0x03
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	21 f1       	breq	.+72     	; 0x1d2a <TIM0_voidSetWaveFormGenMode+0x88>
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	71 f1       	breq	.+92     	; 0x1d48 <TIM0_voidSetWaveFormGenMode+0xa6>
    1cec:	3b c0       	rjmp	.+118    	; 0x1d64 <TIM0_voidSetWaveFormGenMode+0xc2>
	{
	case TIM0_u8_NORMAL:
		CLR_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM00_BIT);
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8f 7b       	andi	r24, 0xBF	; 191
    1cfa:	8c 93       	st	X, r24
		CLR_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM01_BIT);
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	87 7f       	andi	r24, 0xF7	; 247
    1d08:	8c 93       	st	X, r24
    1d0a:	2c c0       	rjmp	.+88     	; 0x1d64 <TIM0_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM0_u8_PWM_PHASE_CORRECT:
		SET_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM00_BIT);
    1d0c:	a3 e5       	ldi	r26, 0x53	; 83
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e3 e5       	ldi	r30, 0x53	; 83
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	80 64       	ori	r24, 0x40	; 64
    1d18:	8c 93       	st	X, r24
		CLR_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM01_BIT);
    1d1a:	a3 e5       	ldi	r26, 0x53	; 83
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e3 e5       	ldi	r30, 0x53	; 83
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	87 7f       	andi	r24, 0xF7	; 247
    1d26:	8c 93       	st	X, r24
    1d28:	1d c0       	rjmp	.+58     	; 0x1d64 <TIM0_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM0_u8_CTC:
		CLR_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM00_BIT);
    1d2a:	a3 e5       	ldi	r26, 0x53	; 83
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e3 e5       	ldi	r30, 0x53	; 83
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7b       	andi	r24, 0xBF	; 191
    1d36:	8c 93       	st	X, r24
		SET_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM01_BIT);
    1d38:	a3 e5       	ldi	r26, 0x53	; 83
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e3 e5       	ldi	r30, 0x53	; 83
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 60       	ori	r24, 0x08	; 8
    1d44:	8c 93       	st	X, r24
    1d46:	0e c0       	rjmp	.+28     	; 0x1d64 <TIM0_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM0_u8_FAST_PWM:
		SET_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM00_BIT);
    1d48:	a3 e5       	ldi	r26, 0x53	; 83
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 64       	ori	r24, 0x40	; 64
    1d54:	8c 93       	st	X, r24
		SET_BIT(TIM0_u8_TCCR0_REG,TIM0_u8_WGM01_BIT);
    1d56:	a3 e5       	ldi	r26, 0x53	; 83
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e3 e5       	ldi	r30, 0x53	; 83
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 60       	ori	r24, 0x08	; 8
    1d62:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TIM0_voidSetOCR0>:

void TIM0_voidSetOCR0(u8 TIM0_u8_OCR_Value)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	0f 92       	push	r0
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_u8_OCR0_REG = TIM0_u8_OCR_Value;
    1d7c:	ec e5       	ldi	r30, 0x5C	; 92
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	80 83       	st	Z, r24
}
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <TIM0_voidSetOutputCompareMode>:

void TIM0_voidSetOutputCompareMode(u8 TIM0_u8_OC_Mode)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
	TIM0_u8_TCCR0_REG = ((TIM0_u8_TCCR0_REG & TIM0_u8_COM_MASK) | (TIM0_u8_OC_Mode << 4));
    1d98:	a3 e5       	ldi	r26, 0x53	; 83
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e3 e5       	ldi	r30, 0x53	; 83
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	28 2f       	mov	r18, r24
    1da4:	2f 7c       	andi	r18, 0xCF	; 207
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	82 95       	swap	r24
    1dae:	92 95       	swap	r25
    1db0:	90 7f       	andi	r25, 0xF0	; 240
    1db2:	98 27       	eor	r25, r24
    1db4:	80 7f       	andi	r24, 0xF0	; 240
    1db6:	98 27       	eor	r25, r24
    1db8:	82 2b       	or	r24, r18
    1dba:	8c 93       	st	X, r24
}
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <TIM0_voidSetPrescaler>:

void TIM0_voidSetPrescaler(u8 TIM0_u8_Clk_Source)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	0f 92       	push	r0
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	89 83       	std	Y+1, r24	; 0x01
	TIM0_u8_TCCR0_REG = ((TIM0_u8_TCCR0_REG & TIM0_u8_CLK_PRESCALER_MASK) | TIM0_u8_Clk_Source);
    1dd0:	a3 e5       	ldi	r26, 0x53	; 83
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e3 e5       	ldi	r30, 0x53	; 83
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	98 2f       	mov	r25, r24
    1ddc:	98 7f       	andi	r25, 0xF8	; 248
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	89 2b       	or	r24, r25
    1de2:	8c 93       	st	X, r24
}
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <TIM0_voidSetTCNT0Val>:

void TIM0_voidSetTCNT0Val(u8 TCNT0_Val)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01

	TIM0_u8_TCNT0_REG = TCNT0_Val;
    1df8:	e2 e5       	ldi	r30, 0x52	; 82
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	80 83       	st	Z, r24
}
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <TIM0_u8GetTCNT0Val>:

u8 TIM0_u8GetTCNT0Val()
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	return TIM0_u8_TCNT0_REG;
    1e10:	e2 e5       	ldi	r30, 0x52	; 82
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <TIM0_voidEnableOverFlowInterrupt>:

void TIM0_voidEnableOverFlowInterrupt()
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TOIE_BIT);
    1e24:	a9 e5       	ldi	r26, 0x59	; 89
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e9 e5       	ldi	r30, 0x59	; 89
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	81 60       	ori	r24, 0x01	; 1
    1e30:	8c 93       	st	X, r24
}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <TIM0_voidDisableOverFlowInterrupt>:

void TIM0_voidDisableOverFlowInterrupt()
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TOIE_BIT);
    1e40:	a9 e5       	ldi	r26, 0x59	; 89
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e9 e5       	ldi	r30, 0x59	; 89
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8e 7f       	andi	r24, 0xFE	; 254
    1e4c:	8c 93       	st	X, r24
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <TIM0_voidEnableCompareMatchInterrupt>:

void TIM0_voidEnableCompareMatchInterrupt()
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_OCIE_BIT);
    1e5c:	a9 e5       	ldi	r26, 0x59	; 89
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e9 e5       	ldi	r30, 0x59	; 89
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	8c 93       	st	X, r24
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <TIM0_voidDisableCompareMatchInterrupt>:

void TIM0_voidDisableCompareMatchInterrupt()
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_OCIE_BIT);
    1e78:	a9 e5       	ldi	r26, 0x59	; 89
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e9 e5       	ldi	r30, 0x59	; 89
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8d 7f       	andi	r24, 0xFD	; 253
    1e84:	8c 93       	st	X, r24
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <TIM0_voidSetOverFlowCallBack>:

void TIM0_voidSetOverFlowCallBack(void (*pf)(void))
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <TIM0_voidSetOverFlowCallBack+0x6>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pu8_OverFlow_Interrupt = pf;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	90 93 d9 01 	sts	0x01D9, r25
    1ea2:	80 93 d8 01 	sts	0x01D8, r24
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <TIM0_voidSetCompareMatchCallBack>:

void TIM0_voidSetCompareMatchCallBack(void (*pf)(void))
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <TIM0_voidSetCompareMatchCallBack+0x6>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pu8_CompareMatch_Interrupt = pf;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	90 93 db 01 	sts	0x01DB, r25
    1ec6:	80 93 da 01 	sts	0x01DA, r24
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <__vector_10>:


void __vector_10(void) 	__attribute__((signal));
void __vector_10(void)
{
    1ed4:	1f 92       	push	r1
    1ed6:	0f 92       	push	r0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	0f 92       	push	r0
    1edc:	11 24       	eor	r1, r1
    1ede:	2f 93       	push	r18
    1ee0:	3f 93       	push	r19
    1ee2:	4f 93       	push	r20
    1ee4:	5f 93       	push	r21
    1ee6:	6f 93       	push	r22
    1ee8:	7f 93       	push	r23
    1eea:	8f 93       	push	r24
    1eec:	9f 93       	push	r25
    1eee:	af 93       	push	r26
    1ef0:	bf 93       	push	r27
    1ef2:	ef 93       	push	r30
    1ef4:	ff 93       	push	r31
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_pu8_CompareMatch_Interrupt == NULL){return;}
    1efe:	80 91 da 01 	lds	r24, 0x01DA
    1f02:	90 91 db 01 	lds	r25, 0x01DB
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <__vector_10+0x40>
	TIM0_pu8_CompareMatch_Interrupt();
    1f0a:	e0 91 da 01 	lds	r30, 0x01DA
    1f0e:	f0 91 db 01 	lds	r31, 0x01DB
    1f12:	09 95       	icall
}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	7f 91       	pop	r23
    1f26:	6f 91       	pop	r22
    1f28:	5f 91       	pop	r21
    1f2a:	4f 91       	pop	r20
    1f2c:	3f 91       	pop	r19
    1f2e:	2f 91       	pop	r18
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <__vector_11>:

void __vector_11(void)	__attribute__((signal));
void __vector_11(void)
{
    1f3a:	1f 92       	push	r1
    1f3c:	0f 92       	push	r0
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	0f 92       	push	r0
    1f42:	11 24       	eor	r1, r1
    1f44:	2f 93       	push	r18
    1f46:	3f 93       	push	r19
    1f48:	4f 93       	push	r20
    1f4a:	5f 93       	push	r21
    1f4c:	6f 93       	push	r22
    1f4e:	7f 93       	push	r23
    1f50:	8f 93       	push	r24
    1f52:	9f 93       	push	r25
    1f54:	af 93       	push	r26
    1f56:	bf 93       	push	r27
    1f58:	ef 93       	push	r30
    1f5a:	ff 93       	push	r31
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_pu8_OverFlow_Interrupt == NULL){return;}
    1f64:	80 91 d8 01 	lds	r24, 0x01D8
    1f68:	90 91 d9 01 	lds	r25, 0x01D9
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	29 f0       	breq	.+10     	; 0x1f7a <__vector_11+0x40>
	TIM0_pu8_OverFlow_Interrupt();
    1f70:	e0 91 d8 01 	lds	r30, 0x01D8
    1f74:	f0 91 d9 01 	lds	r31, 0x01D9
    1f78:	09 95       	icall
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	ff 91       	pop	r31
    1f80:	ef 91       	pop	r30
    1f82:	bf 91       	pop	r27
    1f84:	af 91       	pop	r26
    1f86:	9f 91       	pop	r25
    1f88:	8f 91       	pop	r24
    1f8a:	7f 91       	pop	r23
    1f8c:	6f 91       	pop	r22
    1f8e:	5f 91       	pop	r21
    1f90:	4f 91       	pop	r20
    1f92:	3f 91       	pop	r19
    1f94:	2f 91       	pop	r18
    1f96:	0f 90       	pop	r0
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	0f 90       	pop	r0
    1f9c:	1f 90       	pop	r1
    1f9e:	18 95       	reti

00001fa0 <TIM1_voidInit>:
static void (*TIM1_pu8_CompareMatchA_Interrupt)(void) = NULL;
static void (*TIM1_pu8_CompareMatchB_Interrupt)(void) = NULL;
static void (*TIM1_pu8_InputCapture_Interrupt)(void) = NULL;

void TIM1_voidInit()
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
	TIM1_voidSetPrescaler(TIM1_u8_INITIAL_CLK);
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	0e 94 5f 10 	call	0x20be	; 0x20be <TIM1_voidSetPrescaler>

	TIM1_voidSetWaveFormGenMode(TIM1_u8_INITIAL_MODE);
    1fae:	87 e0       	ldi	r24, 0x07	; 7
    1fb0:	0e 94 3a 10 	call	0x2074	; 0x2074 <TIM1_voidSetWaveFormGenMode>
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <TIM1_voidPWMInit>:

void TIM1_voidPWMInit()
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
	TIM1_voidSetPrescaler(TIM1_u8_INITIAL_PWM_CLK);
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	0e 94 5f 10 	call	0x20be	; 0x20be <TIM1_voidSetPrescaler>

	TIM1_voidSetWaveFormGenMode(TIM1_u8_INITIAL_PWM_MODE);
    1fc8:	87 e0       	ldi	r24, 0x07	; 7
    1fca:	0e 94 3a 10 	call	0x2074	; 0x2074 <TIM1_voidSetWaveFormGenMode>

	DIO_u8SetPinDirection(TIM1_u8_PORT,TIM1_u8_OC1A_PIN,DIO_u8_OUTPUT);
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	65 e0       	ldi	r22, 0x05	; 5
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(TIM1_u8_PORT,TIM1_u8_OC1B_PIN,DIO_u8_OUTPUT);
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <TIM1_voidSetOutputCompareMode>:

void TIM1_voidSetOutputCompareMode(u8 TIM1x, u8 TIM1_u8_OC_Mode)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <TIM1_voidSetOutputCompareMode+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <TIM1_voidSetOutputCompareMode+0x8>
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	6a 83       	std	Y+2, r22	; 0x02
	switch(TIM1x)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	3c 83       	std	Y+4, r19	; 0x04
    2000:	2b 83       	std	Y+3, r18	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	31 f0       	breq	.+12     	; 0x2016 <TIM1_voidSetOutputCompareMode+0x2e>
    200a:	2b 81       	ldd	r18, Y+3	; 0x03
    200c:	3c 81       	ldd	r19, Y+4	; 0x04
    200e:	21 30       	cpi	r18, 0x01	; 1
    2010:	31 05       	cpc	r19, r1
    2012:	b9 f0       	breq	.+46     	; 0x2042 <TIM1_voidSetOutputCompareMode+0x5a>
    2014:	28 c0       	rjmp	.+80     	; 0x2066 <TIM1_voidSetOutputCompareMode+0x7e>
	{
	case TIM1_u8_TIM1A:
		TIM1_u8_TCCR1A_REG = (TIM1_u8_TCCR1A_REG & TIM1_u8_COM1A_MASK) | (TIM1_u8_OC_Mode << TIM1_u8_COM1A0_BIT);
    2016:	af e4       	ldi	r26, 0x4F	; 79
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ef e4       	ldi	r30, 0x4F	; 79
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	2f 73       	andi	r18, 0x3F	; 63
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	00 24       	eor	r0, r0
    202c:	96 95       	lsr	r25
    202e:	87 95       	ror	r24
    2030:	07 94       	ror	r0
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	07 94       	ror	r0
    2038:	98 2f       	mov	r25, r24
    203a:	80 2d       	mov	r24, r0
    203c:	82 2b       	or	r24, r18
    203e:	8c 93       	st	X, r24
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <TIM1_voidSetOutputCompareMode+0x7e>
		break;
	case TIM1_u8_TIM1B:
		TIM1_u8_TCCR1A_REG = (TIM1_u8_TCCR1A_REG & TIM1_u8_COM1B_MASK) | (TIM1_u8_OC_Mode << TIM1_u8_COM1B0_BIT);
    2042:	af e4       	ldi	r26, 0x4F	; 79
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ef e4       	ldi	r30, 0x4F	; 79
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	28 2f       	mov	r18, r24
    204e:	2f 7c       	andi	r18, 0xCF	; 207
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	82 95       	swap	r24
    2058:	92 95       	swap	r25
    205a:	90 7f       	andi	r25, 0xF0	; 240
    205c:	98 27       	eor	r25, r24
    205e:	80 7f       	andi	r24, 0xF0	; 240
    2060:	98 27       	eor	r25, r24
    2062:	82 2b       	or	r24, r18
    2064:	8c 93       	st	X, r24
		break;
	}
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <TIM1_voidSetWaveFormGenMode>:

void TIM1_voidSetWaveFormGenMode(u8 TIM1_u8_Mode)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	0f 92       	push	r0
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_TCCR1A_REG = (TIM1_u8_TCCR1A_REG & TIM1_u8_WGM11_10_MASK) | (TIM1_u8_Mode & 0b00000011);
    2080:	af e4       	ldi	r26, 0x4F	; 79
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ef e4       	ldi	r30, 0x4F	; 79
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	98 2f       	mov	r25, r24
    208c:	9c 7f       	andi	r25, 0xFC	; 252
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	83 70       	andi	r24, 0x03	; 3
    2092:	89 2b       	or	r24, r25
    2094:	8c 93       	st	X, r24
	TIM1_u8_TCCR1B_REG = (TIM1_u8_TCCR1B_REG & TIM1_u8_WGM13_12_MASK) | ((TIM1_u8_Mode & 0b00001100) << 1);
    2096:	ae e4       	ldi	r26, 0x4E	; 78
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	ee e4       	ldi	r30, 0x4E	; 78
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	28 2f       	mov	r18, r24
    20a2:	27 7e       	andi	r18, 0xE7	; 231
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	8c 70       	andi	r24, 0x0C	; 12
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	82 2b       	or	r24, r18
    20b4:	8c 93       	st	X, r24
}
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <TIM1_voidSetPrescaler>:

void TIM1_voidSetPrescaler(u8 TIM1_u8_Clk_Source)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_TCCR1B_REG = (TIM1_u8_TCCR1B_REG & TIM1_u8_CLK_PRESCALER_MASK) | TIM1_u8_Clk_Source;
    20ca:	ae e4       	ldi	r26, 0x4E	; 78
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	ee e4       	ldi	r30, 0x4E	; 78
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	98 2f       	mov	r25, r24
    20d6:	98 7f       	andi	r25, 0xF8	; 248
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	89 2b       	or	r24, r25
    20dc:	8c 93       	st	X, r24
}
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <TIM1_voidSetOCR1A>:

void TIM1_voidSetOCR1A(u16 TIM1_u16_OCR_VAL)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <TIM1_voidSetOCR1A+0x6>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_OCR1AH_REG = (u8)(TIM1_u16_OCR_VAL >> 8);
    20f4:	eb e4       	ldi	r30, 0x4B	; 75
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	89 2f       	mov	r24, r25
    20fe:	99 27       	eor	r25, r25
    2100:	80 83       	st	Z, r24
	TIM1_u8_OCR1AL_REG = (u8)(TIM1_u16_OCR_VAL);
    2102:	ea e4       	ldi	r30, 0x4A	; 74
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	80 83       	st	Z, r24
}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <TIM1_voidSetOCR1B>:

void TIM1_voidSetOCR1B(u16 TIM1_u16_OCR_VAL)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <TIM1_voidSetOCR1B+0x6>
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_OCR1BH_REG = (u8)(TIM1_u16_OCR_VAL >> 8);
    2122:	e9 e4       	ldi	r30, 0x49	; 73
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	89 2f       	mov	r24, r25
    212c:	99 27       	eor	r25, r25
    212e:	80 83       	st	Z, r24
	TIM1_u8_OCR1BL_REG = (u8)(TIM1_u16_OCR_VAL);
    2130:	e8 e4       	ldi	r30, 0x48	; 72
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	80 83       	st	Z, r24
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <TIM1_voidSetTCNT1Val>:

void TIM1_voidSetTCNT1Val(u16 TCNT1_Val)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <TIM1_voidSetTCNT1Val+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_TCNT1H_REG = (u8)(TCNT1_Val >> 8);
    2150:	ed e4       	ldi	r30, 0x4D	; 77
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	89 2f       	mov	r24, r25
    215a:	99 27       	eor	r25, r25
    215c:	80 83       	st	Z, r24
	TIM1_u8_TCNT1L_REG = (u8)TCNT1_Val;
    215e:	ec e4       	ldi	r30, 0x4C	; 76
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	80 83       	st	Z, r24
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <TIM1_u16GetTCNT1Val>:

u16 TIM1_u16GetTCNT1Val()
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <TIM1_u16GetTCNT1Val+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	u16 TCNT1_Val;
	TCNT1_Val = (u16)TIM1_u8_TCNT1L_REG;
    217a:	ec e4       	ldi	r30, 0x4C	; 76
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Val |= (((u16)TIM1_u8_TCNT1H_REG) << 8);
    2188:	ed e4       	ldi	r30, 0x4D	; 77
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	38 2f       	mov	r19, r24
    2194:	22 27       	eor	r18, r18
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	82 2b       	or	r24, r18
    219c:	93 2b       	or	r25, r19
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01

	return TCNT1_Val;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <TIM1_voidSetICR1>:

void TIM1_voidSetICR1(u16 TIM1_u16_ICR_VAL)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <TIM1_voidSetICR1+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	TIM1_u8_ICR1H_REG = (u8)(TIM1_u16_ICR_VAL >> 8);
    21be:	e7 e4       	ldi	r30, 0x47	; 71
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	89 2f       	mov	r24, r25
    21c8:	99 27       	eor	r25, r25
    21ca:	80 83       	st	Z, r24
	TIM1_u8_ICR1L_REG = (u8)(TIM1_u16_ICR_VAL);
    21cc:	e6 e4       	ldi	r30, 0x46	; 70
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	80 83       	st	Z, r24
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <TIM1_u16GetICR1Val>:

u16 TIM1_u16GetICR1Val()
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <TIM1_u16GetICR1Val+0x6>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
	u16 ICR1_Val;
	ICR1_Val = (u16)TIM1_u8_ICR1L_REG;
    21e8:	e6 e4       	ldi	r30, 0x46	; 70
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Val |= (((u16)TIM1_u8_ICR1H_REG) << 8);
    21f6:	e7 e4       	ldi	r30, 0x47	; 71
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	38 2f       	mov	r19, r24
    2202:	22 27       	eor	r18, r18
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	82 2b       	or	r24, r18
    220a:	93 2b       	or	r25, r19
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01

	return ICR1_Val;
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <TIM1_voidEnableInputCaptureNoiseCanceler>:

void TIM1_voidEnableInputCaptureNoiseCanceler()
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_ICNC1_BIT);
    2226:	ae e4       	ldi	r26, 0x4E	; 78
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ee e4       	ldi	r30, 0x4E	; 78
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 68       	ori	r24, 0x80	; 128
    2232:	8c 93       	st	X, r24
}
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <TIM1_voidDisableInputCaptureNoiseCanceler>:

void TIM1_voidDisableInputCaptureNoiseCanceler()
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_ICNC1_BIT);
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8f 77       	andi	r24, 0x7F	; 127
    224e:	8c 93       	st	X, r24
}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <TIM1_voidSetInputCaptureCEdge>:

void TIM1_voidSetInputCaptureCEdge(u8 TIM1_u8_IC_Edge_select)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	0f 92       	push	r0
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	89 83       	std	Y+1, r24	; 0x01
	if(TIM1_u8_IC_Edge_select)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 23       	and	r24, r24
    2266:	41 f0       	breq	.+16     	; 0x2278 <TIM1_voidSetInputCaptureCEdge+0x22>
	{
		SET_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_ICES1_BIT);
    2268:	ae e4       	ldi	r26, 0x4E	; 78
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ee e4       	ldi	r30, 0x4E	; 78
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	80 64       	ori	r24, 0x40	; 64
    2274:	8c 93       	st	X, r24
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <TIM1_voidSetInputCaptureCEdge+0x30>
	}
	else
	{
		CLR_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_ICES1_BIT);
    2278:	ae e4       	ldi	r26, 0x4E	; 78
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ee e4       	ldi	r30, 0x4E	; 78
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7b       	andi	r24, 0xBF	; 191
    2284:	8c 93       	st	X, r24
	}
}
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <TIM1_voidEnableInputCaptureInterrupt>:

void TIM1_voidEnableInputCaptureInterrupt()
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_TICIE1_BIT);
    2296:	a9 e5       	ldi	r26, 0x59	; 89
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e9 e5       	ldi	r30, 0x59	; 89
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	80 62       	ori	r24, 0x20	; 32
    22a2:	8c 93       	st	X, r24
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <TIM1_voidDisableInputCaptureInterrupt>:

void TIM1_voidDisableInputCaptureInterrupt()
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_TICIE1_BIT);
    22b2:	a9 e5       	ldi	r26, 0x59	; 89
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e9 e5       	ldi	r30, 0x59	; 89
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7d       	andi	r24, 0xDF	; 223
    22be:	8c 93       	st	X, r24
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <TIM1_voidEnableOCMatchAInterrupt>:

void TIM1_voidEnableOCMatchAInterrupt()
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_OCIE1A_BIT);
    22ce:	a9 e5       	ldi	r26, 0x59	; 89
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 e5       	ldi	r30, 0x59	; 89
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 61       	ori	r24, 0x10	; 16
    22da:	8c 93       	st	X, r24
}
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <TIM1_voidDisableOCMatchAInterrupt>:

void TIM1_voidDisableOCMatchAInterrupt()
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_OCIE1A_BIT);
    22ea:	a9 e5       	ldi	r26, 0x59	; 89
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e9 e5       	ldi	r30, 0x59	; 89
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 7e       	andi	r24, 0xEF	; 239
    22f6:	8c 93       	st	X, r24
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <TIM1_voidEnableOCMatchBInterrupt>:

void TIM1_voidEnableOCMatchBInterrupt()
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_OCIE1B_BIT);
    2306:	a9 e5       	ldi	r26, 0x59	; 89
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e5       	ldi	r30, 0x59	; 89
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	88 60       	ori	r24, 0x08	; 8
    2312:	8c 93       	st	X, r24
}
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <TIM1_voidDisableOCMatchBInterrupt>:

void TIM1_voidDisableOCMatchBInterrupt()
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_OCIE1B_BIT);
    2322:	a9 e5       	ldi	r26, 0x59	; 89
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e9 e5       	ldi	r30, 0x59	; 89
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	87 7f       	andi	r24, 0xF7	; 247
    232e:	8c 93       	st	X, r24
}
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <TIM1_voidEnableOverFlowInterrupt>:

void TIM1_voidEnableOverFlowInterrupt()
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_TOIE1_BIT);
    233e:	a9 e5       	ldi	r26, 0x59	; 89
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e9 e5       	ldi	r30, 0x59	; 89
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	84 60       	ori	r24, 0x04	; 4
    234a:	8c 93       	st	X, r24
}
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <TIM1_voidDisableOverFlowInterrupt>:

void TIM1_voidDisableOverFlowInterrupt()
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM1_u8_TIMSK_REG,TIM1_u8_TOIE1_BIT);
    235a:	a9 e5       	ldi	r26, 0x59	; 89
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e9 e5       	ldi	r30, 0x59	; 89
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	8b 7f       	andi	r24, 0xFB	; 251
    2366:	8c 93       	st	X, r24
}
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <TIM1_voidSetInputCaptureCallBack>:

void TIM1_voidSetInputCaptureCallBack(void (*pf)(void))
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <TIM1_voidSetInputCaptureCallBack+0x6>
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pu8_InputCapture_Interrupt = pf;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	90 93 e3 01 	sts	0x01E3, r25
    2384:	80 93 e2 01 	sts	0x01E2, r24
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <TIM1_voidSetOCMatchACallBack>:

void TIM1_voidSetOCMatchACallBack(void (*pf)(void))
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <TIM1_voidSetOCMatchACallBack+0x6>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pu8_CompareMatchA_Interrupt = pf;
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	90 93 df 01 	sts	0x01DF, r25
    23a8:	80 93 de 01 	sts	0x01DE, r24
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <TIM1_voidSetOCMatchBCallBack>:

void TIM1_voidSetOCMatchBCallBack(void (*pf)(void))
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <TIM1_voidSetOCMatchBCallBack+0x6>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pu8_CompareMatchB_Interrupt = pf;
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	90 93 e1 01 	sts	0x01E1, r25
    23cc:	80 93 e0 01 	sts	0x01E0, r24
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <TIM1_voidSetOverFlowCallBack>:

void TIM1_voidSetOverFlowCallBack(void (*pf)(void))
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <TIM1_voidSetOverFlowCallBack+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pu8_OverFlow_Interrupt = pf;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	90 93 dd 01 	sts	0x01DD, r25
    23f0:	80 93 dc 01 	sts	0x01DC, r24
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pu8_InputCapture_Interrupt != NULL)
    2428:	80 91 e2 01 	lds	r24, 0x01E2
    242c:	90 91 e3 01 	lds	r25, 0x01E3
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	29 f0       	breq	.+10     	; 0x243e <__vector_6+0x40>
	{
		TIM1_pu8_InputCapture_Interrupt();
    2434:	e0 91 e2 01 	lds	r30, 0x01E2
    2438:	f0 91 e3 01 	lds	r31, 0x01E3
    243c:	09 95       	icall
	}
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	ff 91       	pop	r31
    2444:	ef 91       	pop	r30
    2446:	bf 91       	pop	r27
    2448:	af 91       	pop	r26
    244a:	9f 91       	pop	r25
    244c:	8f 91       	pop	r24
    244e:	7f 91       	pop	r23
    2450:	6f 91       	pop	r22
    2452:	5f 91       	pop	r21
    2454:	4f 91       	pop	r20
    2456:	3f 91       	pop	r19
    2458:	2f 91       	pop	r18
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f 90       	pop	r0
    2460:	1f 90       	pop	r1
    2462:	18 95       	reti

00002464 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	ef 93       	push	r30
    2484:	ff 93       	push	r31
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pu8_CompareMatchA_Interrupt != NULL)
    248e:	80 91 de 01 	lds	r24, 0x01DE
    2492:	90 91 df 01 	lds	r25, 0x01DF
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	29 f0       	breq	.+10     	; 0x24a4 <__vector_7+0x40>
	{
		TIM1_pu8_CompareMatchA_Interrupt();
    249a:	e0 91 de 01 	lds	r30, 0x01DE
    249e:	f0 91 df 01 	lds	r31, 0x01DF
    24a2:	09 95       	icall
	}
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	7f 91       	pop	r23
    24b6:	6f 91       	pop	r22
    24b8:	5f 91       	pop	r21
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	0f 92       	push	r0
    24d2:	11 24       	eor	r1, r1
    24d4:	2f 93       	push	r18
    24d6:	3f 93       	push	r19
    24d8:	4f 93       	push	r20
    24da:	5f 93       	push	r21
    24dc:	6f 93       	push	r22
    24de:	7f 93       	push	r23
    24e0:	8f 93       	push	r24
    24e2:	9f 93       	push	r25
    24e4:	af 93       	push	r26
    24e6:	bf 93       	push	r27
    24e8:	ef 93       	push	r30
    24ea:	ff 93       	push	r31
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pu8_CompareMatchB_Interrupt != NULL)
    24f4:	80 91 e0 01 	lds	r24, 0x01E0
    24f8:	90 91 e1 01 	lds	r25, 0x01E1
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	29 f0       	breq	.+10     	; 0x250a <__vector_8+0x40>
	{
		TIM1_pu8_CompareMatchB_Interrupt();
    2500:	e0 91 e0 01 	lds	r30, 0x01E0
    2504:	f0 91 e1 01 	lds	r31, 0x01E1
    2508:	09 95       	icall
	}
}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	ff 91       	pop	r31
    2510:	ef 91       	pop	r30
    2512:	bf 91       	pop	r27
    2514:	af 91       	pop	r26
    2516:	9f 91       	pop	r25
    2518:	8f 91       	pop	r24
    251a:	7f 91       	pop	r23
    251c:	6f 91       	pop	r22
    251e:	5f 91       	pop	r21
    2520:	4f 91       	pop	r20
    2522:	3f 91       	pop	r19
    2524:	2f 91       	pop	r18
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti

00002530 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	if(TIM1_pu8_OverFlow_Interrupt != NULL)
    255a:	80 91 dc 01 	lds	r24, 0x01DC
    255e:	90 91 dd 01 	lds	r25, 0x01DD
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	29 f0       	breq	.+10     	; 0x2570 <__vector_9+0x40>
	{
		TIM1_pu8_OverFlow_Interrupt();
    2566:	e0 91 dc 01 	lds	r30, 0x01DC
    256a:	f0 91 dd 01 	lds	r31, 0x01DD
    256e:	09 95       	icall
	}
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	ff 91       	pop	r31
    2576:	ef 91       	pop	r30
    2578:	bf 91       	pop	r27
    257a:	af 91       	pop	r26
    257c:	9f 91       	pop	r25
    257e:	8f 91       	pop	r24
    2580:	7f 91       	pop	r23
    2582:	6f 91       	pop	r22
    2584:	5f 91       	pop	r21
    2586:	4f 91       	pop	r20
    2588:	3f 91       	pop	r19
    258a:	2f 91       	pop	r18
    258c:	0f 90       	pop	r0
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	0f 90       	pop	r0
    2592:	1f 90       	pop	r1
    2594:	18 95       	reti

00002596 <TIM2_voidPWMInit>:
static void (*TIM2_pu8_OverFlow_Interrupt)(void) = NULL;
static void (*TIM2_pu8_CompareMatch_Interrupt)(void) = NULL;


void TIM2_voidPWMInit()
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	//set clock(prescalar)
	TIM2_voidSetPrescaler(TIM2_u8_INITIAL_PWM_CLK);
    259e:	84 e0       	ldi	r24, 0x04	; 4
    25a0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <TIM2_voidSetPrescaler>
	//set mode
	TIM2_voidSetWaveFormGenMode(TIM2_u8_INTIIAL_PWM_MODE);
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <TIM2_voidSetWaveFormGenMode>

	//setting the CO2 pin
	DIO_u8SetPinDirection(TIM2_u8_PORT,TIM2_u8_OC2_PIN,DIO_u8_OUTPUT);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	67 e0       	ldi	r22, 0x07	; 7
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <TIM2_voidInit>:

void TIM2_voidInit()
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
	//set clock(prescalar)
	TIM0_voidSetPrescaler(TIM2_u8_INITIAL_CLK);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TIM0_voidSetPrescaler>
	//set mode
	TIM0_voidSetWaveFormGenMode(TIM2_u8_INITIAL_MODE);
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <TIM0_voidSetWaveFormGenMode>

}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <TIM2_voidSetWaveFormGenMode>:

void TIM2_voidSetWaveFormGenMode(u8 TIM2_u8_Mode)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	00 d0       	rcall	.+0      	; 0x25da <TIM2_voidSetWaveFormGenMode+0x6>
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	89 83       	std	Y+1, r24	; 0x01
	switch(TIM2_u8_Mode)
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	3b 83       	std	Y+3, r19	; 0x03
    25ea:	2a 83       	std	Y+2, r18	; 0x02
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	21 f1       	breq	.+72     	; 0x263e <TIM2_voidSetWaveFormGenMode+0x6a>
    25f6:	2a 81       	ldd	r18, Y+2	; 0x02
    25f8:	3b 81       	ldd	r19, Y+3	; 0x03
    25fa:	22 30       	cpi	r18, 0x02	; 2
    25fc:	31 05       	cpc	r19, r1
    25fe:	2c f4       	brge	.+10     	; 0x260a <TIM2_voidSetWaveFormGenMode+0x36>
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	61 f0       	breq	.+24     	; 0x2620 <TIM2_voidSetWaveFormGenMode+0x4c>
    2608:	46 c0       	rjmp	.+140    	; 0x2696 <TIM2_voidSetWaveFormGenMode+0xc2>
    260a:	2a 81       	ldd	r18, Y+2	; 0x02
    260c:	3b 81       	ldd	r19, Y+3	; 0x03
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	21 f1       	breq	.+72     	; 0x265c <TIM2_voidSetWaveFormGenMode+0x88>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	91 05       	cpc	r25, r1
    261c:	71 f1       	breq	.+92     	; 0x267a <TIM2_voidSetWaveFormGenMode+0xa6>
    261e:	3b c0       	rjmp	.+118    	; 0x2696 <TIM2_voidSetWaveFormGenMode+0xc2>
	{
	case TIM2_u8_NORMAL:
		CLR_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM20_BIT);
    2620:	a5 e4       	ldi	r26, 0x45	; 69
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e5 e4       	ldi	r30, 0x45	; 69
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	8f 7b       	andi	r24, 0xBF	; 191
    262c:	8c 93       	st	X, r24
		CLR_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM21_BIT);
    262e:	a5 e4       	ldi	r26, 0x45	; 69
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e5 e4       	ldi	r30, 0x45	; 69
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	87 7f       	andi	r24, 0xF7	; 247
    263a:	8c 93       	st	X, r24
    263c:	2c c0       	rjmp	.+88     	; 0x2696 <TIM2_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM2_u8_PWM_PHASE_CORRECT:
		SET_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM20_BIT);
    263e:	a5 e4       	ldi	r26, 0x45	; 69
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e4       	ldi	r30, 0x45	; 69
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	80 64       	ori	r24, 0x40	; 64
    264a:	8c 93       	st	X, r24
		CLR_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM21_BIT);
    264c:	a5 e4       	ldi	r26, 0x45	; 69
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e5 e4       	ldi	r30, 0x45	; 69
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	87 7f       	andi	r24, 0xF7	; 247
    2658:	8c 93       	st	X, r24
    265a:	1d c0       	rjmp	.+58     	; 0x2696 <TIM2_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM2_u8_CTC:
		CLR_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM20_BIT);
    265c:	a5 e4       	ldi	r26, 0x45	; 69
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e5 e4       	ldi	r30, 0x45	; 69
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	8f 7b       	andi	r24, 0xBF	; 191
    2668:	8c 93       	st	X, r24
		SET_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM21_BIT);
    266a:	a5 e4       	ldi	r26, 0x45	; 69
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e5 e4       	ldi	r30, 0x45	; 69
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	88 60       	ori	r24, 0x08	; 8
    2676:	8c 93       	st	X, r24
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <TIM2_voidSetWaveFormGenMode+0xc2>
		break;
	case TIM2_u8_FAST_PWM:
		SET_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM20_BIT);
    267a:	a5 e4       	ldi	r26, 0x45	; 69
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e5 e4       	ldi	r30, 0x45	; 69
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	80 64       	ori	r24, 0x40	; 64
    2686:	8c 93       	st	X, r24
		SET_BIT(TIM2_u8_TCCR2_REG,TIM2_u8_WGM21_BIT);
    2688:	a5 e4       	ldi	r26, 0x45	; 69
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e5 e4       	ldi	r30, 0x45	; 69
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	88 60       	ori	r24, 0x08	; 8
    2694:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <TIM2_voidSetOCR2>:

void TIM2_voidSetOCR2(u8 TIM2_u8_OCR_Value)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	0f 92       	push	r0
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	89 83       	std	Y+1, r24	; 0x01
	TIM2_u8_OCR2_REG = TIM2_u8_OCR_Value;
    26ae:	e3 e4       	ldi	r30, 0x43	; 67
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 83       	st	Z, r24
}
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <TIM2_voidSetOutputCompareMode>:

void TIM2_voidSetOutputCompareMode(u8 TIM2_u8_OC_Mode)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	89 83       	std	Y+1, r24	; 0x01
	TIM2_u8_TCCR2_REG = ((TIM2_u8_TCCR2_REG & TIM2_u8_COM_MASK) | (TIM2_u8_OC_Mode << 4));
    26ca:	a5 e4       	ldi	r26, 0x45	; 69
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e5 e4       	ldi	r30, 0x45	; 69
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	28 2f       	mov	r18, r24
    26d6:	2f 7c       	andi	r18, 0xCF	; 207
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	82 95       	swap	r24
    26e0:	92 95       	swap	r25
    26e2:	90 7f       	andi	r25, 0xF0	; 240
    26e4:	98 27       	eor	r25, r24
    26e6:	80 7f       	andi	r24, 0xF0	; 240
    26e8:	98 27       	eor	r25, r24
    26ea:	82 2b       	or	r24, r18
    26ec:	8c 93       	st	X, r24
}
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <TIM2_voidSetPrescaler>:

void TIM2_voidSetPrescaler(u8 TIM2_u8_Clk_Source)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	0f 92       	push	r0
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	89 83       	std	Y+1, r24	; 0x01
	TIM2_u8_TCCR2_REG = ((TIM2_u8_TCCR2_REG & TIM2_u8_CLK_PRESCALER_MASK) | TIM2_u8_Clk_Source);
    2702:	a5 e4       	ldi	r26, 0x45	; 69
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e5 e4       	ldi	r30, 0x45	; 69
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	98 2f       	mov	r25, r24
    270e:	98 7f       	andi	r25, 0xF8	; 248
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	89 2b       	or	r24, r25
    2714:	8c 93       	st	X, r24
}
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <TIM2_voidSetTCNT2Val>:

void TIM2_voidSetTCNT2Val(u8 TCNT2_Val)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	0f 92       	push	r0
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	89 83       	std	Y+1, r24	; 0x01
	TIM2_u8_TCNT2_REG = TCNT2_Val;
    272a:	e4 e4       	ldi	r30, 0x44	; 68
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	80 83       	st	Z, r24
}
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <TIM2_u8GetTCNT2Val>:

u8 TIM2_u8GetTCNT2Val()
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	return TIM2_u8_TCNT2_REG;
    2742:	e4 e4       	ldi	r30, 0x44	; 68
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <TIM2_voidEnableOverFlowInterrupt>:

void TIM2_voidEnableOverFlowInterrupt()
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM2_u8_TIMSK_REG,TIM2_u8_TOIE2_BIT);
    2756:	a9 e5       	ldi	r26, 0x59	; 89
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e9 e5       	ldi	r30, 0x59	; 89
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	80 64       	ori	r24, 0x40	; 64
    2762:	8c 93       	st	X, r24
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <TIM2_voidDisableOverFlowInterrupt>:

void TIM2_voidDisableOverFlowInterrupt()
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM2_u8_TIMSK_REG,TIM2_u8_TOIE2_BIT);
    2772:	a9 e5       	ldi	r26, 0x59	; 89
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e9 e5       	ldi	r30, 0x59	; 89
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8f 7b       	andi	r24, 0xBF	; 191
    277e:	8c 93       	st	X, r24
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TIM2_voidEnableCompareMatchInterrupt>:

void TIM2_voidEnableCompareMatchInterrupt()
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIM2_u8_TIMSK_REG,TIM2_u8_OCIE2_BIT);
    278e:	a9 e5       	ldi	r26, 0x59	; 89
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e9 e5       	ldi	r30, 0x59	; 89
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	80 68       	ori	r24, 0x80	; 128
    279a:	8c 93       	st	X, r24
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <TIM2_voidDisableCompareMatchInterrupt>:

void TIM2_voidDisableCompareMatchInterrupt()
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIM2_u8_TIMSK_REG,TIM2_u8_OCIE2_BIT);
    27aa:	a9 e5       	ldi	r26, 0x59	; 89
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e9 e5       	ldi	r30, 0x59	; 89
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 77       	andi	r24, 0x7F	; 127
    27b6:	8c 93       	st	X, r24
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <TIM2_voidSetOverFlowCallBack>:

void TIM2_voidSetOverFlowCallBack(void (*pf)(void))
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <TIM2_voidSetOverFlowCallBack+0x6>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pu8_OverFlow_Interrupt = pf;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	90 93 e5 01 	sts	0x01E5, r25
    27d4:	80 93 e4 01 	sts	0x01E4, r24
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <TIM2_voidSetCompareMatchCallBack>:

void TIM2_voidSetCompareMatchCallBack(void (*pf)(void))
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <TIM2_voidSetCompareMatchCallBack+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pu8_CompareMatch_Interrupt = pf;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	90 93 e7 01 	sts	0x01E7, r25
    27f8:	80 93 e6 01 	sts	0x01E6, r24
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <__vector_4>:

void __vector_4(void) 	__attribute__((signal));
void __vector_4(void)
{
    2806:	1f 92       	push	r1
    2808:	0f 92       	push	r0
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	0f 92       	push	r0
    280e:	11 24       	eor	r1, r1
    2810:	2f 93       	push	r18
    2812:	3f 93       	push	r19
    2814:	4f 93       	push	r20
    2816:	5f 93       	push	r21
    2818:	6f 93       	push	r22
    281a:	7f 93       	push	r23
    281c:	8f 93       	push	r24
    281e:	9f 93       	push	r25
    2820:	af 93       	push	r26
    2822:	bf 93       	push	r27
    2824:	ef 93       	push	r30
    2826:	ff 93       	push	r31
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
	if(TIM2_pu8_CompareMatch_Interrupt == NULL){return;}
    2830:	80 91 e6 01 	lds	r24, 0x01E6
    2834:	90 91 e7 01 	lds	r25, 0x01E7
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	29 f0       	breq	.+10     	; 0x2846 <__vector_4+0x40>
	TIM2_pu8_CompareMatch_Interrupt();
    283c:	e0 91 e6 01 	lds	r30, 0x01E6
    2840:	f0 91 e7 01 	lds	r31, 0x01E7
    2844:	09 95       	icall
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	ff 91       	pop	r31
    284c:	ef 91       	pop	r30
    284e:	bf 91       	pop	r27
    2850:	af 91       	pop	r26
    2852:	9f 91       	pop	r25
    2854:	8f 91       	pop	r24
    2856:	7f 91       	pop	r23
    2858:	6f 91       	pop	r22
    285a:	5f 91       	pop	r21
    285c:	4f 91       	pop	r20
    285e:	3f 91       	pop	r19
    2860:	2f 91       	pop	r18
    2862:	0f 90       	pop	r0
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	0f 90       	pop	r0
    2868:	1f 90       	pop	r1
    286a:	18 95       	reti

0000286c <__vector_5>:

void __vector_5(void)	__attribute__((signal));
void __vector_5(void)
{
    286c:	1f 92       	push	r1
    286e:	0f 92       	push	r0
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	0f 92       	push	r0
    2874:	11 24       	eor	r1, r1
    2876:	2f 93       	push	r18
    2878:	3f 93       	push	r19
    287a:	4f 93       	push	r20
    287c:	5f 93       	push	r21
    287e:	6f 93       	push	r22
    2880:	7f 93       	push	r23
    2882:	8f 93       	push	r24
    2884:	9f 93       	push	r25
    2886:	af 93       	push	r26
    2888:	bf 93       	push	r27
    288a:	ef 93       	push	r30
    288c:	ff 93       	push	r31
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	if(TIM2_pu8_OverFlow_Interrupt == NULL){return;}
    2896:	80 91 e4 01 	lds	r24, 0x01E4
    289a:	90 91 e5 01 	lds	r25, 0x01E5
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	29 f0       	breq	.+10     	; 0x28ac <__vector_5+0x40>
	TIM2_pu8_OverFlow_Interrupt();
    28a2:	e0 91 e4 01 	lds	r30, 0x01E4
    28a6:	f0 91 e5 01 	lds	r31, 0x01E5
    28aa:	09 95       	icall
}
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	ff 91       	pop	r31
    28b2:	ef 91       	pop	r30
    28b4:	bf 91       	pop	r27
    28b6:	af 91       	pop	r26
    28b8:	9f 91       	pop	r25
    28ba:	8f 91       	pop	r24
    28bc:	7f 91       	pop	r23
    28be:	6f 91       	pop	r22
    28c0:	5f 91       	pop	r21
    28c2:	4f 91       	pop	r20
    28c4:	3f 91       	pop	r19
    28c6:	2f 91       	pop	r18
    28c8:	0f 90       	pop	r0
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	0f 90       	pop	r0
    28ce:	1f 90       	pop	r1
    28d0:	18 95       	reti

000028d2 <SPI_VOID_INIT>:
#include "SPI_private.h"
#include "SPI_interface.h"


void SPI_VOID_INIT(mode_t COPY_MODE)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	0f 92       	push	r0
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	89 83       	std	Y+1, r24	; 0x01
	// Master or slave selection
		if (COPY_MODE == MASTER)
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	e1 f4       	brne	.+56     	; 0x291c <SPI_VOID_INIT+0x4a>
		{
			SET_BIT(SPCR,SPCR_MSTR);
    28e4:	ad e2       	ldi	r26, 0x2D	; 45
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ed e2       	ldi	r30, 0x2D	; 45
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	80 61       	ori	r24, 0x10	; 16
    28f0:	8c 93       	st	X, r24
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN4,DIO_u8_OUTPUT);
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	64 e0       	ldi	r22, 0x04	; 4
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_OUTPUT);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	65 e0       	ldi	r22, 0x05	; 5
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN7,DIO_u8_OUTPUT);
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN6,DIO_u8_INPUT);
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	66 e0       	ldi	r22, 0x06	; 6
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
    291a:	1b c0       	rjmp	.+54     	; 0x2952 <SPI_VOID_INIT+0x80>
//			DIO_PIN_INIT(DIO_PORTB,7,DIO_PIN_MODE_OUTPUT);
//			DIO_PIN_INIT(DIO_PORTB,6,DIO_PIN_MODE_INPUT_PU);
		}
		else
		{
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_INPUT);
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	65 e0       	ldi	r22, 0x05	; 5
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN6,DIO_u8_OUTPUT);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	66 e0       	ldi	r22, 0x06	; 6
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN7,DIO_u8_INPUT);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	67 e0       	ldi	r22, 0x07	; 7
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
			DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN4,DIO_u8_INPUT);
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	64 e0       	ldi	r22, 0x04	; 4
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

//			DIO_PIN_INIT(DIO_PORTB,5,DIO_PIN_MODE_INPUT_PU);
//			DIO_PIN_INIT(DIO_PORTB,6,DIO_PIN_MODE_OUTPUT);
//			DIO_PIN_INIT(DIO_PORTB,7,DIO_PIN_MODE_INPUT_PU);
//			DIO_PIN_INIT(DIO_PORTB,4,DIO_PIN_MODE_INPUT_PU);
			CLR_BIT(SPCR,SPCR_MSTR);
    2944:	ad e2       	ldi	r26, 0x2D	; 45
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	ed e2       	ldi	r30, 0x2D	; 45
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	8f 7e       	andi	r24, 0xEF	; 239
    2950:	8c 93       	st	X, r24

		}
	//ENABLE SPLI
	SET_BIT(SPCR,SPCR_SPE);
    2952:	ad e2       	ldi	r26, 0x2D	; 45
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ed e2       	ldi	r30, 0x2D	; 45
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	80 64       	ori	r24, 0x40	; 64
    295e:	8c 93       	st	X, r24
	//DATA ORDER (LSB Transmitted first)
	SET_BIT(SPCR,SPCR_DORD);
    2960:	ad e2       	ldi	r26, 0x2D	; 45
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ed e2       	ldi	r30, 0x2D	; 45
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	80 62       	ori	r24, 0x20	; 32
    296c:	8c 93       	st	X, r24


	// MODE 1

	CLR_BIT(SPCR,SPCR_CPOL);
    296e:	ad e2       	ldi	r26, 0x2D	; 45
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ed e2       	ldi	r30, 0x2D	; 45
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	87 7f       	andi	r24, 0xF7	; 247
    297a:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_CPHA);
    297c:	ad e2       	ldi	r26, 0x2D	; 45
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	ed e2       	ldi	r30, 0x2D	; 45
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	84 60       	ori	r24, 0x04	; 4
    2988:	8c 93       	st	X, r24

	// SET THE PRESCALLER (f/4)
	SET_BIT(SPCR,SPCR_SPR0);
    298a:	ad e2       	ldi	r26, 0x2D	; 45
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	ed e2       	ldi	r30, 0x2D	; 45
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	81 60       	ori	r24, 0x01	; 1
    2996:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    2998:	ad e2       	ldi	r26, 0x2D	; 45
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	ed e2       	ldi	r30, 0x2D	; 45
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	8d 7f       	andi	r24, 0xFD	; 253
    29a4:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    29a6:	ae e2       	ldi	r26, 0x2E	; 46
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ee e2       	ldi	r30, 0x2E	; 46
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8e 7f       	andi	r24, 0xFE	; 254
    29b2:	8c 93       	st	X, r24




}
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <SPI_TransRecieve>:
u8 SPI_TransRecieve(u8 COPY_U8_DATA)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	0f 92       	push	r0
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	89 83       	std	Y+1, r24	; 0x01
	SPDR = COPY_U8_DATA;
    29c8:	ef e2       	ldi	r30, 0x2F	; 47
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,7));
    29d0:	ee e2       	ldi	r30, 0x2E	; 46
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	dc f7       	brge	.-10     	; 0x29d0 <SPI_TransRecieve+0x14>
	return SPDR;
    29da:	ef e2       	ldi	r30, 0x2F	; 47
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
}
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <SPI_u8IsTransferComplete>:
u8 SPI_u8IsTransferComplete(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	0f 92       	push	r0
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    return (SPSR & (1 << SPSR_SPIF)) ? 1 : 0;
    29f2:	ee e2       	ldi	r30, 0x2E	; 46
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	88 23       	and	r24, r24
    29fc:	14 f4       	brge	.+4      	; 0x2a02 <SPI_u8IsTransferComplete+0x1a>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <PWR_voidInit>:
#include "PWR_private.h"
#include "PWR_config.h"


void PWR_voidInit()
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	PWR_voidSetPowerMode(PWR_u8_INITIAL_MODE);
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <PWR_voidSetPowerMode>

	SET_BIT(PWR_u8_MCUCR_REG,PWR_u8_MCUCR_SE);
    2a1a:	a5 e5       	ldi	r26, 0x55	; 85
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e5 e5       	ldi	r30, 0x55	; 85
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	80 68       	ori	r24, 0x80	; 128
    2a26:	8c 93       	st	X, r24
}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <PWR_voidSetPowerMode>:


void PWR_voidSetPowerMode(u8 PWR_u8_Power_Mode)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
	PWR_u8_MCUCR_REG = (PWR_u8_MCUCR_REG & PWR_u8_POWER_MODE_MASK) | (PWR_u8_Power_Mode << PWR_u8_MCUCR_SM0);
    2a3a:	a5 e5       	ldi	r26, 0x55	; 85
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e5 e5       	ldi	r30, 0x55	; 85
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	28 2f       	mov	r18, r24
    2a46:	2f 78       	andi	r18, 0x8F	; 143
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	82 95       	swap	r24
    2a50:	92 95       	swap	r25
    2a52:	90 7f       	andi	r25, 0xF0	; 240
    2a54:	98 27       	eor	r25, r24
    2a56:	80 7f       	andi	r24, 0xF0	; 240
    2a58:	98 27       	eor	r25, r24
    2a5a:	82 2b       	or	r24, r18
    2a5c:	8c 93       	st	X, r24
}
    2a5e:	0f 90       	pop	r0
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <PWR_voidSleep>:

void PWR_voidSleep()
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
	asm("SLEEP");
    2a6e:	88 95       	sleep
}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <GPI_voidInit>:
#include "GPI_interface.h"
#include "GPI_private.h"
#include "GPI_config.h"

void GPI_voidInit()
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	switch(GPI_u8_INITIAL_STATE)
	{
	case GPI_u8_ENABLE:
		GPI_voidEnable();
    2a7e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <GPI_voidEnable>
		break;
	case GPI_u8_DISABLE:
		GPI_voidDisable();
		break;
	}
}
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <GPI_voidEnable>:


void GPI_voidEnable()
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GPI_u8_SREG_REG,GPI_u8_INTERRUPT_ENABLE_BIT);
    2a90:	af e5       	ldi	r26, 0x5F	; 95
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ef e5       	ldi	r30, 0x5F	; 95
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	80 68       	ori	r24, 0x80	; 128
    2a9c:	8c 93       	st	X, r24
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <GPI_voidDisable>:


void GPI_voidDisable()
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GPI_u8_SREG_REG,GPI_u8_INTERRUPT_ENABLE_BIT);
    2aac:	af e5       	ldi	r26, 0x5F	; 95
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	ef e5       	ldi	r30, 0x5F	; 95
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8f 77       	andi	r24, 0x7F	; 127
    2ab8:	8c 93       	st	X, r24
}
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <EXTI_voidEXTIEnable>:
static void (*pf[3])(void) = {NULL,NULL,NULL};



void EXTI_voidEXTIEnable(u8 Copy_u8EXTINo, u8 Copy_u8EXTISense)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	2a 97       	sbiw	r28, 0x0a	; 10
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTINo)
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	3a 87       	std	Y+10, r19	; 0x0a
    2ae0:	29 87       	std	Y+9, r18	; 0x09
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	81 30       	cpi	r24, 0x01	; 1
    2ae8:	91 05       	cpc	r25, r1
    2aea:	09 f4       	brne	.+2      	; 0x2aee <EXTI_voidEXTIEnable+0x2e>
    2aec:	77 c0       	rjmp	.+238    	; 0x2bdc <EXTI_voidEXTIEnable+0x11c>
    2aee:	29 85       	ldd	r18, Y+9	; 0x09
    2af0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	09 f4       	brne	.+2      	; 0x2afa <EXTI_voidEXTIEnable+0x3a>
    2af8:	dd c0       	rjmp	.+442    	; 0x2cb4 <EXTI_voidEXTIEnable+0x1f4>
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <EXTI_voidEXTIEnable+0x44>
    2b02:	08 c1       	rjmp	.+528    	; 0x2d14 <EXTI_voidEXTIEnable+0x254>
	{
	case EXTI_u8_EXTI0:
		DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_INPUT);
    2b04:	83 e0       	ldi	r24, 0x03	; 3
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_HIGH);
    2b0e:	83 e0       	ldi	r24, 0x03	; 3
    2b10:	62 e0       	ldi	r22, 0x02	; 2
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		switch(Copy_u8EXTISense)
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	38 87       	std	Y+8, r19	; 0x08
    2b20:	2f 83       	std	Y+7, r18	; 0x07
    2b22:	8f 81       	ldd	r24, Y+7	; 0x07
    2b24:	98 85       	ldd	r25, Y+8	; 0x08
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	91 05       	cpc	r25, r1
    2b2a:	21 f1       	breq	.+72     	; 0x2b74 <EXTI_voidEXTIEnable+0xb4>
    2b2c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b2e:	38 85       	ldd	r19, Y+8	; 0x08
    2b30:	22 30       	cpi	r18, 0x02	; 2
    2b32:	31 05       	cpc	r19, r1
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <EXTI_voidEXTIEnable+0x80>
    2b36:	8f 81       	ldd	r24, Y+7	; 0x07
    2b38:	98 85       	ldd	r25, Y+8	; 0x08
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <EXTI_voidEXTIEnable+0x96>
    2b3e:	46 c0       	rjmp	.+140    	; 0x2bcc <EXTI_voidEXTIEnable+0x10c>
    2b40:	2f 81       	ldd	r18, Y+7	; 0x07
    2b42:	38 85       	ldd	r19, Y+8	; 0x08
    2b44:	22 30       	cpi	r18, 0x02	; 2
    2b46:	31 05       	cpc	r19, r1
    2b48:	21 f1       	breq	.+72     	; 0x2b92 <EXTI_voidEXTIEnable+0xd2>
    2b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4c:	98 85       	ldd	r25, Y+8	; 0x08
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	91 05       	cpc	r25, r1
    2b52:	71 f1       	breq	.+92     	; 0x2bb0 <EXTI_voidEXTIEnable+0xf0>
    2b54:	3b c0       	rjmp	.+118    	; 0x2bcc <EXTI_voidEXTIEnable+0x10c>
		{
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC00);
    2b56:	a5 e5       	ldi	r26, 0x55	; 85
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e5 e5       	ldi	r30, 0x55	; 85
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8e 7f       	andi	r24, 0xFE	; 254
    2b62:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC01);
    2b64:	a5 e5       	ldi	r26, 0x55	; 85
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e5       	ldi	r30, 0x55	; 85
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8d 7f       	andi	r24, 0xFD	; 253
    2b70:	8c 93       	st	X, r24
    2b72:	2c c0       	rjmp	.+88     	; 0x2bcc <EXTI_voidEXTIEnable+0x10c>
			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC00);
    2b74:	a5 e5       	ldi	r26, 0x55	; 85
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e5 e5       	ldi	r30, 0x55	; 85
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	81 60       	ori	r24, 0x01	; 1
    2b80:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC01);
    2b82:	a5 e5       	ldi	r26, 0x55	; 85
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e5 e5       	ldi	r30, 0x55	; 85
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8d 7f       	andi	r24, 0xFD	; 253
    2b8e:	8c 93       	st	X, r24
    2b90:	1d c0       	rjmp	.+58     	; 0x2bcc <EXTI_voidEXTIEnable+0x10c>
			break;
		case EXTI_u8_FALLING_EDGE:
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC00);
    2b92:	a5 e5       	ldi	r26, 0x55	; 85
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e5 e5       	ldi	r30, 0x55	; 85
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8e 7f       	andi	r24, 0xFE	; 254
    2b9e:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC01);
    2ba0:	a5 e5       	ldi	r26, 0x55	; 85
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e5 e5       	ldi	r30, 0x55	; 85
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	82 60       	ori	r24, 0x02	; 2
    2bac:	8c 93       	st	X, r24
    2bae:	0e c0       	rjmp	.+28     	; 0x2bcc <EXTI_voidEXTIEnable+0x10c>
			break;
		case EXTI_u8_RISING_EDGE:
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC00);
    2bb0:	a5 e5       	ldi	r26, 0x55	; 85
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e5 e5       	ldi	r30, 0x55	; 85
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	81 60       	ori	r24, 0x01	; 1
    2bbc:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC01);
    2bbe:	a5 e5       	ldi	r26, 0x55	; 85
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 e5       	ldi	r30, 0x55	; 85
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	82 60       	ori	r24, 0x02	; 2
    2bca:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT0);
    2bcc:	ab e5       	ldi	r26, 0x5B	; 91
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	eb e5       	ldi	r30, 0x5B	; 91
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 64       	ori	r24, 0x40	; 64
    2bd8:	8c 93       	st	X, r24
    2bda:	9c c0       	rjmp	.+312    	; 0x2d14 <EXTI_voidEXTIEnable+0x254>
		break;
	case EXTI_u8_EXTI1:
		DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN3,DIO_u8_INPUT);
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	63 e0       	ldi	r22, 0x03	; 3
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN3,DIO_u8_HIGH);
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	63 e0       	ldi	r22, 0x03	; 3
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		switch(Copy_u8EXTISense)
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	3e 83       	std	Y+6, r19	; 0x06
    2bf8:	2d 83       	std	Y+5, r18	; 0x05
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	81 30       	cpi	r24, 0x01	; 1
    2c00:	91 05       	cpc	r25, r1
    2c02:	21 f1       	breq	.+72     	; 0x2c4c <EXTI_voidEXTIEnable+0x18c>
    2c04:	2d 81       	ldd	r18, Y+5	; 0x05
    2c06:	3e 81       	ldd	r19, Y+6	; 0x06
    2c08:	22 30       	cpi	r18, 0x02	; 2
    2c0a:	31 05       	cpc	r19, r1
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <EXTI_voidEXTIEnable+0x158>
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	61 f0       	breq	.+24     	; 0x2c2e <EXTI_voidEXTIEnable+0x16e>
    2c16:	46 c0       	rjmp	.+140    	; 0x2ca4 <EXTI_voidEXTIEnable+0x1e4>
    2c18:	2d 81       	ldd	r18, Y+5	; 0x05
    2c1a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c1c:	22 30       	cpi	r18, 0x02	; 2
    2c1e:	31 05       	cpc	r19, r1
    2c20:	21 f1       	breq	.+72     	; 0x2c6a <EXTI_voidEXTIEnable+0x1aa>
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	83 30       	cpi	r24, 0x03	; 3
    2c28:	91 05       	cpc	r25, r1
    2c2a:	71 f1       	breq	.+92     	; 0x2c88 <EXTI_voidEXTIEnable+0x1c8>
    2c2c:	3b c0       	rjmp	.+118    	; 0x2ca4 <EXTI_voidEXTIEnable+0x1e4>
		{
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC10);
    2c2e:	a5 e5       	ldi	r26, 0x55	; 85
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e5 e5       	ldi	r30, 0x55	; 85
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	8b 7f       	andi	r24, 0xFB	; 251
    2c3a:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC11);
    2c3c:	a5 e5       	ldi	r26, 0x55	; 85
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e5 e5       	ldi	r30, 0x55	; 85
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	87 7f       	andi	r24, 0xF7	; 247
    2c48:	8c 93       	st	X, r24
    2c4a:	2c c0       	rjmp	.+88     	; 0x2ca4 <EXTI_voidEXTIEnable+0x1e4>
			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC10);
    2c4c:	a5 e5       	ldi	r26, 0x55	; 85
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e5 e5       	ldi	r30, 0x55	; 85
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	84 60       	ori	r24, 0x04	; 4
    2c58:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC11);
    2c5a:	a5 e5       	ldi	r26, 0x55	; 85
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e5 e5       	ldi	r30, 0x55	; 85
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	87 7f       	andi	r24, 0xF7	; 247
    2c66:	8c 93       	st	X, r24
    2c68:	1d c0       	rjmp	.+58     	; 0x2ca4 <EXTI_voidEXTIEnable+0x1e4>
			break;
		case EXTI_u8_FALLING_EDGE:
			CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC10);
    2c6a:	a5 e5       	ldi	r26, 0x55	; 85
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e5 e5       	ldi	r30, 0x55	; 85
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8b 7f       	andi	r24, 0xFB	; 251
    2c76:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC11);
    2c78:	a5 e5       	ldi	r26, 0x55	; 85
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e5 e5       	ldi	r30, 0x55	; 85
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	88 60       	ori	r24, 0x08	; 8
    2c84:	8c 93       	st	X, r24
    2c86:	0e c0       	rjmp	.+28     	; 0x2ca4 <EXTI_voidEXTIEnable+0x1e4>
			break;
		case EXTI_u8_RISING_EDGE:
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC10);
    2c88:	a5 e5       	ldi	r26, 0x55	; 85
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e5 e5       	ldi	r30, 0x55	; 85
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	84 60       	ori	r24, 0x04	; 4
    2c94:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_MCUCR_ISC11);
    2c96:	a5 e5       	ldi	r26, 0x55	; 85
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e5 e5       	ldi	r30, 0x55	; 85
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 60       	ori	r24, 0x08	; 8
    2ca2:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT1);
    2ca4:	ab e5       	ldi	r26, 0x5B	; 91
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	eb e5       	ldi	r30, 0x5B	; 91
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	80 68       	ori	r24, 0x80	; 128
    2cb0:	8c 93       	st	X, r24
    2cb2:	30 c0       	rjmp	.+96     	; 0x2d14 <EXTI_voidEXTIEnable+0x254>
		break;
	case EXTI_u8_EXTI2:
		DIO_u8SetPinDirection(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_INPUT);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	62 e0       	ldi	r22, 0x02	; 2
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		switch(Copy_u8EXTISense)
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	3c 83       	std	Y+4, r19	; 0x04
    2cd0:	2b 83       	std	Y+3, r18	; 0x03
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	82 30       	cpi	r24, 0x02	; 2
    2cd8:	91 05       	cpc	r25, r1
    2cda:	31 f0       	breq	.+12     	; 0x2ce8 <EXTI_voidEXTIEnable+0x228>
    2cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2cde:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce0:	23 30       	cpi	r18, 0x03	; 3
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	49 f0       	breq	.+18     	; 0x2cf8 <EXTI_voidEXTIEnable+0x238>
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <EXTI_voidEXTIEnable+0x246>
		{
		case EXTI_u8_FALLING_EDGE:
			CLR_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_MCUCSR_ISC2);
    2ce8:	a4 e5       	ldi	r26, 0x54	; 84
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e4 e5       	ldi	r30, 0x54	; 84
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 7b       	andi	r24, 0xBF	; 191
    2cf4:	8c 93       	st	X, r24
    2cf6:	07 c0       	rjmp	.+14     	; 0x2d06 <EXTI_voidEXTIEnable+0x246>
			break;
		case EXTI_u8_RISING_EDGE:
			SET_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_MCUCSR_ISC2);
    2cf8:	a4 e5       	ldi	r26, 0x54	; 84
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e4 e5       	ldi	r30, 0x54	; 84
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	80 64       	ori	r24, 0x40	; 64
    2d04:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT2);
    2d06:	ab e5       	ldi	r26, 0x5B	; 91
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	eb e5       	ldi	r30, 0x5B	; 91
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 62       	ori	r24, 0x20	; 32
    2d12:	8c 93       	st	X, r24
		break;
	}
}
    2d14:	2a 96       	adiw	r28, 0x0a	; 10
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <EXTI_voidEXTIDisable>:



void EXTI_voidEXTIDisable(u8 Copy_u8EXTINo)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <EXTI_voidEXTIDisable+0x6>
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTINo)
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	3b 83       	std	Y+3, r19	; 0x03
    2d3c:	2a 83       	std	Y+2, r18	; 0x02
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	91 05       	cpc	r25, r1
    2d46:	a9 f0       	breq	.+42     	; 0x2d72 <EXTI_voidEXTIDisable+0x4c>
    2d48:	2a 81       	ldd	r18, Y+2	; 0x02
    2d4a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d4c:	22 30       	cpi	r18, 0x02	; 2
    2d4e:	31 05       	cpc	r19, r1
    2d50:	e1 f0       	breq	.+56     	; 0x2d8a <EXTI_voidEXTIDisable+0x64>
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	19 f5       	brne	.+70     	; 0x2da0 <EXTI_voidEXTIDisable+0x7a>
		{
		case EXTI_u8_EXTI0:
			CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT0);
    2d5a:	ab e5       	ldi	r26, 0x5B	; 91
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	eb e5       	ldi	r30, 0x5B	; 91
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	8f 7b       	andi	r24, 0xBF	; 191
    2d66:	8c 93       	st	X, r24
			pf[EXTI_u8_EXTI0] = NULL;
    2d68:	10 92 e9 01 	sts	0x01E9, r1
    2d6c:	10 92 e8 01 	sts	0x01E8, r1
    2d70:	17 c0       	rjmp	.+46     	; 0x2da0 <EXTI_voidEXTIDisable+0x7a>
			break;
		case EXTI_u8_EXTI1:
			CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT1);
    2d72:	ab e5       	ldi	r26, 0x5B	; 91
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	eb e5       	ldi	r30, 0x5B	; 91
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	8f 77       	andi	r24, 0x7F	; 127
    2d7e:	8c 93       	st	X, r24
			pf[EXTI_u8_EXTI1] = NULL;
    2d80:	10 92 eb 01 	sts	0x01EB, r1
    2d84:	10 92 ea 01 	sts	0x01EA, r1
    2d88:	0b c0       	rjmp	.+22     	; 0x2da0 <EXTI_voidEXTIDisable+0x7a>
			break;
		case EXTI_u8_EXTI2:
			CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_GICR_INT2);
    2d8a:	ab e5       	ldi	r26, 0x5B	; 91
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	eb e5       	ldi	r30, 0x5B	; 91
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	8f 7d       	andi	r24, 0xDF	; 223
    2d96:	8c 93       	st	X, r24
			pf[EXTI_u8_EXTI2] = NULL;
    2d98:	10 92 ed 01 	sts	0x01ED, r1
    2d9c:	10 92 ec 01 	sts	0x01EC, r1
			break;
		}
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <EXTI_voidSetCallBack>:



void EXTI_voidSetCallBack( void(*Copy_PtrToFunc)(void), u8 Copy_u8EXTIIndex)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	00 d0       	rcall	.+0      	; 0x2db2 <EXTI_voidSetCallBack+0x6>
    2db2:	0f 92       	push	r0
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	6b 83       	std	Y+3, r22	; 0x03
	pf[Copy_u8EXTIIndex] = Copy_PtrToFunc;
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e8 51       	subi	r30, 0x18	; 24
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <__vector_1>:


void __vector_1(void) 	__attribute__((signal));
void __vector_1(void)
{
    2de2:	1f 92       	push	r1
    2de4:	0f 92       	push	r0
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	0f 92       	push	r0
    2dea:	11 24       	eor	r1, r1
    2dec:	2f 93       	push	r18
    2dee:	3f 93       	push	r19
    2df0:	4f 93       	push	r20
    2df2:	5f 93       	push	r21
    2df4:	6f 93       	push	r22
    2df6:	7f 93       	push	r23
    2df8:	8f 93       	push	r24
    2dfa:	9f 93       	push	r25
    2dfc:	af 93       	push	r26
    2dfe:	bf 93       	push	r27
    2e00:	ef 93       	push	r30
    2e02:	ff 93       	push	r31
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
	if(pf[EXTI_u8_EXTI0] == NULL) {return;}
    2e0c:	80 91 e8 01 	lds	r24, 0x01E8
    2e10:	90 91 e9 01 	lds	r25, 0x01E9
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	29 f0       	breq	.+10     	; 0x2e22 <__vector_1+0x40>
	pf[EXTI_u8_EXTI0]();
    2e18:	e0 91 e8 01 	lds	r30, 0x01E8
    2e1c:	f0 91 e9 01 	lds	r31, 0x01E9
    2e20:	09 95       	icall
}
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	ff 91       	pop	r31
    2e28:	ef 91       	pop	r30
    2e2a:	bf 91       	pop	r27
    2e2c:	af 91       	pop	r26
    2e2e:	9f 91       	pop	r25
    2e30:	8f 91       	pop	r24
    2e32:	7f 91       	pop	r23
    2e34:	6f 91       	pop	r22
    2e36:	5f 91       	pop	r21
    2e38:	4f 91       	pop	r20
    2e3a:	3f 91       	pop	r19
    2e3c:	2f 91       	pop	r18
    2e3e:	0f 90       	pop	r0
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	0f 90       	pop	r0
    2e44:	1f 90       	pop	r1
    2e46:	18 95       	reti

00002e48 <__vector_2>:

void __vector_2(void) 	__attribute__((signal));
void __vector_2(void)
{
    2e48:	1f 92       	push	r1
    2e4a:	0f 92       	push	r0
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	0f 92       	push	r0
    2e50:	11 24       	eor	r1, r1
    2e52:	2f 93       	push	r18
    2e54:	3f 93       	push	r19
    2e56:	4f 93       	push	r20
    2e58:	5f 93       	push	r21
    2e5a:	6f 93       	push	r22
    2e5c:	7f 93       	push	r23
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
	if(pf[EXTI_u8_EXTI1] == NULL) {return;}
    2e72:	80 91 ea 01 	lds	r24, 0x01EA
    2e76:	90 91 eb 01 	lds	r25, 0x01EB
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	29 f0       	breq	.+10     	; 0x2e88 <__vector_2+0x40>
	pf[EXTI_u8_EXTI1]();
    2e7e:	e0 91 ea 01 	lds	r30, 0x01EA
    2e82:	f0 91 eb 01 	lds	r31, 0x01EB
    2e86:	09 95       	icall
}
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	ff 91       	pop	r31
    2e8e:	ef 91       	pop	r30
    2e90:	bf 91       	pop	r27
    2e92:	af 91       	pop	r26
    2e94:	9f 91       	pop	r25
    2e96:	8f 91       	pop	r24
    2e98:	7f 91       	pop	r23
    2e9a:	6f 91       	pop	r22
    2e9c:	5f 91       	pop	r21
    2e9e:	4f 91       	pop	r20
    2ea0:	3f 91       	pop	r19
    2ea2:	2f 91       	pop	r18
    2ea4:	0f 90       	pop	r0
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	0f 90       	pop	r0
    2eaa:	1f 90       	pop	r1
    2eac:	18 95       	reti

00002eae <__vector_3>:


void __vector_3(void) 	__attribute__((signal));
void __vector_3(void)
{
    2eae:	1f 92       	push	r1
    2eb0:	0f 92       	push	r0
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	0f 92       	push	r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	2f 93       	push	r18
    2eba:	3f 93       	push	r19
    2ebc:	4f 93       	push	r20
    2ebe:	5f 93       	push	r21
    2ec0:	6f 93       	push	r22
    2ec2:	7f 93       	push	r23
    2ec4:	8f 93       	push	r24
    2ec6:	9f 93       	push	r25
    2ec8:	af 93       	push	r26
    2eca:	bf 93       	push	r27
    2ecc:	ef 93       	push	r30
    2ece:	ff 93       	push	r31
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	if(pf[EXTI_u8_EXTI2] == NULL) {return;}
    2ed8:	80 91 ec 01 	lds	r24, 0x01EC
    2edc:	90 91 ed 01 	lds	r25, 0x01ED
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	29 f0       	breq	.+10     	; 0x2eee <__vector_3+0x40>
	pf[EXTI_u8_EXTI2]();
    2ee4:	e0 91 ec 01 	lds	r30, 0x01EC
    2ee8:	f0 91 ed 01 	lds	r31, 0x01ED
    2eec:	09 95       	icall
}
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	ff 91       	pop	r31
    2ef4:	ef 91       	pop	r30
    2ef6:	bf 91       	pop	r27
    2ef8:	af 91       	pop	r26
    2efa:	9f 91       	pop	r25
    2efc:	8f 91       	pop	r24
    2efe:	7f 91       	pop	r23
    2f00:	6f 91       	pop	r22
    2f02:	5f 91       	pop	r21
    2f04:	4f 91       	pop	r20
    2f06:	3f 91       	pop	r19
    2f08:	2f 91       	pop	r18
    2f0a:	0f 90       	pop	r0
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	0f 90       	pop	r0
    2f10:	1f 90       	pop	r1
    2f12:	18 95       	reti

00002f14 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
	//ADD CODE HERE
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
    2f1c:	ea e3       	ldi	r30, 0x3A	; 58
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	10 82       	st	Z, r1
			DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION,
			DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
    2f22:	eb e3       	ldi	r30, 0x3B	; 59
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	10 82       	st	Z, r1
			DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE,
			DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
    2f28:	e7 e3       	ldi	r30, 0x37	; 55
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	10 82       	st	Z, r1
			DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION,
			DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
    2f2e:	e8 e3       	ldi	r30, 0x38	; 56
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	10 82       	st	Z, r1
			DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE,
			DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
    2f34:	e4 e3       	ldi	r30, 0x34	; 52
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	10 82       	st	Z, r1
			DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION,
			DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
    2f3a:	e5 e3       	ldi	r30, 0x35	; 53
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	10 82       	st	Z, r1
			DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,
			DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
    2f40:	e1 e3       	ldi	r30, 0x31	; 49
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	10 82       	st	Z, r1
			DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION,
			DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
    2f46:	e2 e3       	ldi	r30, 0x32	; 50
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	10 82       	st	Z, r1
			DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,
			DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);

}
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	8a 83       	std	Y+2, r24	; 0x02
    2f68:	6b 83       	std	Y+3, r22	; 0x03
    2f6a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	84 30       	cpi	r24, 0x04	; 4
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <DIO_u8SetPinDirection+0x26>
    2f76:	0c c1       	rjmp	.+536    	; 0x3190 <DIO_u8SetPinDirection+0x23e>
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	88 30       	cpi	r24, 0x08	; 8
    2f7c:	08 f0       	brcs	.+2      	; 0x2f80 <DIO_u8SetPinDirection+0x2e>
    2f7e:	08 c1       	rjmp	.+528    	; 0x3190 <DIO_u8SetPinDirection+0x23e>
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	81 30       	cpi	r24, 0x01	; 1
    2f84:	21 f0       	breq	.+8      	; 0x2f8e <DIO_u8SetPinDirection+0x3c>
    2f86:	8c 81       	ldd	r24, Y+4	; 0x04
    2f88:	88 23       	and	r24, r24
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <DIO_u8SetPinDirection+0x3c>
    2f8c:	01 c1       	rjmp	.+514    	; 0x3190 <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	3e 87       	std	Y+14, r19	; 0x0e
    2f96:	2d 87       	std	Y+13, r18	; 0x0d
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	91 05       	cpc	r25, r1
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <DIO_u8SetPinDirection+0x52>
    2fa2:	4f c0       	rjmp	.+158    	; 0x3042 <DIO_u8SetPinDirection+0xf0>
    2fa4:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fa6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	31 05       	cpc	r19, r1
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <DIO_u8SetPinDirection+0x66>
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	71 f0       	breq	.+28     	; 0x2fd2 <DIO_u8SetPinDirection+0x80>
    2fb6:	ed c0       	rjmp	.+474    	; 0x3192 <DIO_u8SetPinDirection+0x240>
    2fb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fba:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <DIO_u8SetPinDirection+0x72>
    2fc2:	77 c0       	rjmp	.+238    	; 0x30b2 <DIO_u8SetPinDirection+0x160>
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	83 30       	cpi	r24, 0x03	; 3
    2fca:	91 05       	cpc	r25, r1
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <DIO_u8SetPinDirection+0x7e>
    2fce:	a9 c0       	rjmp	.+338    	; 0x3122 <DIO_u8SetPinDirection+0x1d0>
    2fd0:	e0 c0       	rjmp	.+448    	; 0x3192 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
    2fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	3c 87       	std	Y+12, r19	; 0x0c
    2fda:	2b 87       	std	Y+11, r18	; 0x0b
    2fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fde:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	d1 f0       	breq	.+52     	; 0x3018 <DIO_u8SetPinDirection+0xc6>
    2fe4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fe6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fe8:	21 30       	cpi	r18, 0x01	; 1
    2fea:	31 05       	cpc	r19, r1
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <DIO_u8SetPinDirection+0x9e>
    2fee:	d1 c0       	rjmp	.+418    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    2ff0:	aa e3       	ldi	r26, 0x3A	; 58
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ea e3       	ldi	r30, 0x3A	; 58
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	48 2f       	mov	r20, r24
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	02 2e       	mov	r0, r18
    3008:	02 c0       	rjmp	.+4      	; 0x300e <DIO_u8SetPinDirection+0xbc>
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	0a 94       	dec	r0
    3010:	e2 f7       	brpl	.-8      	; 0x300a <DIO_u8SetPinDirection+0xb8>
    3012:	84 2b       	or	r24, r20
    3014:	8c 93       	st	X, r24
    3016:	bd c0       	rjmp	.+378    	; 0x3192 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    3018:	aa e3       	ldi	r26, 0x3A	; 58
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	ea e3       	ldi	r30, 0x3A	; 58
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	48 2f       	mov	r20, r24
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	02 2e       	mov	r0, r18
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <DIO_u8SetPinDirection+0xe4>
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	0a 94       	dec	r0
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <DIO_u8SetPinDirection+0xe0>
    303a:	80 95       	com	r24
    303c:	84 23       	and	r24, r20
    303e:	8c 93       	st	X, r24
    3040:	a8 c0       	rjmp	.+336    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	3a 87       	std	Y+10, r19	; 0x0a
    304a:	29 87       	std	Y+9, r18	; 0x09
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	d1 f0       	breq	.+52     	; 0x3088 <DIO_u8SetPinDirection+0x136>
    3054:	29 85       	ldd	r18, Y+9	; 0x09
    3056:	3a 85       	ldd	r19, Y+10	; 0x0a
    3058:	21 30       	cpi	r18, 0x01	; 1
    305a:	31 05       	cpc	r19, r1
    305c:	09 f0       	breq	.+2      	; 0x3060 <DIO_u8SetPinDirection+0x10e>
    305e:	99 c0       	rjmp	.+306    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    3060:	a7 e3       	ldi	r26, 0x37	; 55
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e7 e3       	ldi	r30, 0x37	; 55
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	48 2f       	mov	r20, r24
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	02 2e       	mov	r0, r18
    3078:	02 c0       	rjmp	.+4      	; 0x307e <DIO_u8SetPinDirection+0x12c>
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	0a 94       	dec	r0
    3080:	e2 f7       	brpl	.-8      	; 0x307a <DIO_u8SetPinDirection+0x128>
    3082:	84 2b       	or	r24, r20
    3084:	8c 93       	st	X, r24
    3086:	85 c0       	rjmp	.+266    	; 0x3192 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    3088:	a7 e3       	ldi	r26, 0x37	; 55
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e7 e3       	ldi	r30, 0x37	; 55
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	48 2f       	mov	r20, r24
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	02 2e       	mov	r0, r18
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <DIO_u8SetPinDirection+0x154>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	0a 94       	dec	r0
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <DIO_u8SetPinDirection+0x150>
    30aa:	80 95       	com	r24
    30ac:	84 23       	and	r24, r20
    30ae:	8c 93       	st	X, r24
    30b0:	70 c0       	rjmp	.+224    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
    30b2:	8c 81       	ldd	r24, Y+4	; 0x04
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	38 87       	std	Y+8, r19	; 0x08
    30ba:	2f 83       	std	Y+7, r18	; 0x07
    30bc:	8f 81       	ldd	r24, Y+7	; 0x07
    30be:	98 85       	ldd	r25, Y+8	; 0x08
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	d1 f0       	breq	.+52     	; 0x30f8 <DIO_u8SetPinDirection+0x1a6>
    30c4:	2f 81       	ldd	r18, Y+7	; 0x07
    30c6:	38 85       	ldd	r19, Y+8	; 0x08
    30c8:	21 30       	cpi	r18, 0x01	; 1
    30ca:	31 05       	cpc	r19, r1
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <DIO_u8SetPinDirection+0x17e>
    30ce:	61 c0       	rjmp	.+194    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    30d0:	a4 e3       	ldi	r26, 0x34	; 52
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e4 e3       	ldi	r30, 0x34	; 52
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	48 2f       	mov	r20, r24
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	02 2e       	mov	r0, r18
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <DIO_u8SetPinDirection+0x19c>
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	0a 94       	dec	r0
    30f0:	e2 f7       	brpl	.-8      	; 0x30ea <DIO_u8SetPinDirection+0x198>
    30f2:	84 2b       	or	r24, r20
    30f4:	8c 93       	st	X, r24
    30f6:	4d c0       	rjmp	.+154    	; 0x3192 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    30f8:	a4 e3       	ldi	r26, 0x34	; 52
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e4 e3       	ldi	r30, 0x34	; 52
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	48 2f       	mov	r20, r24
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	02 2e       	mov	r0, r18
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <DIO_u8SetPinDirection+0x1c4>
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	0a 94       	dec	r0
    3118:	e2 f7       	brpl	.-8      	; 0x3112 <DIO_u8SetPinDirection+0x1c0>
    311a:	80 95       	com	r24
    311c:	84 23       	and	r24, r20
    311e:	8c 93       	st	X, r24
    3120:	38 c0       	rjmp	.+112    	; 0x3192 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
    3122:	8c 81       	ldd	r24, Y+4	; 0x04
    3124:	28 2f       	mov	r18, r24
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	3e 83       	std	Y+6, r19	; 0x06
    312a:	2d 83       	std	Y+5, r18	; 0x05
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	c9 f0       	breq	.+50     	; 0x3166 <DIO_u8SetPinDirection+0x214>
    3134:	2d 81       	ldd	r18, Y+5	; 0x05
    3136:	3e 81       	ldd	r19, Y+6	; 0x06
    3138:	21 30       	cpi	r18, 0x01	; 1
    313a:	31 05       	cpc	r19, r1
    313c:	51 f5       	brne	.+84     	; 0x3192 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    313e:	a1 e3       	ldi	r26, 0x31	; 49
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e1 e3       	ldi	r30, 0x31	; 49
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	48 2f       	mov	r20, r24
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	02 2e       	mov	r0, r18
    3156:	02 c0       	rjmp	.+4      	; 0x315c <DIO_u8SetPinDirection+0x20a>
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	0a 94       	dec	r0
    315e:	e2 f7       	brpl	.-8      	; 0x3158 <DIO_u8SetPinDirection+0x206>
    3160:	84 2b       	or	r24, r20
    3162:	8c 93       	st	X, r24
    3164:	16 c0       	rjmp	.+44     	; 0x3192 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    3166:	a1 e3       	ldi	r26, 0x31	; 49
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e1 e3       	ldi	r30, 0x31	; 49
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	48 2f       	mov	r20, r24
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	02 2e       	mov	r0, r18
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <DIO_u8SetPinDirection+0x232>
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	0a 94       	dec	r0
    3186:	e2 f7       	brpl	.-8      	; 0x3180 <DIO_u8SetPinDirection+0x22e>
    3188:	80 95       	com	r24
    318a:	84 23       	and	r24, r20
    318c:	8c 93       	st	X, r24
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3190:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
}
    3194:	2e 96       	adiw	r28, 0x0e	; 14
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	2e 97       	sbiw	r28, 0x0e	; 14
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	8a 83       	std	Y+2, r24	; 0x02
    31bc:	6b 83       	std	Y+3, r22	; 0x03
    31be:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	88 30       	cpi	r24, 0x08	; 8
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <DIO_u8SetPinValue+0x26>
    31ca:	08 c1       	rjmp	.+528    	; 0x33dc <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	3e 87       	std	Y+14, r19	; 0x0e
    31d4:	2d 87       	std	Y+13, r18	; 0x0d
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	91 05       	cpc	r25, r1
    31de:	09 f4       	brne	.+2      	; 0x31e2 <DIO_u8SetPinValue+0x3c>
    31e0:	50 c0       	rjmp	.+160    	; 0x3282 <DIO_u8SetPinValue+0xdc>
    31e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    31e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    31e6:	22 30       	cpi	r18, 0x02	; 2
    31e8:	31 05       	cpc	r19, r1
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <DIO_u8SetPinValue+0x50>
    31ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	71 f0       	breq	.+28     	; 0x3210 <DIO_u8SetPinValue+0x6a>
    31f4:	f1 c0       	rjmp	.+482    	; 0x33d8 <DIO_u8SetPinValue+0x232>
    31f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31fa:	22 30       	cpi	r18, 0x02	; 2
    31fc:	31 05       	cpc	r19, r1
    31fe:	09 f4       	brne	.+2      	; 0x3202 <DIO_u8SetPinValue+0x5c>
    3200:	79 c0       	rjmp	.+242    	; 0x32f4 <DIO_u8SetPinValue+0x14e>
    3202:	8d 85       	ldd	r24, Y+13	; 0x0d
    3204:	9e 85       	ldd	r25, Y+14	; 0x0e
    3206:	83 30       	cpi	r24, 0x03	; 3
    3208:	91 05       	cpc	r25, r1
    320a:	09 f4       	brne	.+2      	; 0x320e <DIO_u8SetPinValue+0x68>
    320c:	ac c0       	rjmp	.+344    	; 0x3366 <DIO_u8SetPinValue+0x1c0>
    320e:	e4 c0       	rjmp	.+456    	; 0x33d8 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
    3210:	8c 81       	ldd	r24, Y+4	; 0x04
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	3c 87       	std	Y+12, r19	; 0x0c
    3218:	2b 87       	std	Y+11, r18	; 0x0b
    321a:	8b 85       	ldd	r24, Y+11	; 0x0b
    321c:	9c 85       	ldd	r25, Y+12	; 0x0c
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	c9 f0       	breq	.+50     	; 0x3254 <DIO_u8SetPinValue+0xae>
    3222:	2b 85       	ldd	r18, Y+11	; 0x0b
    3224:	3c 85       	ldd	r19, Y+12	; 0x0c
    3226:	21 30       	cpi	r18, 0x01	; 1
    3228:	31 05       	cpc	r19, r1
    322a:	49 f5       	brne	.+82     	; 0x327e <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    322c:	ab e3       	ldi	r26, 0x3B	; 59
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	eb e3       	ldi	r30, 0x3B	; 59
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	48 2f       	mov	r20, r24
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	28 2f       	mov	r18, r24
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	02 2e       	mov	r0, r18
    3244:	02 c0       	rjmp	.+4      	; 0x324a <DIO_u8SetPinValue+0xa4>
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	0a 94       	dec	r0
    324c:	e2 f7       	brpl	.-8      	; 0x3246 <DIO_u8SetPinValue+0xa0>
    324e:	84 2b       	or	r24, r20
    3250:	8c 93       	st	X, r24
    3252:	c5 c0       	rjmp	.+394    	; 0x33de <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    3254:	ab e3       	ldi	r26, 0x3B	; 59
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	eb e3       	ldi	r30, 0x3B	; 59
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	48 2f       	mov	r20, r24
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	02 2e       	mov	r0, r18
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <DIO_u8SetPinValue+0xcc>
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	0a 94       	dec	r0
    3274:	e2 f7       	brpl	.-8      	; 0x326e <DIO_u8SetPinValue+0xc8>
    3276:	80 95       	com	r24
    3278:	84 23       	and	r24, r20
    327a:	8c 93       	st	X, r24
    327c:	b0 c0       	rjmp	.+352    	; 0x33de <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	ae c0       	rjmp	.+348    	; 0x33de <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	3a 87       	std	Y+10, r19	; 0x0a
    328a:	29 87       	std	Y+9, r18	; 0x09
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	c9 f0       	breq	.+50     	; 0x32c6 <DIO_u8SetPinValue+0x120>
    3294:	29 85       	ldd	r18, Y+9	; 0x09
    3296:	3a 85       	ldd	r19, Y+10	; 0x0a
    3298:	21 30       	cpi	r18, 0x01	; 1
    329a:	31 05       	cpc	r19, r1
    329c:	49 f5       	brne	.+82     	; 0x32f0 <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    329e:	a8 e3       	ldi	r26, 0x38	; 56
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e8 e3       	ldi	r30, 0x38	; 56
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	48 2f       	mov	r20, r24
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	02 2e       	mov	r0, r18
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <DIO_u8SetPinValue+0x116>
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	0a 94       	dec	r0
    32be:	e2 f7       	brpl	.-8      	; 0x32b8 <DIO_u8SetPinValue+0x112>
    32c0:	84 2b       	or	r24, r20
    32c2:	8c 93       	st	X, r24
    32c4:	8c c0       	rjmp	.+280    	; 0x33de <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    32c6:	a8 e3       	ldi	r26, 0x38	; 56
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e8 e3       	ldi	r30, 0x38	; 56
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	48 2f       	mov	r20, r24
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	28 2f       	mov	r18, r24
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	02 2e       	mov	r0, r18
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <DIO_u8SetPinValue+0x13e>
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	0a 94       	dec	r0
    32e6:	e2 f7       	brpl	.-8      	; 0x32e0 <DIO_u8SetPinValue+0x13a>
    32e8:	80 95       	com	r24
    32ea:	84 23       	and	r24, r20
    32ec:	8c 93       	st	X, r24
    32ee:	77 c0       	rjmp	.+238    	; 0x33de <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    32f0:	19 82       	std	Y+1, r1	; 0x01
    32f2:	75 c0       	rjmp	.+234    	; 0x33de <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    32f4:	8c 81       	ldd	r24, Y+4	; 0x04
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	38 87       	std	Y+8, r19	; 0x08
    32fc:	2f 83       	std	Y+7, r18	; 0x07
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3300:	98 85       	ldd	r25, Y+8	; 0x08
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	c9 f0       	breq	.+50     	; 0x3338 <DIO_u8SetPinValue+0x192>
    3306:	2f 81       	ldd	r18, Y+7	; 0x07
    3308:	38 85       	ldd	r19, Y+8	; 0x08
    330a:	21 30       	cpi	r18, 0x01	; 1
    330c:	31 05       	cpc	r19, r1
    330e:	49 f5       	brne	.+82     	; 0x3362 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    3310:	a5 e3       	ldi	r26, 0x35	; 53
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	e5 e3       	ldi	r30, 0x35	; 53
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	48 2f       	mov	r20, r24
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	02 2e       	mov	r0, r18
    3328:	02 c0       	rjmp	.+4      	; 0x332e <DIO_u8SetPinValue+0x188>
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	0a 94       	dec	r0
    3330:	e2 f7       	brpl	.-8      	; 0x332a <DIO_u8SetPinValue+0x184>
    3332:	84 2b       	or	r24, r20
    3334:	8c 93       	st	X, r24
    3336:	53 c0       	rjmp	.+166    	; 0x33de <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    3338:	a5 e3       	ldi	r26, 0x35	; 53
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e5 e3       	ldi	r30, 0x35	; 53
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	48 2f       	mov	r20, r24
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	02 2e       	mov	r0, r18
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <DIO_u8SetPinValue+0x1b0>
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	0a 94       	dec	r0
    3358:	e2 f7       	brpl	.-8      	; 0x3352 <DIO_u8SetPinValue+0x1ac>
    335a:	80 95       	com	r24
    335c:	84 23       	and	r24, r20
    335e:	8c 93       	st	X, r24
    3360:	3e c0       	rjmp	.+124    	; 0x33de <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    3362:	19 82       	std	Y+1, r1	; 0x01
    3364:	3c c0       	rjmp	.+120    	; 0x33de <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    3366:	8c 81       	ldd	r24, Y+4	; 0x04
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	3e 83       	std	Y+6, r19	; 0x06
    336e:	2d 83       	std	Y+5, r18	; 0x05
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	c9 f0       	breq	.+50     	; 0x33aa <DIO_u8SetPinValue+0x204>
    3378:	2d 81       	ldd	r18, Y+5	; 0x05
    337a:	3e 81       	ldd	r19, Y+6	; 0x06
    337c:	21 30       	cpi	r18, 0x01	; 1
    337e:	31 05       	cpc	r19, r1
    3380:	49 f5       	brne	.+82     	; 0x33d4 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    3382:	a2 e3       	ldi	r26, 0x32	; 50
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e2 e3       	ldi	r30, 0x32	; 50
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	48 2f       	mov	r20, r24
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	02 2e       	mov	r0, r18
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <DIO_u8SetPinValue+0x1fa>
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	0a 94       	dec	r0
    33a2:	e2 f7       	brpl	.-8      	; 0x339c <DIO_u8SetPinValue+0x1f6>
    33a4:	84 2b       	or	r24, r20
    33a6:	8c 93       	st	X, r24
    33a8:	1a c0       	rjmp	.+52     	; 0x33de <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    33aa:	a2 e3       	ldi	r26, 0x32	; 50
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e2 e3       	ldi	r30, 0x32	; 50
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	48 2f       	mov	r20, r24
    33b6:	8b 81       	ldd	r24, Y+3	; 0x03
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	02 2e       	mov	r0, r18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <DIO_u8SetPinValue+0x222>
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	0a 94       	dec	r0
    33ca:	e2 f7       	brpl	.-8      	; 0x33c4 <DIO_u8SetPinValue+0x21e>
    33cc:	80 95       	com	r24
    33ce:	84 23       	and	r24, r20
    33d0:	8c 93       	st	X, r24
    33d2:	05 c0       	rjmp	.+10     	; 0x33de <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    33d4:	19 82       	std	Y+1, r1	; 0x01
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    33d8:	19 82       	std	Y+1, r1	; 0x01
    33da:	01 c0       	rjmp	.+2      	; 0x33de <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    33dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    33de:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e0:	2e 96       	adiw	r28, 0x0e	; 14
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <DIO_u8GetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId )
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <DIO_u8GetPinValue+0x6>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <DIO_u8GetPinValue+0x8>
    33fa:	0f 92       	push	r0
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	3d 83       	std	Y+5, r19	; 0x05
    340c:	2c 83       	std	Y+4, r18	; 0x04
    340e:	4c 81       	ldd	r20, Y+4	; 0x04
    3410:	5d 81       	ldd	r21, Y+5	; 0x05
    3412:	41 30       	cpi	r20, 0x01	; 1
    3414:	51 05       	cpc	r21, r1
    3416:	49 f1       	breq	.+82     	; 0x346a <DIO_u8GetPinValue+0x78>
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	9d 81       	ldd	r25, Y+5	; 0x05
    341c:	82 30       	cpi	r24, 0x02	; 2
    341e:	91 05       	cpc	r25, r1
    3420:	34 f4       	brge	.+12     	; 0x342e <DIO_u8GetPinValue+0x3c>
    3422:	2c 81       	ldd	r18, Y+4	; 0x04
    3424:	3d 81       	ldd	r19, Y+5	; 0x05
    3426:	21 15       	cp	r18, r1
    3428:	31 05       	cpc	r19, r1
    342a:	61 f0       	breq	.+24     	; 0x3444 <DIO_u8GetPinValue+0x52>
    342c:	57 c0       	rjmp	.+174    	; 0x34dc <DIO_u8GetPinValue+0xea>
    342e:	4c 81       	ldd	r20, Y+4	; 0x04
    3430:	5d 81       	ldd	r21, Y+5	; 0x05
    3432:	42 30       	cpi	r20, 0x02	; 2
    3434:	51 05       	cpc	r21, r1
    3436:	61 f1       	breq	.+88     	; 0x3490 <DIO_u8GetPinValue+0x9e>
    3438:	8c 81       	ldd	r24, Y+4	; 0x04
    343a:	9d 81       	ldd	r25, Y+5	; 0x05
    343c:	83 30       	cpi	r24, 0x03	; 3
    343e:	91 05       	cpc	r25, r1
    3440:	d1 f1       	breq	.+116    	; 0x34b6 <DIO_u8GetPinValue+0xc4>
    3442:	4c c0       	rjmp	.+152    	; 0x34dc <DIO_u8GetPinValue+0xea>
	{
	case DIO_u8_PORTA: return GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    3444:	e9 e3       	ldi	r30, 0x39	; 57
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	a9 01       	movw	r20, r18
    3456:	02 c0       	rjmp	.+4      	; 0x345c <DIO_u8GetPinValue+0x6a>
    3458:	55 95       	asr	r21
    345a:	47 95       	ror	r20
    345c:	8a 95       	dec	r24
    345e:	e2 f7       	brpl	.-8      	; 0x3458 <DIO_u8GetPinValue+0x66>
    3460:	ca 01       	movw	r24, r20
    3462:	58 2f       	mov	r21, r24
    3464:	51 70       	andi	r21, 0x01	; 1
    3466:	5b 83       	std	Y+3, r21	; 0x03
    3468:	3b c0       	rjmp	.+118    	; 0x34e0 <DIO_u8GetPinValue+0xee>
	case DIO_u8_PORTB: return GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    346a:	e6 e3       	ldi	r30, 0x36	; 54
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	a9 01       	movw	r20, r18
    347c:	02 c0       	rjmp	.+4      	; 0x3482 <DIO_u8GetPinValue+0x90>
    347e:	55 95       	asr	r21
    3480:	47 95       	ror	r20
    3482:	8a 95       	dec	r24
    3484:	e2 f7       	brpl	.-8      	; 0x347e <DIO_u8GetPinValue+0x8c>
    3486:	ca 01       	movw	r24, r20
    3488:	58 2f       	mov	r21, r24
    348a:	51 70       	andi	r21, 0x01	; 1
    348c:	5b 83       	std	Y+3, r21	; 0x03
    348e:	28 c0       	rjmp	.+80     	; 0x34e0 <DIO_u8GetPinValue+0xee>
	case DIO_u8_PORTC: return GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    3490:	e3 e3       	ldi	r30, 0x33	; 51
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	88 2f       	mov	r24, r24
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	a9 01       	movw	r20, r18
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <DIO_u8GetPinValue+0xb6>
    34a4:	55 95       	asr	r21
    34a6:	47 95       	ror	r20
    34a8:	8a 95       	dec	r24
    34aa:	e2 f7       	brpl	.-8      	; 0x34a4 <DIO_u8GetPinValue+0xb2>
    34ac:	ca 01       	movw	r24, r20
    34ae:	58 2f       	mov	r21, r24
    34b0:	51 70       	andi	r21, 0x01	; 1
    34b2:	5b 83       	std	Y+3, r21	; 0x03
    34b4:	15 c0       	rjmp	.+42     	; 0x34e0 <DIO_u8GetPinValue+0xee>
	case DIO_u8_PORTD: return GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    34b6:	e0 e3       	ldi	r30, 0x30	; 48
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	88 2f       	mov	r24, r24
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a9 01       	movw	r20, r18
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <DIO_u8GetPinValue+0xdc>
    34ca:	55 95       	asr	r21
    34cc:	47 95       	ror	r20
    34ce:	8a 95       	dec	r24
    34d0:	e2 f7       	brpl	.-8      	; 0x34ca <DIO_u8GetPinValue+0xd8>
    34d2:	ca 01       	movw	r24, r20
    34d4:	58 2f       	mov	r21, r24
    34d6:	51 70       	andi	r21, 0x01	; 1
    34d8:	5b 83       	std	Y+3, r21	; 0x03
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <DIO_u8GetPinValue+0xee>
	}

	return STD_TYPES_OK;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	8b 83       	std	Y+3, r24	; 0x03
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	2d 97       	sbiw	r28, 0x0d	; 13
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	8a 83       	std	Y+2, r24	; 0x02
    3508:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	81 30       	cpi	r24, 0x01	; 1
    3512:	21 f0       	breq	.+8      	; 0x351c <DIO_u8SetPortDirection+0x2a>
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	88 23       	and	r24, r24
    3518:	09 f0       	breq	.+2      	; 0x351c <DIO_u8SetPortDirection+0x2a>
    351a:	7f c0       	rjmp	.+254    	; 0x361a <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	3d 87       	std	Y+13, r19	; 0x0d
    3524:	2c 87       	std	Y+12, r18	; 0x0c
    3526:	8c 85       	ldd	r24, Y+12	; 0x0c
    3528:	9d 85       	ldd	r25, Y+13	; 0x0d
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	91 05       	cpc	r25, r1
    352e:	71 f1       	breq	.+92     	; 0x358c <DIO_u8SetPortDirection+0x9a>
    3530:	2c 85       	ldd	r18, Y+12	; 0x0c
    3532:	3d 85       	ldd	r19, Y+13	; 0x0d
    3534:	22 30       	cpi	r18, 0x02	; 2
    3536:	31 05       	cpc	r19, r1
    3538:	2c f4       	brge	.+10     	; 0x3544 <DIO_u8SetPortDirection+0x52>
    353a:	8c 85       	ldd	r24, Y+12	; 0x0c
    353c:	9d 85       	ldd	r25, Y+13	; 0x0d
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	69 f0       	breq	.+26     	; 0x355c <DIO_u8SetPortDirection+0x6a>
    3542:	69 c0       	rjmp	.+210    	; 0x3616 <DIO_u8SetPortDirection+0x124>
    3544:	2c 85       	ldd	r18, Y+12	; 0x0c
    3546:	3d 85       	ldd	r19, Y+13	; 0x0d
    3548:	22 30       	cpi	r18, 0x02	; 2
    354a:	31 05       	cpc	r19, r1
    354c:	b1 f1       	breq	.+108    	; 0x35ba <DIO_u8SetPortDirection+0xc8>
    354e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3550:	9d 85       	ldd	r25, Y+13	; 0x0d
    3552:	83 30       	cpi	r24, 0x03	; 3
    3554:	91 05       	cpc	r25, r1
    3556:	09 f4       	brne	.+2      	; 0x355a <DIO_u8SetPortDirection+0x68>
    3558:	47 c0       	rjmp	.+142    	; 0x35e8 <DIO_u8SetPortDirection+0xf6>
    355a:	5d c0       	rjmp	.+186    	; 0x3616 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	3b 87       	std	Y+11, r19	; 0x0b
    3564:	2a 87       	std	Y+10, r18	; 0x0a
    3566:	8a 85       	ldd	r24, Y+10	; 0x0a
    3568:	9b 85       	ldd	r25, Y+11	; 0x0b
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	59 f0       	breq	.+22     	; 0x3584 <DIO_u8SetPortDirection+0x92>
    356e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3570:	3b 85       	ldd	r19, Y+11	; 0x0b
    3572:	21 30       	cpi	r18, 0x01	; 1
    3574:	31 05       	cpc	r19, r1
    3576:	09 f0       	breq	.+2      	; 0x357a <DIO_u8SetPortDirection+0x88>
    3578:	51 c0       	rjmp	.+162    	; 0x361c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    357a:	ea e3       	ldi	r30, 0x3A	; 58
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	80 83       	st	Z, r24
    3582:	4c c0       	rjmp	.+152    	; 0x361c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    3584:	ea e3       	ldi	r30, 0x3A	; 58
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	10 82       	st	Z, r1
    358a:	48 c0       	rjmp	.+144    	; 0x361c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	39 87       	std	Y+9, r19	; 0x09
    3594:	28 87       	std	Y+8, r18	; 0x08
    3596:	88 85       	ldd	r24, Y+8	; 0x08
    3598:	99 85       	ldd	r25, Y+9	; 0x09
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	51 f0       	breq	.+20     	; 0x35b2 <DIO_u8SetPortDirection+0xc0>
    359e:	28 85       	ldd	r18, Y+8	; 0x08
    35a0:	39 85       	ldd	r19, Y+9	; 0x09
    35a2:	21 30       	cpi	r18, 0x01	; 1
    35a4:	31 05       	cpc	r19, r1
    35a6:	d1 f5       	brne	.+116    	; 0x361c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    35a8:	e7 e3       	ldi	r30, 0x37	; 55
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	8f ef       	ldi	r24, 0xFF	; 255
    35ae:	80 83       	st	Z, r24
    35b0:	35 c0       	rjmp	.+106    	; 0x361c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    35b2:	e7 e3       	ldi	r30, 0x37	; 55
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	10 82       	st	Z, r1
    35b8:	31 c0       	rjmp	.+98     	; 0x361c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	3f 83       	std	Y+7, r19	; 0x07
    35c2:	2e 83       	std	Y+6, r18	; 0x06
    35c4:	8e 81       	ldd	r24, Y+6	; 0x06
    35c6:	9f 81       	ldd	r25, Y+7	; 0x07
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	51 f0       	breq	.+20     	; 0x35e0 <DIO_u8SetPortDirection+0xee>
    35cc:	2e 81       	ldd	r18, Y+6	; 0x06
    35ce:	3f 81       	ldd	r19, Y+7	; 0x07
    35d0:	21 30       	cpi	r18, 0x01	; 1
    35d2:	31 05       	cpc	r19, r1
    35d4:	19 f5       	brne	.+70     	; 0x361c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    35d6:	e4 e3       	ldi	r30, 0x34	; 52
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	8f ef       	ldi	r24, 0xFF	; 255
    35dc:	80 83       	st	Z, r24
    35de:	1e c0       	rjmp	.+60     	; 0x361c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    35e0:	e4 e3       	ldi	r30, 0x34	; 52
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	10 82       	st	Z, r1
    35e6:	1a c0       	rjmp	.+52     	; 0x361c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    35e8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	3d 83       	std	Y+5, r19	; 0x05
    35f0:	2c 83       	std	Y+4, r18	; 0x04
    35f2:	8c 81       	ldd	r24, Y+4	; 0x04
    35f4:	9d 81       	ldd	r25, Y+5	; 0x05
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	51 f0       	breq	.+20     	; 0x360e <DIO_u8SetPortDirection+0x11c>
    35fa:	2c 81       	ldd	r18, Y+4	; 0x04
    35fc:	3d 81       	ldd	r19, Y+5	; 0x05
    35fe:	21 30       	cpi	r18, 0x01	; 1
    3600:	31 05       	cpc	r19, r1
    3602:	61 f4       	brne	.+24     	; 0x361c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    3604:	e1 e3       	ldi	r30, 0x31	; 49
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	8f ef       	ldi	r24, 0xFF	; 255
    360a:	80 83       	st	Z, r24
    360c:	07 c0       	rjmp	.+14     	; 0x361c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    360e:	e1 e3       	ldi	r30, 0x31	; 49
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	10 82       	st	Z, r1
    3614:	03 c0       	rjmp	.+6      	; 0x361c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    3616:	19 82       	std	Y+1, r1	; 0x01
    3618:	01 c0       	rjmp	.+2      	; 0x361c <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    361a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
}
    361e:	2d 96       	adiw	r28, 0x0d	; 13
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	00 d0       	rcall	.+0      	; 0x3636 <DIO_u8SetPortValue+0x6>
    3636:	00 d0       	rcall	.+0      	; 0x3638 <DIO_u8SetPortValue+0x8>
    3638:	0f 92       	push	r0
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	8a 83       	std	Y+2, r24	; 0x02
    3640:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	3d 83       	std	Y+5, r19	; 0x05
    364e:	2c 83       	std	Y+4, r18	; 0x04
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	91 05       	cpc	r25, r1
    3658:	d1 f0       	breq	.+52     	; 0x368e <DIO_u8SetPortValue+0x5e>
    365a:	2c 81       	ldd	r18, Y+4	; 0x04
    365c:	3d 81       	ldd	r19, Y+5	; 0x05
    365e:	22 30       	cpi	r18, 0x02	; 2
    3660:	31 05       	cpc	r19, r1
    3662:	2c f4       	brge	.+10     	; 0x366e <DIO_u8SetPortValue+0x3e>
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	9d 81       	ldd	r25, Y+5	; 0x05
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	61 f0       	breq	.+24     	; 0x3684 <DIO_u8SetPortValue+0x54>
    366c:	1f c0       	rjmp	.+62     	; 0x36ac <DIO_u8SetPortValue+0x7c>
    366e:	2c 81       	ldd	r18, Y+4	; 0x04
    3670:	3d 81       	ldd	r19, Y+5	; 0x05
    3672:	22 30       	cpi	r18, 0x02	; 2
    3674:	31 05       	cpc	r19, r1
    3676:	81 f0       	breq	.+32     	; 0x3698 <DIO_u8SetPortValue+0x68>
    3678:	8c 81       	ldd	r24, Y+4	; 0x04
    367a:	9d 81       	ldd	r25, Y+5	; 0x05
    367c:	83 30       	cpi	r24, 0x03	; 3
    367e:	91 05       	cpc	r25, r1
    3680:	81 f0       	breq	.+32     	; 0x36a2 <DIO_u8SetPortValue+0x72>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    3684:	eb e3       	ldi	r30, 0x3B	; 59
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	80 83       	st	Z, r24
    368c:	10 c0       	rjmp	.+32     	; 0x36ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    368e:	e8 e3       	ldi	r30, 0x38	; 56
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	80 83       	st	Z, r24
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    3698:	e5 e3       	ldi	r30, 0x35	; 53
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	80 83       	st	Z, r24
    36a0:	06 c0       	rjmp	.+12     	; 0x36ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    36a2:	e2 e3       	ldi	r30, 0x32	; 50
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	80 83       	st	Z, r24
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    36ac:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <DIO_u8GetPortValue+0x6>
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <DIO_u8GetPortValue+0x8>
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <DIO_u8GetPortValue+0xa>
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	8a 83       	std	Y+2, r24	; 0x02
    36d0:	7c 83       	std	Y+4, r23	; 0x04
    36d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	9c 81       	ldd	r25, Y+4	; 0x04
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	e9 f1       	breq	.+122    	; 0x375a <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	3e 83       	std	Y+6, r19	; 0x06
    36e8:	2d 83       	std	Y+5, r18	; 0x05
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	9e 81       	ldd	r25, Y+6	; 0x06
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	91 05       	cpc	r25, r1
    36f2:	e1 f0       	breq	.+56     	; 0x372c <DIO_u8GetPortValue+0x6c>
    36f4:	2d 81       	ldd	r18, Y+5	; 0x05
    36f6:	3e 81       	ldd	r19, Y+6	; 0x06
    36f8:	22 30       	cpi	r18, 0x02	; 2
    36fa:	31 05       	cpc	r19, r1
    36fc:	2c f4       	brge	.+10     	; 0x3708 <DIO_u8GetPortValue+0x48>
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	61 f0       	breq	.+24     	; 0x371e <DIO_u8GetPortValue+0x5e>
    3706:	27 c0       	rjmp	.+78     	; 0x3756 <DIO_u8GetPortValue+0x96>
    3708:	2d 81       	ldd	r18, Y+5	; 0x05
    370a:	3e 81       	ldd	r19, Y+6	; 0x06
    370c:	22 30       	cpi	r18, 0x02	; 2
    370e:	31 05       	cpc	r19, r1
    3710:	a1 f0       	breq	.+40     	; 0x373a <DIO_u8GetPortValue+0x7a>
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	9e 81       	ldd	r25, Y+6	; 0x06
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	91 05       	cpc	r25, r1
    371a:	b1 f0       	breq	.+44     	; 0x3748 <DIO_u8GetPortValue+0x88>
    371c:	1c c0       	rjmp	.+56     	; 0x3756 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    371e:	e9 e3       	ldi	r30, 0x39	; 57
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	eb 81       	ldd	r30, Y+3	; 0x03
    3726:	fc 81       	ldd	r31, Y+4	; 0x04
    3728:	80 83       	st	Z, r24
    372a:	18 c0       	rjmp	.+48     	; 0x375c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    372c:	e6 e3       	ldi	r30, 0x36	; 54
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
    3732:	eb 81       	ldd	r30, Y+3	; 0x03
    3734:	fc 81       	ldd	r31, Y+4	; 0x04
    3736:	80 83       	st	Z, r24
    3738:	11 c0       	rjmp	.+34     	; 0x375c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    373a:	e3 e3       	ldi	r30, 0x33	; 51
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	eb 81       	ldd	r30, Y+3	; 0x03
    3742:	fc 81       	ldd	r31, Y+4	; 0x04
    3744:	80 83       	st	Z, r24
    3746:	0a c0       	rjmp	.+20     	; 0x375c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    3748:	e0 e3       	ldi	r30, 0x30	; 48
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	80 81       	ld	r24, Z
    374e:	eb 81       	ldd	r30, Y+3	; 0x03
    3750:	fc 81       	ldd	r31, Y+4	; 0x04
    3752:	80 83       	st	Z, r24
    3754:	03 c0       	rjmp	.+6      	; 0x375c <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    3756:	19 82       	std	Y+1, r1	; 0x01
    3758:	01 c0       	rjmp	.+2      	; 0x375c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    375a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    375c:	89 81       	ldd	r24, Y+1	; 0x01
}
    375e:	26 96       	adiw	r28, 0x06	; 6
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <DIO_u8TogglePinValue>:

u8  DIO_u8TogglePinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <DIO_u8TogglePinValue+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <DIO_u8TogglePinValue+0x8>
    3778:	0f 92       	push	r0
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	8a 83       	std	Y+2, r24	; 0x02
    3780:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	88 30       	cpi	r24, 0x08	; 8
    378a:	08 f0       	brcs	.+2      	; 0x378e <DIO_u8TogglePinValue+0x1e>
    378c:	71 c0       	rjmp	.+226    	; 0x3870 <DIO_u8TogglePinValue+0x100>
	{
		switch (Copy_u8PortId)
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	3d 83       	std	Y+5, r19	; 0x05
    3796:	2c 83       	std	Y+4, r18	; 0x04
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	9d 81       	ldd	r25, Y+5	; 0x05
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	91 05       	cpc	r25, r1
    37a0:	49 f1       	breq	.+82     	; 0x37f4 <DIO_u8TogglePinValue+0x84>
    37a2:	2c 81       	ldd	r18, Y+4	; 0x04
    37a4:	3d 81       	ldd	r19, Y+5	; 0x05
    37a6:	22 30       	cpi	r18, 0x02	; 2
    37a8:	31 05       	cpc	r19, r1
    37aa:	2c f4       	brge	.+10     	; 0x37b6 <DIO_u8TogglePinValue+0x46>
    37ac:	8c 81       	ldd	r24, Y+4	; 0x04
    37ae:	9d 81       	ldd	r25, Y+5	; 0x05
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	61 f0       	breq	.+24     	; 0x37cc <DIO_u8TogglePinValue+0x5c>
    37b4:	5b c0       	rjmp	.+182    	; 0x386c <DIO_u8TogglePinValue+0xfc>
    37b6:	2c 81       	ldd	r18, Y+4	; 0x04
    37b8:	3d 81       	ldd	r19, Y+5	; 0x05
    37ba:	22 30       	cpi	r18, 0x02	; 2
    37bc:	31 05       	cpc	r19, r1
    37be:	71 f1       	breq	.+92     	; 0x381c <DIO_u8TogglePinValue+0xac>
    37c0:	8c 81       	ldd	r24, Y+4	; 0x04
    37c2:	9d 81       	ldd	r25, Y+5	; 0x05
    37c4:	83 30       	cpi	r24, 0x03	; 3
    37c6:	91 05       	cpc	r25, r1
    37c8:	e9 f1       	breq	.+122    	; 0x3844 <DIO_u8TogglePinValue+0xd4>
    37ca:	50 c0       	rjmp	.+160    	; 0x386c <DIO_u8TogglePinValue+0xfc>
		{
			case DIO_u8_PORTA:
				TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    37cc:	ab e3       	ldi	r26, 0x3B	; 59
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	eb e3       	ldi	r30, 0x3B	; 59
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	48 2f       	mov	r20, r24
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	28 2f       	mov	r18, r24
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	02 2e       	mov	r0, r18
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <DIO_u8TogglePinValue+0x7a>
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	0a 94       	dec	r0
    37ec:	e2 f7       	brpl	.-8      	; 0x37e6 <DIO_u8TogglePinValue+0x76>
    37ee:	84 27       	eor	r24, r20
    37f0:	8c 93       	st	X, r24
    37f2:	3f c0       	rjmp	.+126    	; 0x3872 <DIO_u8TogglePinValue+0x102>
				break;
			case DIO_u8_PORTB:
				TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    37f4:	a8 e3       	ldi	r26, 0x38	; 56
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	e8 e3       	ldi	r30, 0x38	; 56
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	48 2f       	mov	r20, r24
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	28 2f       	mov	r18, r24
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	02 2e       	mov	r0, r18
    380c:	02 c0       	rjmp	.+4      	; 0x3812 <DIO_u8TogglePinValue+0xa2>
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	0a 94       	dec	r0
    3814:	e2 f7       	brpl	.-8      	; 0x380e <DIO_u8TogglePinValue+0x9e>
    3816:	84 27       	eor	r24, r20
    3818:	8c 93       	st	X, r24
    381a:	2b c0       	rjmp	.+86     	; 0x3872 <DIO_u8TogglePinValue+0x102>
				break;
			case DIO_u8_PORTC:
				TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    381c:	a5 e3       	ldi	r26, 0x35	; 53
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e5 e3       	ldi	r30, 0x35	; 53
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	48 2f       	mov	r20, r24
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	28 2f       	mov	r18, r24
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	02 2e       	mov	r0, r18
    3834:	02 c0       	rjmp	.+4      	; 0x383a <DIO_u8TogglePinValue+0xca>
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	0a 94       	dec	r0
    383c:	e2 f7       	brpl	.-8      	; 0x3836 <DIO_u8TogglePinValue+0xc6>
    383e:	84 27       	eor	r24, r20
    3840:	8c 93       	st	X, r24
    3842:	17 c0       	rjmp	.+46     	; 0x3872 <DIO_u8TogglePinValue+0x102>
				break;
			case DIO_u8_PORTD:
				TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    3844:	a2 e3       	ldi	r26, 0x32	; 50
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e2 e3       	ldi	r30, 0x32	; 50
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	48 2f       	mov	r20, r24
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	02 2e       	mov	r0, r18
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <DIO_u8TogglePinValue+0xf2>
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	0a 94       	dec	r0
    3864:	e2 f7       	brpl	.-8      	; 0x385e <DIO_u8TogglePinValue+0xee>
    3866:	84 27       	eor	r24, r20
    3868:	8c 93       	st	X, r24
    386a:	03 c0       	rjmp	.+6      	; 0x3872 <DIO_u8TogglePinValue+0x102>
				break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    386c:	19 82       	std	Y+1, r1	; 0x01
    386e:	01 c0       	rjmp	.+2      	; 0x3872 <DIO_u8TogglePinValue+0x102>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3870:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3872:	89 81       	ldd	r24, Y+1	; 0x01
}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <ADC_voidInit>:

static void (*ADC_pu8_Interrupt_function)(void) = NULL;


void ADC_voidInit()
{
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
	//set the ADC port as input
	DIO_u8SetPortDirection(ADC_u8_PORT,DIO_u8_INPUT);
    388c:	83 e0       	ldi	r24, 0x03	; 3
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(ADC_u8_PORT,DIO_u8_LOW);
    3894:	83 e0       	ldi	r24, 0x03	; 3
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	0e 94 18 1b 	call	0x3630	; 0x3630 <DIO_u8SetPortValue>

	//select the ADC clock(Prescalar)
	ADC_u8_ADCSRA_REG = ((ADC_u8_ADCSRA_REG & ADC_u8_PRESCALAR_MASK) | ADC_u8_INITIAL_PRESCALAR);
    389c:	a6 e2       	ldi	r26, 0x26	; 38
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e6 e2       	ldi	r30, 0x26	; 38
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	88 7f       	andi	r24, 0xF8	; 248
    38a8:	86 60       	ori	r24, 0x06	; 6
    38aa:	8c 93       	st	X, r24
	//select the ADC Reference voltage
	ADC_u8_ADMUX_REG = ((ADC_u8_ADMUX_REG & ADC_u8_REF_VOLT_MASK) | (ADC_u8_INITIAL_REF_VOLT<<6));
    38ac:	a7 e2       	ldi	r26, 0x27	; 39
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e7 e2       	ldi	r30, 0x27	; 39
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	8f 73       	andi	r24, 0x3F	; 63
    38b8:	80 64       	ori	r24, 0x40	; 64
    38ba:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADEN);
    38bc:	a6 e2       	ldi	r26, 0x26	; 38
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e6 e2       	ldi	r30, 0x26	; 38
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	80 68       	ori	r24, 0x80	; 128
    38c8:	8c 93       	st	X, r24

}
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <ADC_voidSetPrescalar>:

void ADC_voidSetPrescalar(u8 ADC_u8_PRESCALAR)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	89 83       	std	Y+1, r24	; 0x01
	//select the ADC clock(Prescalar)
	ADC_u8_ADCSRA_REG = ((ADC_u8_ADCSRA_REG & ADC_u8_PRESCALAR_MASK) | ADC_u8_PRESCALAR);
    38dc:	a6 e2       	ldi	r26, 0x26	; 38
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	e6 e2       	ldi	r30, 0x26	; 38
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	98 2f       	mov	r25, r24
    38e8:	98 7f       	andi	r25, 0xF8	; 248
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	89 2b       	or	r24, r25
    38ee:	8c 93       	st	X, r24
}
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <ADC_voidSetReferenceVoltage>:

void ADC_voidSetReferenceVoltage(u8 ADC_u8_REF_VOLT)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	89 83       	std	Y+1, r24	; 0x01
	//select the ADC Reference voltage
	ADC_u8_ADMUX_REG = ((ADC_u8_ADMUX_REG & ADC_u8_REF_VOLT_MASK) | (ADC_u8_REF_VOLT<<6));
    3904:	a7 e2       	ldi	r26, 0x27	; 39
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	e7 e2       	ldi	r30, 0x27	; 39
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	28 2f       	mov	r18, r24
    3910:	2f 73       	andi	r18, 0x3F	; 63
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	88 2f       	mov	r24, r24
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	00 24       	eor	r0, r0
    391a:	96 95       	lsr	r25
    391c:	87 95       	ror	r24
    391e:	07 94       	ror	r0
    3920:	96 95       	lsr	r25
    3922:	87 95       	ror	r24
    3924:	07 94       	ror	r0
    3926:	98 2f       	mov	r25, r24
    3928:	80 2d       	mov	r24, r0
    392a:	82 2b       	or	r24, r18
    392c:	8c 93       	st	X, r24
}
    392e:	0f 90       	pop	r0
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <ADC_u16StartConvWaitRead>:

s16 ADC_u16StartConvWaitRead(u8 ADC_u8_ADCx)
{
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	0f 92       	push	r0
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	89 83       	std	Y+1, r24	; 0x01
	//select the initial ADC input Channel
	ADC_u8_ADMUX_REG = ((ADC_u8_ADMUX_REG & ADC_u8_MUX_MASK) | ADC_u8_ADCx);
    3942:	a7 e2       	ldi	r26, 0x27	; 39
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	e7 e2       	ldi	r30, 0x27	; 39
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	80 81       	ld	r24, Z
    394c:	98 2f       	mov	r25, r24
    394e:	90 7e       	andi	r25, 0xE0	; 224
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	89 2b       	or	r24, r25
    3954:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC);
    3956:	a6 e2       	ldi	r26, 0x26	; 38
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e6 e2       	ldi	r30, 0x26	; 38
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 64       	ori	r24, 0x40	; 64
    3962:	8c 93       	st	X, r24

	//wait till the conversion is completes
	while(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC) != 0)
    3964:	e6 e2       	ldi	r30, 0x26	; 38
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	82 95       	swap	r24
    396c:	86 95       	lsr	r24
    396e:	86 95       	lsr	r24
    3970:	83 70       	andi	r24, 0x03	; 3
    3972:	88 2f       	mov	r24, r24
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	81 70       	andi	r24, 0x01	; 1
    3978:	90 70       	andi	r25, 0x00	; 0
    397a:	88 23       	and	r24, r24
    397c:	99 f7       	brne	.-26     	; 0x3964 <ADC_u16StartConvWaitRead+0x2e>
	{}


	return ADC_u16Read();
    397e:	0e 94 ed 1c 	call	0x39da	; 0x39da <ADC_u16Read>
}
    3982:	0f 90       	pop	r0
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <ADC_voidStartConversion>:


void ADC_voidStartConversion(u8 ADC_u8_ADCx)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	0f 92       	push	r0
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	89 83       	std	Y+1, r24	; 0x01
	//check if there is an ongoing converstion
	if(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC) != 0)
    3996:	e6 e2       	ldi	r30, 0x26	; 38
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	82 95       	swap	r24
    399e:	86 95       	lsr	r24
    39a0:	86 95       	lsr	r24
    39a2:	83 70       	andi	r24, 0x03	; 3
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	81 70       	andi	r24, 0x01	; 1
    39aa:	90 70       	andi	r25, 0x00	; 0
    39ac:	88 23       	and	r24, r24
    39ae:	89 f4       	brne	.+34     	; 0x39d2 <ADC_voidStartConversion+0x48>
	{
		return;
	}

	//select the initial ADC input Channel
	ADC_u8_ADMUX_REG = ((ADC_u8_ADMUX_REG & ADC_u8_MUX_MASK) | ADC_u8_ADCx);
    39b0:	a7 e2       	ldi	r26, 0x27	; 39
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	e7 e2       	ldi	r30, 0x27	; 39
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	98 2f       	mov	r25, r24
    39bc:	90 7e       	andi	r25, 0xE0	; 224
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	89 2b       	or	r24, r25
    39c2:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC);
    39c4:	a6 e2       	ldi	r26, 0x26	; 38
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	e6 e2       	ldi	r30, 0x26	; 38
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	80 64       	ori	r24, 0x40	; 64
    39d0:	8c 93       	st	X, r24
}
    39d2:	0f 90       	pop	r0
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	08 95       	ret

000039da <ADC_u16Read>:

s16 ADC_u16Read()
{
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <ADC_u16Read+0x6>
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
	u8 ADC_ADCL = ADC_u8_ADCL_REG;
    39e4:	e4 e2       	ldi	r30, 0x24	; 36
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	80 81       	ld	r24, Z
    39ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 ADC_ADCH = ADC_u8_ADCH_REG;
    39ec:	e5 e2       	ldi	r30, 0x25	; 37
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	89 83       	std	Y+1, r24	; 0x01

	return ((((u16)ADC_ADCH)<<8)|ADC_ADCL);
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	38 2f       	mov	r19, r24
    39fc:	22 27       	eor	r18, r18
    39fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3a00:	88 2f       	mov	r24, r24
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	82 2b       	or	r24, r18
    3a06:	93 2b       	or	r25, r19
}
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	cf 91       	pop	r28
    3a0e:	df 91       	pop	r29
    3a10:	08 95       	ret

00003a12 <ADC_voidSetAutoTriggerSource>:

void ADC_voidSetAutoTriggerSource(u8 ADC_u8_TRIGGER_SOURCE)
{
    3a12:	df 93       	push	r29
    3a14:	cf 93       	push	r28
    3a16:	0f 92       	push	r0
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	89 83       	std	Y+1, r24	; 0x01
	//select the Auto Trigger Source
	ADC_u8_SFIOR_REG = ((ADC_u8_SFIOR_REG & ADC_u8_TRIGGER_SOURCE_MASK) | (ADC_u8_TRIGGER_SOURCE<<5));
    3a1e:	a0 e5       	ldi	r26, 0x50	; 80
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e0 e5       	ldi	r30, 0x50	; 80
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	28 2f       	mov	r18, r24
    3a2a:	2f 71       	andi	r18, 0x1F	; 31
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	82 95       	swap	r24
    3a38:	92 95       	swap	r25
    3a3a:	90 7f       	andi	r25, 0xF0	; 240
    3a3c:	98 27       	eor	r25, r24
    3a3e:	80 7f       	andi	r24, 0xF0	; 240
    3a40:	98 27       	eor	r25, r24
    3a42:	82 2b       	or	r24, r18
    3a44:	8c 93       	st	X, r24
}
    3a46:	0f 90       	pop	r0
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <ADC_voidEnableTriggerSource>:

void ADC_voidEnableTriggerSource()
{
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE);
    3a56:	a6 e2       	ldi	r26, 0x26	; 38
    3a58:	b0 e0       	ldi	r27, 0x00	; 0
    3a5a:	e6 e2       	ldi	r30, 0x26	; 38
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	80 81       	ld	r24, Z
    3a60:	80 62       	ori	r24, 0x20	; 32
    3a62:	8c 93       	st	X, r24
}
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	08 95       	ret

00003a6a <ADC_voidDisableTriggerSource>:

void ADC_voidDisableTriggerSource()
{
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE);
    3a72:	a6 e2       	ldi	r26, 0x26	; 38
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e6 e2       	ldi	r30, 0x26	; 38
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	8f 7d       	andi	r24, 0xDF	; 223
    3a7e:	8c 93       	st	X, r24
}
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	08 95       	ret

00003a86 <ADC_voidSetCallBack>:

void ADC_voidSetCallBack(void (*pf)(void))
{
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <ADC_voidSetCallBack+0x6>
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
	ADC_pu8_Interrupt_function = pf;
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	90 93 ef 01 	sts	0x01EF, r25
    3a9c:	80 93 ee 01 	sts	0x01EE, r24
}
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <ADC_voidEnableInterrupt>:

void ADC_voidEnableInterrupt()
{
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE);
    3ab2:	a6 e2       	ldi	r26, 0x26	; 38
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	e6 e2       	ldi	r30, 0x26	; 38
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	88 60       	ori	r24, 0x08	; 8
    3abe:	8c 93       	st	X, r24
}
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <ADC_voidDisableInterrupt>:

void ADC_voidDisableInterrupt()
{
    3ac6:	df 93       	push	r29
    3ac8:	cf 93       	push	r28
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE);
    3ace:	a6 e2       	ldi	r26, 0x26	; 38
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	e6 e2       	ldi	r30, 0x26	; 38
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	87 7f       	andi	r24, 0xF7	; 247
    3ada:	8c 93       	st	X, r24
}
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <__vector_16>:

void __vector_16(void)	__attribute__((signal));

void __vector_16(void)
{
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	2f 93       	push	r18
    3aee:	3f 93       	push	r19
    3af0:	4f 93       	push	r20
    3af2:	5f 93       	push	r21
    3af4:	6f 93       	push	r22
    3af6:	7f 93       	push	r23
    3af8:	8f 93       	push	r24
    3afa:	9f 93       	push	r25
    3afc:	af 93       	push	r26
    3afe:	bf 93       	push	r27
    3b00:	ef 93       	push	r30
    3b02:	ff 93       	push	r31
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pu8_Interrupt_function == NULL){return;}
    3b0c:	80 91 ee 01 	lds	r24, 0x01EE
    3b10:	90 91 ef 01 	lds	r25, 0x01EF
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	29 f0       	breq	.+10     	; 0x3b22 <__vector_16+0x40>
	(*ADC_pu8_Interrupt_function)();
    3b18:	e0 91 ee 01 	lds	r30, 0x01EE
    3b1c:	f0 91 ef 01 	lds	r31, 0x01EF
    3b20:	09 95       	icall
}
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	ff 91       	pop	r31
    3b28:	ef 91       	pop	r30
    3b2a:	bf 91       	pop	r27
    3b2c:	af 91       	pop	r26
    3b2e:	9f 91       	pop	r25
    3b30:	8f 91       	pop	r24
    3b32:	7f 91       	pop	r23
    3b34:	6f 91       	pop	r22
    3b36:	5f 91       	pop	r21
    3b38:	4f 91       	pop	r20
    3b3a:	3f 91       	pop	r19
    3b3c:	2f 91       	pop	r18
    3b3e:	0f 90       	pop	r0
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	0f 90       	pop	r0
    3b44:	1f 90       	pop	r1
    3b46:	18 95       	reti

00003b48 <delay_ms>:
 */

#include "STD_TYPES.h"

void delay_ms(u32 ms)
{
    3b48:	df 93       	push	r29
    3b4a:	cf 93       	push	r28
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	2c 97       	sbiw	r28, 0x0c	; 12
    3b52:	0f b6       	in	r0, 0x3f	; 63
    3b54:	f8 94       	cli
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	0f be       	out	0x3f, r0	; 63
    3b5a:	cd bf       	out	0x3d, r28	; 61
    3b5c:	69 87       	std	Y+9, r22	; 0x09
    3b5e:	7a 87       	std	Y+10, r23	; 0x0a
    3b60:	8b 87       	std	Y+11, r24	; 0x0b
    3b62:	9c 87       	std	Y+12, r25	; 0x0c
	for(u32 i = 0; i < ms; i++)
    3b64:	1d 82       	std	Y+5, r1	; 0x05
    3b66:	1e 82       	std	Y+6, r1	; 0x06
    3b68:	1f 82       	std	Y+7, r1	; 0x07
    3b6a:	18 86       	std	Y+8, r1	; 0x08
    3b6c:	25 c0       	rjmp	.+74     	; 0x3bb8 <delay_ms+0x70>
	{
		for(u32 j = 0; j < 225; j++)
    3b6e:	19 82       	std	Y+1, r1	; 0x01
    3b70:	1a 82       	std	Y+2, r1	; 0x02
    3b72:	1b 82       	std	Y+3, r1	; 0x03
    3b74:	1c 82       	std	Y+4, r1	; 0x04
    3b76:	0c c0       	rjmp	.+24     	; 0x3b90 <delay_ms+0x48>
		{
			asm("NOP");
    3b78:	00 00       	nop

void delay_ms(u32 ms)
{
	for(u32 i = 0; i < ms; i++)
	{
		for(u32 j = 0; j < 225; j++)
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b80:	bc 81       	ldd	r27, Y+4	; 0x04
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	a1 1d       	adc	r26, r1
    3b86:	b1 1d       	adc	r27, r1
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	ab 83       	std	Y+3, r26	; 0x03
    3b8e:	bc 83       	std	Y+4, r27	; 0x04
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	9a 81       	ldd	r25, Y+2	; 0x02
    3b94:	ab 81       	ldd	r26, Y+3	; 0x03
    3b96:	bc 81       	ldd	r27, Y+4	; 0x04
    3b98:	81 3e       	cpi	r24, 0xE1	; 225
    3b9a:	91 05       	cpc	r25, r1
    3b9c:	a1 05       	cpc	r26, r1
    3b9e:	b1 05       	cpc	r27, r1
    3ba0:	58 f3       	brcs	.-42     	; 0x3b78 <delay_ms+0x30>

#include "STD_TYPES.h"

void delay_ms(u32 ms)
{
	for(u32 i = 0; i < ms; i++)
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	af 81       	ldd	r26, Y+7	; 0x07
    3ba8:	b8 85       	ldd	r27, Y+8	; 0x08
    3baa:	01 96       	adiw	r24, 0x01	; 1
    3bac:	a1 1d       	adc	r26, r1
    3bae:	b1 1d       	adc	r27, r1
    3bb0:	8d 83       	std	Y+5, r24	; 0x05
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	af 83       	std	Y+7, r26	; 0x07
    3bb6:	b8 87       	std	Y+8, r27	; 0x08
    3bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    3bba:	3e 81       	ldd	r19, Y+6	; 0x06
    3bbc:	4f 81       	ldd	r20, Y+7	; 0x07
    3bbe:	58 85       	ldd	r21, Y+8	; 0x08
    3bc0:	89 85       	ldd	r24, Y+9	; 0x09
    3bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3bc6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3bc8:	28 17       	cp	r18, r24
    3bca:	39 07       	cpc	r19, r25
    3bcc:	4a 07       	cpc	r20, r26
    3bce:	5b 07       	cpc	r21, r27
    3bd0:	70 f2       	brcs	.-100    	; 0x3b6e <delay_ms+0x26>
		for(u32 j = 0; j < 225; j++)
		{
			asm("NOP");
		}
	}
}
    3bd2:	2c 96       	adiw	r28, 0x0c	; 12
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	de bf       	out	0x3e, r29	; 62
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <USS_measureDistance>:
u8 USS_arrCount = 0;					//array index counter
u8 USS_state = 0;						//state for calculating the time of the echo pulse
u16 USS_startCount = 0;					//the start of the echo pulse

void USS_measureDistance()
{
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <USS_measureDistance+0x6>
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <USS_measureDistance+0x8>
    3bec:	00 d0       	rcall	.+0      	; 0x3bee <USS_measureDistance+0xa>
    3bee:	cd b7       	in	r28, 0x3d	; 61
    3bf0:	de b7       	in	r29, 0x3e	; 62
	//measure the echo pulse
	switch(USS_state)
    3bf2:	80 91 fd 01 	lds	r24, 0x01FD
    3bf6:	28 2f       	mov	r18, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	3e 83       	std	Y+6, r19	; 0x06
    3bfc:	2d 83       	std	Y+5, r18	; 0x05
    3bfe:	4d 81       	ldd	r20, Y+5	; 0x05
    3c00:	5e 81       	ldd	r21, Y+6	; 0x06
    3c02:	41 15       	cp	r20, r1
    3c04:	51 05       	cpc	r21, r1
    3c06:	31 f0       	breq	.+12     	; 0x3c14 <USS_measureDistance+0x30>
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	91 05       	cpc	r25, r1
    3c10:	99 f0       	breq	.+38     	; 0x3c38 <USS_measureDistance+0x54>
    3c12:	89 c0       	rjmp	.+274    	; 0x3d26 <USS_measureDistance+0x142>
	{
	case 0:
		//start of the pulse
		USS_startCount = TIM1_u16GetICR1Val();
    3c14:	0e 94 ef 10 	call	0x21de	; 0x21de <TIM1_u16GetICR1Val>
    3c18:	90 93 ff 01 	sts	0x01FF, r25
    3c1c:	80 93 fe 01 	sts	0x01FE, r24
		USS_state = 1;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	80 93 fd 01 	sts	0x01FD, r24
		TIM1_voidSetInputCaptureCEdge(TIM1_u8_INPUT_CAPTURE_FALLING_EDGE);
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	0e 94 2b 11 	call	0x2256	; 0x2256 <TIM1_voidSetInputCaptureCEdge>
		DIO_u8SetPinValue(TIM1_u8_PORT,TIM1_u8_ICP1_PIN,DIO_u8_HIGH);
    3c2c:	83 e0       	ldi	r24, 0x03	; 3
    3c2e:	66 e0       	ldi	r22, 0x06	; 6
    3c30:	41 e0       	ldi	r20, 0x01	; 1
    3c32:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
    3c36:	77 c0       	rjmp	.+238    	; 0x3d26 <USS_measureDistance+0x142>
		break;
	case 1:
		//end of the pulse
		USS_timeLapsed = TIM1_u16GetICR1Val() - USS_startCount;
    3c38:	0e 94 ef 10 	call	0x21de	; 0x21de <TIM1_u16GetICR1Val>
    3c3c:	9c 01       	movw	r18, r24
    3c3e:	80 91 fe 01 	lds	r24, 0x01FE
    3c42:	90 91 ff 01 	lds	r25, 0x01FF
    3c46:	a9 01       	movw	r20, r18
    3c48:	48 1b       	sub	r20, r24
    3c4a:	59 0b       	sbc	r21, r25
    3c4c:	ca 01       	movw	r24, r20
    3c4e:	90 93 f1 01 	sts	0x01F1, r25
    3c52:	80 93 f0 01 	sts	0x01F0, r24
		USS_state = 0;
    3c56:	10 92 fd 01 	sts	0x01FD, r1
		TIM1_voidSetInputCaptureCEdge(TIM1_u8_INPUT_CAPTURE_RISING_EDGE);
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	0e 94 2b 11 	call	0x2256	; 0x2256 <TIM1_voidSetInputCaptureCEdge>
		DIO_u8SetPinValue(TIM1_u8_PORT,TIM1_u8_ICP1_PIN,DIO_u8_LOW);
    3c60:	83 e0       	ldi	r24, 0x03	; 3
    3c62:	66 e0       	ldi	r22, 0x06	; 6
    3c64:	40 e0       	ldi	r20, 0x00	; 0
    3c66:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		USS_distArr[USS_arrCount] =(u8)(100*((((f32)((USS_timeLapsed>MAX_ALLOWED_TIME)?MAX_ALLOWED_TIME:USS_timeLapsed)*(0.000032))*343.0)/2.0));
    3c6a:	80 91 fc 01 	lds	r24, 0x01FC
    3c6e:	28 2f       	mov	r18, r24
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	3c 83       	std	Y+4, r19	; 0x04
    3c74:	2b 83       	std	Y+3, r18	; 0x03
    3c76:	80 91 f0 01 	lds	r24, 0x01F0
    3c7a:	90 91 f1 01 	lds	r25, 0x01F1
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	49 81       	ldd	r20, Y+1	; 0x01
    3c84:	5a 81       	ldd	r21, Y+2	; 0x02
    3c86:	4b 3f       	cpi	r20, 0xFB	; 251
    3c88:	51 05       	cpc	r21, r1
    3c8a:	20 f0       	brcs	.+8      	; 0x3c94 <USS_measureDistance+0xb0>
    3c8c:	8a ef       	ldi	r24, 0xFA	; 250
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9a 83       	std	Y+2, r25	; 0x02
    3c92:	89 83       	std	Y+1, r24	; 0x01
    3c94:	29 81       	ldd	r18, Y+1	; 0x01
    3c96:	3a 81       	ldd	r19, Y+2	; 0x02
    3c98:	c9 01       	movw	r24, r18
    3c9a:	a0 e0       	ldi	r26, 0x00	; 0
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	bc 01       	movw	r22, r24
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	bc 01       	movw	r22, r24
    3cac:	cd 01       	movw	r24, r26
    3cae:	2d eb       	ldi	r18, 0xBD	; 189
    3cb0:	37 e3       	ldi	r19, 0x37	; 55
    3cb2:	46 e0       	ldi	r20, 0x06	; 6
    3cb4:	58 e3       	ldi	r21, 0x38	; 56
    3cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	bc 01       	movw	r22, r24
    3cc0:	cd 01       	movw	r24, r26
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e8       	ldi	r19, 0x80	; 128
    3cc6:	4b ea       	ldi	r20, 0xAB	; 171
    3cc8:	53 e4       	ldi	r21, 0x43	; 67
    3cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	bc 01       	movw	r22, r24
    3cd4:	cd 01       	movw	r24, r26
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e4       	ldi	r21, 0x40	; 64
    3cde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	bc 01       	movw	r22, r24
    3ce8:	cd 01       	movw	r24, r26
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	48 ec       	ldi	r20, 0xC8	; 200
    3cf0:	52 e4       	ldi	r21, 0x42	; 66
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	eb 81       	ldd	r30, Y+3	; 0x03
    3d08:	fc 81       	ldd	r31, Y+4	; 0x04
    3d0a:	ee 50       	subi	r30, 0x0E	; 14
    3d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0e:	80 83       	st	Z, r24
		USS_arrCount++;
    3d10:	80 91 fc 01 	lds	r24, 0x01FC
    3d14:	8f 5f       	subi	r24, 0xFF	; 255
    3d16:	80 93 fc 01 	sts	0x01FC, r24
		if(USS_arrCount == MAX_ARR_SIZE)
    3d1a:	80 91 fc 01 	lds	r24, 0x01FC
    3d1e:	8a 30       	cpi	r24, 0x0A	; 10
    3d20:	11 f4       	brne	.+4      	; 0x3d26 <USS_measureDistance+0x142>
		{
			USS_arrCount = 0;
    3d22:	10 92 fc 01 	sts	0x01FC, r1
		}
		break;
	}
}
    3d26:	26 96       	adiw	r28, 0x06	; 6
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <USS_triggerSensor>:


void USS_triggerSensor()
{
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
    3d40:	68 97       	sbiw	r28, 0x18	; 24
    3d42:	0f b6       	in	r0, 0x3f	; 63
    3d44:	f8 94       	cli
    3d46:	de bf       	out	0x3e, r29	; 62
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	cd bf       	out	0x3d, r28	; 61
	//send 15us pulse
	DIO_u8SetPinValue(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN,DIO_u8_HIGH);
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	a0 e7       	ldi	r26, 0x70	; 112
    3d5c:	b1 e4       	ldi	r27, 0x41	; 65
    3d5e:	8d 8b       	std	Y+21, r24	; 0x15
    3d60:	9e 8b       	std	Y+22, r25	; 0x16
    3d62:	af 8b       	std	Y+23, r26	; 0x17
    3d64:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d66:	6d 89       	ldd	r22, Y+21	; 0x15
    3d68:	7e 89       	ldd	r23, Y+22	; 0x16
    3d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d6e:	2b ea       	ldi	r18, 0xAB	; 171
    3d70:	3a ea       	ldi	r19, 0xAA	; 170
    3d72:	4a e2       	ldi	r20, 0x2A	; 42
    3d74:	50 e4       	ldi	r21, 0x40	; 64
    3d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	89 8b       	std	Y+17, r24	; 0x11
    3d80:	9a 8b       	std	Y+18, r25	; 0x12
    3d82:	ab 8b       	std	Y+19, r26	; 0x13
    3d84:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3d86:	69 89       	ldd	r22, Y+17	; 0x11
    3d88:	7a 89       	ldd	r23, Y+18	; 0x12
    3d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	1c f4       	brge	.+6      	; 0x3da4 <USS_triggerSensor+0x6c>
		__ticks = 1;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	88 8b       	std	Y+16, r24	; 0x10
    3da2:	91 c0       	rjmp	.+290    	; 0x3ec6 <USS_triggerSensor+0x18e>
	else if (__tmp > 255)
    3da4:	69 89       	ldd	r22, Y+17	; 0x11
    3da6:	7a 89       	ldd	r23, Y+18	; 0x12
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	4f e7       	ldi	r20, 0x7F	; 127
    3db2:	53 e4       	ldi	r21, 0x43	; 67
    3db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3db8:	18 16       	cp	r1, r24
    3dba:	0c f0       	brlt	.+2      	; 0x3dbe <USS_triggerSensor+0x86>
    3dbc:	7b c0       	rjmp	.+246    	; 0x3eb4 <USS_triggerSensor+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	4a e7       	ldi	r20, 0x7A	; 122
    3dcc:	54 e4       	ldi	r21, 0x44	; 68
    3dce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	8c 87       	std	Y+12, r24	; 0x0c
    3dd8:	9d 87       	std	Y+13, r25	; 0x0d
    3dda:	ae 87       	std	Y+14, r26	; 0x0e
    3ddc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dde:	6c 85       	ldd	r22, Y+12	; 0x0c
    3de0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3de2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3de4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	4a ef       	ldi	r20, 0xFA	; 250
    3dec:	54 e4       	ldi	r21, 0x44	; 68
    3dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	88 87       	std	Y+8, r24	; 0x08
    3df8:	99 87       	std	Y+9, r25	; 0x09
    3dfa:	aa 87       	std	Y+10, r26	; 0x0a
    3dfc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3dfe:	68 85       	ldd	r22, Y+8	; 0x08
    3e00:	79 85       	ldd	r23, Y+9	; 0x09
    3e02:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e04:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e8       	ldi	r20, 0x80	; 128
    3e0c:	5f e3       	ldi	r21, 0x3F	; 63
    3e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e12:	88 23       	and	r24, r24
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <USS_triggerSensor+0xe8>
		__ticks = 1;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	9f 83       	std	Y+7, r25	; 0x07
    3e1c:	8e 83       	std	Y+6, r24	; 0x06
    3e1e:	3f c0       	rjmp	.+126    	; 0x3e9e <USS_triggerSensor+0x166>
	else if (__tmp > 65535)
    3e20:	68 85       	ldd	r22, Y+8	; 0x08
    3e22:	79 85       	ldd	r23, Y+9	; 0x09
    3e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	3f ef       	ldi	r19, 0xFF	; 255
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	57 e4       	ldi	r21, 0x47	; 71
    3e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e34:	18 16       	cp	r1, r24
    3e36:	4c f5       	brge	.+82     	; 0x3e8a <USS_triggerSensor+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e38:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e2       	ldi	r20, 0x20	; 32
    3e46:	51 e4       	ldi	r21, 0x41	; 65
    3e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	9f 83       	std	Y+7, r25	; 0x07
    3e5e:	8e 83       	std	Y+6, r24	; 0x06
    3e60:	0f c0       	rjmp	.+30     	; 0x3e80 <USS_triggerSensor+0x148>
    3e62:	88 ec       	ldi	r24, 0xC8	; 200
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9d 83       	std	Y+5, r25	; 0x05
    3e68:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <USS_triggerSensor+0x136>
    3e72:	9d 83       	std	Y+5, r25	; 0x05
    3e74:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e76:	8e 81       	ldd	r24, Y+6	; 0x06
    3e78:	9f 81       	ldd	r25, Y+7	; 0x07
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	9f 83       	std	Y+7, r25	; 0x07
    3e7e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e80:	8e 81       	ldd	r24, Y+6	; 0x06
    3e82:	9f 81       	ldd	r25, Y+7	; 0x07
    3e84:	00 97       	sbiw	r24, 0x00	; 0
    3e86:	69 f7       	brne	.-38     	; 0x3e62 <USS_triggerSensor+0x12a>
    3e88:	24 c0       	rjmp	.+72     	; 0x3ed2 <USS_triggerSensor+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8a:	68 85       	ldd	r22, Y+8	; 0x08
    3e8c:	79 85       	ldd	r23, Y+9	; 0x09
    3e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	9f 83       	std	Y+7, r25	; 0x07
    3e9c:	8e 83       	std	Y+6, r24	; 0x06
    3e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea2:	9b 83       	std	Y+3, r25	; 0x03
    3ea4:	8a 83       	std	Y+2, r24	; 0x02
    3ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <USS_triggerSensor+0x172>
    3eae:	9b 83       	std	Y+3, r25	; 0x03
    3eb0:	8a 83       	std	Y+2, r24	; 0x02
    3eb2:	0f c0       	rjmp	.+30     	; 0x3ed2 <USS_triggerSensor+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3eb4:	69 89       	ldd	r22, Y+17	; 0x11
    3eb6:	7a 89       	ldd	r23, Y+18	; 0x12
    3eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eba:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	88 8b       	std	Y+16, r24	; 0x10
    3ec6:	88 89       	ldd	r24, Y+16	; 0x10
    3ec8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	8a 95       	dec	r24
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <USS_triggerSensor+0x194>
    3ed0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	DIO_u8SetPinValue(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN,DIO_u8_LOW);
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    3edc:	68 96       	adiw	r28, 0x18	; 24
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	08 95       	ret

00003eee <USS_voidInit>:


void USS_voidInit()
{
    3eee:	df 93       	push	r29
    3ef0:	cf 93       	push	r28
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
	//set-up timer1
	TIM1_voidPWMInit();
    3ef6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TIM1_voidPWMInit>

	//set-up trigger
	DIO_u8SetPinDirection(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN, DIO_u8_OUTPUT);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN,DIO_u8_LOW);
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	TIM1_voidSetOverFlowCallBack(USS_triggerSensor);
    3f0e:	8c e9       	ldi	r24, 0x9C	; 156
    3f10:	9e e1       	ldi	r25, 0x1E	; 30
    3f12:	0e 94 ed 11 	call	0x23da	; 0x23da <TIM1_voidSetOverFlowCallBack>

	//set-up the echo(input capture)
	DIO_u8SetPinDirection(TIM1_u8_PORT,TIM1_u8_ICP1_PIN,DIO_u8_INPUT);
    3f16:	83 e0       	ldi	r24, 0x03	; 3
    3f18:	66 e0       	ldi	r22, 0x06	; 6
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(TIM1_u8_PORT,TIM1_u8_ICP1_PIN,DIO_u8_LOW);
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	66 e0       	ldi	r22, 0x06	; 6
    3f24:	40 e0       	ldi	r20, 0x00	; 0
    3f26:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	TIM1_voidSetInputCaptureCallBack(USS_measureDistance);
    3f2a:	82 ef       	ldi	r24, 0xF2	; 242
    3f2c:	9d e1       	ldi	r25, 0x1D	; 29
    3f2e:	0e 94 b7 11 	call	0x236e	; 0x236e <TIM1_voidSetInputCaptureCallBack>
	TIM1_voidEnableInputCaptureNoiseCanceler();
    3f32:	0e 94 0f 11 	call	0x221e	; 0x221e <TIM1_voidEnableInputCaptureNoiseCanceler>
	TIM1_voidSetInputCaptureCEdge(TIM1_u8_INPUT_CAPTURE_RISING_EDGE);
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	0e 94 2b 11 	call	0x2256	; 0x2256 <TIM1_voidSetInputCaptureCEdge>

	//enable interrrupts
	TIM1_voidEnableOverFlowInterrupt();
    3f3c:	0e 94 9b 11 	call	0x2336	; 0x2336 <TIM1_voidEnableOverFlowInterrupt>
	TIM1_voidEnableInputCaptureInterrupt();
    3f40:	0e 94 47 11 	call	0x228e	; 0x228e <TIM1_voidEnableInputCaptureInterrupt>
}
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <USS_f32GetDistance>:


f32 USS_f32GetDistance()
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	27 97       	sbiw	r28, 0x07	; 7
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		//algorithm for getting the median

		for(u8 i = 0; i < MAX_ARR_SIZE; i++)
    3f5e:	1b 82       	std	Y+3, r1	; 0x03
    3f60:	49 c0       	rjmp	.+146    	; 0x3ff4 <USS_f32GetDistance+0xaa>
		{
			for(u8 j=0; j < (MAX_ARR_SIZE-i-1); j++)
    3f62:	1a 82       	std	Y+2, r1	; 0x02
    3f64:	36 c0       	rjmp	.+108    	; 0x3fd2 <USS_f32GetDistance+0x88>
			{
				if(USS_distArr[j] > USS_distArr[j+1])
    3f66:	8a 81       	ldd	r24, Y+2	; 0x02
    3f68:	88 2f       	mov	r24, r24
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	ee 50       	subi	r30, 0x0E	; 14
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	20 81       	ld	r18, Z
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	88 2f       	mov	r24, r24
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	01 96       	adiw	r24, 0x01	; 1
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	ee 50       	subi	r30, 0x0E	; 14
    3f80:	fe 4f       	sbci	r31, 0xFE	; 254
    3f82:	80 81       	ld	r24, Z
    3f84:	82 17       	cp	r24, r18
    3f86:	10 f5       	brcc	.+68     	; 0x3fcc <USS_f32GetDistance+0x82>
				{
					u8 temp = USS_distArr[j+1];
    3f88:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8a:	88 2f       	mov	r24, r24
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	01 96       	adiw	r24, 0x01	; 1
    3f90:	fc 01       	movw	r30, r24
    3f92:	ee 50       	subi	r30, 0x0E	; 14
    3f94:	fe 4f       	sbci	r31, 0xFE	; 254
    3f96:	80 81       	ld	r24, Z
    3f98:	89 83       	std	Y+1, r24	; 0x01
					USS_distArr[j+1] = USS_distArr[j];
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	88 2f       	mov	r24, r24
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	9c 01       	movw	r18, r24
    3fa2:	2f 5f       	subi	r18, 0xFF	; 255
    3fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	fc 01       	movw	r30, r24
    3fae:	ee 50       	subi	r30, 0x0E	; 14
    3fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb2:	80 81       	ld	r24, Z
    3fb4:	f9 01       	movw	r30, r18
    3fb6:	ee 50       	subi	r30, 0x0E	; 14
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	80 83       	st	Z, r24
					USS_distArr[j] = temp;
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	ee 50       	subi	r30, 0x0E	; 14
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	80 83       	st	Z, r24
	{
		//algorithm for getting the median

		for(u8 i = 0; i < MAX_ARR_SIZE; i++)
		{
			for(u8 j=0; j < (MAX_ARR_SIZE-i-1); j++)
    3fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fce:	8f 5f       	subi	r24, 0xFF	; 255
    3fd0:	8a 83       	std	Y+2, r24	; 0x02
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	48 2f       	mov	r20, r24
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fda:	28 2f       	mov	r18, r24
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	89 e0       	ldi	r24, 0x09	; 9
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	82 1b       	sub	r24, r18
    3fe4:	93 0b       	sbc	r25, r19
    3fe6:	48 17       	cp	r20, r24
    3fe8:	59 07       	cpc	r21, r25
    3fea:	0c f4       	brge	.+2      	; 0x3fee <USS_f32GetDistance+0xa4>
    3fec:	bc cf       	rjmp	.-136    	; 0x3f66 <USS_f32GetDistance+0x1c>
	}
	else
	{
		//algorithm for getting the median

		for(u8 i = 0; i < MAX_ARR_SIZE; i++)
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	8f 5f       	subi	r24, 0xFF	; 255
    3ff2:	8b 83       	std	Y+3, r24	; 0x03
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	8a 30       	cpi	r24, 0x0A	; 10
    3ff8:	08 f4       	brcc	.+2      	; 0x3ffc <USS_f32GetDistance+0xb2>
    3ffa:	b3 cf       	rjmp	.-154    	; 0x3f62 <USS_f32GetDistance+0x18>
					USS_distArr[j] = temp;
				}
			}
		}

		return (USS_distArr[(MAX_ARR_SIZE/2)-1]+USS_distArr[MAX_ARR_SIZE/2])/2.0;
    3ffc:	80 91 f6 01 	lds	r24, 0x01F6
    4000:	28 2f       	mov	r18, r24
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	80 91 f7 01 	lds	r24, 0x01F7
    4008:	88 2f       	mov	r24, r24
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	82 0f       	add	r24, r18
    400e:	93 1f       	adc	r25, r19
    4010:	aa 27       	eor	r26, r26
    4012:	97 fd       	sbrc	r25, 7
    4014:	a0 95       	com	r26
    4016:	ba 2f       	mov	r27, r26
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	bc 01       	movw	r22, r24
    4026:	cd 01       	movw	r24, r26
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	50 e4       	ldi	r21, 0x40	; 64
    4030:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
	}
}
    4038:	bc 01       	movw	r22, r24
    403a:	cd 01       	movw	r24, r26
    403c:	27 96       	adiw	r28, 0x07	; 7
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <StepperMotor_voidInit>:
#include "StepperMotor_interface.h"
#include "StepperMotor_private.h"
#include "StepperMotor_config.h"

void StepperMotor_voidInit()
{
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(StepperMotor_u8_PORT,StepperMotor_u8_PIN0,DIO_u8_OUTPUT);
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(StepperMotor_u8_PORT,StepperMotor_u8_PIN1,DIO_u8_OUTPUT);
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	41 e0       	ldi	r20, 0x01	; 1
    4066:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(StepperMotor_u8_PORT,StepperMotor_u8_PIN2,DIO_u8_OUTPUT);
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	62 e0       	ldi	r22, 0x02	; 2
    406e:	41 e0       	ldi	r20, 0x01	; 1
    4070:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(StepperMotor_u8_PORT,StepperMotor_u8_PIN3,DIO_u8_OUTPUT);
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	63 e0       	ldi	r22, 0x03	; 3
    4078:	41 e0       	ldi	r20, 0x01	; 1
    407a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(StepperMotor_u8_PORT,StepperMotor_u8_PIN0,DIO_u8_LOW);
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(StepperMotor_u8_PORT,StepperMotor_u8_PIN1,DIO_u8_LOW);
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	61 e0       	ldi	r22, 0x01	; 1
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(StepperMotor_u8_PORT,StepperMotor_u8_PIN2,DIO_u8_LOW);
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	62 e0       	ldi	r22, 0x02	; 2
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(StepperMotor_u8_PORT,StepperMotor_u8_PIN3,DIO_u8_LOW);
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	63 e0       	ldi	r22, 0x03	; 3
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

}
    40a6:	cf 91       	pop	r28
    40a8:	df 91       	pop	r29
    40aa:	08 95       	ret

000040ac <StepperMotor_u8MoveMotor>:



u8 StepperMotor_u8MoveMotor(u8 direction, u16 angle)
{
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	64 97       	sbiw	r28, 0x14	; 20
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	89 87       	std	Y+9, r24	; 0x09
    40c2:	7b 87       	std	Y+11, r23	; 0x0b
    40c4:	6a 87       	std	Y+10, r22	; 0x0a
	if((direction != 0) &&(direction != 1))
    40c6:	89 85       	ldd	r24, Y+9	; 0x09
    40c8:	88 23       	and	r24, r24
    40ca:	31 f0       	breq	.+12     	; 0x40d8 <StepperMotor_u8MoveMotor+0x2c>
    40cc:	89 85       	ldd	r24, Y+9	; 0x09
    40ce:	81 30       	cpi	r24, 0x01	; 1
    40d0:	19 f0       	breq	.+6      	; 0x40d8 <StepperMotor_u8MoveMotor+0x2c>
	{
		return StepperMotor_u8_Error;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	8c 8b       	std	Y+20, r24	; 0x14
    40d6:	b7 c0       	rjmp	.+366    	; 0x4246 <StepperMotor_u8MoveMotor+0x19a>
	}

	u32 maxIter = (((2048ul*angle)/360)/4);
    40d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    40da:	9b 85       	ldd	r25, Y+11	; 0x0b
    40dc:	cc 01       	movw	r24, r24
    40de:	a0 e0       	ldi	r26, 0x00	; 0
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	07 2e       	mov	r0, r23
    40e4:	7b e0       	ldi	r23, 0x0B	; 11
    40e6:	88 0f       	add	r24, r24
    40e8:	99 1f       	adc	r25, r25
    40ea:	aa 1f       	adc	r26, r26
    40ec:	bb 1f       	adc	r27, r27
    40ee:	7a 95       	dec	r23
    40f0:	d1 f7       	brne	.-12     	; 0x40e6 <StepperMotor_u8MoveMotor+0x3a>
    40f2:	70 2d       	mov	r23, r0
    40f4:	20 ea       	ldi	r18, 0xA0	; 160
    40f6:	35 e0       	ldi	r19, 0x05	; 5
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    4104:	da 01       	movw	r26, r20
    4106:	c9 01       	movw	r24, r18
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	9e 83       	std	Y+6, r25	; 0x06
    410c:	af 83       	std	Y+7, r26	; 0x07
    410e:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 iter = 0; iter < maxIter; iter++)
    4110:	19 82       	std	Y+1, r1	; 0x01
    4112:	1a 82       	std	Y+2, r1	; 0x02
    4114:	1b 82       	std	Y+3, r1	; 0x03
    4116:	1c 82       	std	Y+4, r1	; 0x04
    4118:	87 c0       	rjmp	.+270    	; 0x4228 <StepperMotor_u8MoveMotor+0x17c>
	{
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN0:StepperMotor_u8_PIN3,DIO_u8_HIGH);
    411a:	89 85       	ldd	r24, Y+9	; 0x09
    411c:	88 23       	and	r24, r24
    411e:	11 f0       	breq	.+4      	; 0x4124 <StepperMotor_u8MoveMotor+0x78>
    4120:	1b 8a       	std	Y+19, r1	; 0x13
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <StepperMotor_u8MoveMotor+0x7c>
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	8b 8b       	std	Y+19, r24	; 0x13
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	6b 89       	ldd	r22, Y+19	; 0x13
    412c:	41 e0       	ldi	r20, 0x01	; 1
    412e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		delay_ms(10);
    4132:	6a e0       	ldi	r22, 0x0A	; 10
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN0:StepperMotor_u8_PIN3,DIO_u8_LOW);
    413e:	89 85       	ldd	r24, Y+9	; 0x09
    4140:	88 23       	and	r24, r24
    4142:	11 f0       	breq	.+4      	; 0x4148 <StepperMotor_u8MoveMotor+0x9c>
    4144:	1a 8a       	std	Y+18, r1	; 0x12
    4146:	02 c0       	rjmp	.+4      	; 0x414c <StepperMotor_u8MoveMotor+0xa0>
    4148:	83 e0       	ldi	r24, 0x03	; 3
    414a:	8a 8b       	std	Y+18, r24	; 0x12
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	6a 89       	ldd	r22, Y+18	; 0x12
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN1:StepperMotor_u8_PIN2,DIO_u8_HIGH);
    4156:	89 85       	ldd	r24, Y+9	; 0x09
    4158:	88 23       	and	r24, r24
    415a:	19 f0       	breq	.+6      	; 0x4162 <StepperMotor_u8MoveMotor+0xb6>
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	89 8b       	std	Y+17, r24	; 0x11
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <StepperMotor_u8MoveMotor+0xba>
    4162:	82 e0       	ldi	r24, 0x02	; 2
    4164:	89 8b       	std	Y+17, r24	; 0x11
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	69 89       	ldd	r22, Y+17	; 0x11
    416a:	41 e0       	ldi	r20, 0x01	; 1
    416c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		delay_ms(10);
    4170:	6a e0       	ldi	r22, 0x0A	; 10
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN1:StepperMotor_u8_PIN2,DIO_u8_LOW);
    417c:	89 85       	ldd	r24, Y+9	; 0x09
    417e:	88 23       	and	r24, r24
    4180:	19 f0       	breq	.+6      	; 0x4188 <StepperMotor_u8MoveMotor+0xdc>
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	88 8b       	std	Y+16, r24	; 0x10
    4186:	02 c0       	rjmp	.+4      	; 0x418c <StepperMotor_u8MoveMotor+0xe0>
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	88 8b       	std	Y+16, r24	; 0x10
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	68 89       	ldd	r22, Y+16	; 0x10
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN2:StepperMotor_u8_PIN1,DIO_u8_HIGH);
    4196:	89 85       	ldd	r24, Y+9	; 0x09
    4198:	88 23       	and	r24, r24
    419a:	19 f0       	breq	.+6      	; 0x41a2 <StepperMotor_u8MoveMotor+0xf6>
    419c:	82 e0       	ldi	r24, 0x02	; 2
    419e:	8f 87       	std	Y+15, r24	; 0x0f
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <StepperMotor_u8MoveMotor+0xfa>
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	8f 87       	std	Y+15, r24	; 0x0f
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    41aa:	41 e0       	ldi	r20, 0x01	; 1
    41ac:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		delay_ms(10);
    41b0:	6a e0       	ldi	r22, 0x0A	; 10
    41b2:	70 e0       	ldi	r23, 0x00	; 0
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN2:StepperMotor_u8_PIN1,DIO_u8_LOW);
    41bc:	89 85       	ldd	r24, Y+9	; 0x09
    41be:	88 23       	and	r24, r24
    41c0:	19 f0       	breq	.+6      	; 0x41c8 <StepperMotor_u8MoveMotor+0x11c>
    41c2:	82 e0       	ldi	r24, 0x02	; 2
    41c4:	8e 87       	std	Y+14, r24	; 0x0e
    41c6:	02 c0       	rjmp	.+4      	; 0x41cc <StepperMotor_u8MoveMotor+0x120>
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	8e 87       	std	Y+14, r24	; 0x0e
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    41d0:	40 e0       	ldi	r20, 0x00	; 0
    41d2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_HIGH);
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	88 23       	and	r24, r24
    41da:	19 f0       	breq	.+6      	; 0x41e2 <StepperMotor_u8MoveMotor+0x136>
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	8d 87       	std	Y+13, r24	; 0x0d
    41e0:	01 c0       	rjmp	.+2      	; 0x41e4 <StepperMotor_u8MoveMotor+0x138>
    41e2:	1d 86       	std	Y+13, r1	; 0x0d
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    41e8:	41 e0       	ldi	r20, 0x01	; 1
    41ea:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		delay_ms(10);
    41ee:	6a e0       	ldi	r22, 0x0A	; 10
    41f0:	70 e0       	ldi	r23, 0x00	; 0
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_LOW);
    41fa:	89 85       	ldd	r24, Y+9	; 0x09
    41fc:	88 23       	and	r24, r24
    41fe:	19 f0       	breq	.+6      	; 0x4206 <StepperMotor_u8MoveMotor+0x15a>
    4200:	83 e0       	ldi	r24, 0x03	; 3
    4202:	8c 87       	std	Y+12, r24	; 0x0c
    4204:	01 c0       	rjmp	.+2      	; 0x4208 <StepperMotor_u8MoveMotor+0x15c>
    4206:	1c 86       	std	Y+12, r1	; 0x0c
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	6c 85       	ldd	r22, Y+12	; 0x0c
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	{
		return StepperMotor_u8_Error;
	}

	u32 maxIter = (((2048ul*angle)/360)/4);
	for(u32 iter = 0; iter < maxIter; iter++)
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	9a 81       	ldd	r25, Y+2	; 0x02
    4216:	ab 81       	ldd	r26, Y+3	; 0x03
    4218:	bc 81       	ldd	r27, Y+4	; 0x04
    421a:	01 96       	adiw	r24, 0x01	; 1
    421c:	a1 1d       	adc	r26, r1
    421e:	b1 1d       	adc	r27, r1
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	ab 83       	std	Y+3, r26	; 0x03
    4226:	bc 83       	std	Y+4, r27	; 0x04
    4228:	29 81       	ldd	r18, Y+1	; 0x01
    422a:	3a 81       	ldd	r19, Y+2	; 0x02
    422c:	4b 81       	ldd	r20, Y+3	; 0x03
    422e:	5c 81       	ldd	r21, Y+4	; 0x04
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	9e 81       	ldd	r25, Y+6	; 0x06
    4234:	af 81       	ldd	r26, Y+7	; 0x07
    4236:	b8 85       	ldd	r27, Y+8	; 0x08
    4238:	28 17       	cp	r18, r24
    423a:	39 07       	cpc	r19, r25
    423c:	4a 07       	cpc	r20, r26
    423e:	5b 07       	cpc	r21, r27
    4240:	08 f4       	brcc	.+2      	; 0x4244 <StepperMotor_u8MoveMotor+0x198>
    4242:	6b cf       	rjmp	.-298    	; 0x411a <StepperMotor_u8MoveMotor+0x6e>
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_HIGH);
		delay_ms(10);
		DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_LOW);
	}

	return StepperMotor_u8_Correct;
    4244:	1c 8a       	std	Y+20, r1	; 0x14
    4246:	8c 89       	ldd	r24, Y+20	; 0x14
}
    4248:	64 96       	adiw	r28, 0x14	; 20
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	cf 91       	pop	r28
    4256:	df 91       	pop	r29
    4258:	08 95       	ret

0000425a <StepperMotor_u8MoveMotorSteps>:

u8 StepperMotor_u8MoveMotorSteps(u8 direction, u32 steps)
{
    425a:	df 93       	push	r29
    425c:	cf 93       	push	r28
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	66 97       	sbiw	r28, 0x16	; 22
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	89 87       	std	Y+9, r24	; 0x09
    4270:	4a 87       	std	Y+10, r20	; 0x0a
    4272:	5b 87       	std	Y+11, r21	; 0x0b
    4274:	6c 87       	std	Y+12, r22	; 0x0c
    4276:	7d 87       	std	Y+13, r23	; 0x0d
	if((direction != 0) &&(direction != 1))
    4278:	89 85       	ldd	r24, Y+9	; 0x09
    427a:	88 23       	and	r24, r24
    427c:	31 f0       	breq	.+12     	; 0x428a <StepperMotor_u8MoveMotorSteps+0x30>
    427e:	89 85       	ldd	r24, Y+9	; 0x09
    4280:	81 30       	cpi	r24, 0x01	; 1
    4282:	19 f0       	breq	.+6      	; 0x428a <StepperMotor_u8MoveMotorSteps+0x30>
		{
			return StepperMotor_u8_Error;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	8e 8b       	std	Y+22, r24	; 0x16
    4288:	ab c0       	rjmp	.+342    	; 0x43e0 <StepperMotor_u8MoveMotorSteps+0x186>
		}

		u32 maxIter = steps/4;
    428a:	8a 85       	ldd	r24, Y+10	; 0x0a
    428c:	9b 85       	ldd	r25, Y+11	; 0x0b
    428e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4290:	bd 85       	ldd	r27, Y+13	; 0x0d
    4292:	b6 95       	lsr	r27
    4294:	a7 95       	ror	r26
    4296:	97 95       	ror	r25
    4298:	87 95       	ror	r24
    429a:	b6 95       	lsr	r27
    429c:	a7 95       	ror	r26
    429e:	97 95       	ror	r25
    42a0:	87 95       	ror	r24
    42a2:	8d 83       	std	Y+5, r24	; 0x05
    42a4:	9e 83       	std	Y+6, r25	; 0x06
    42a6:	af 83       	std	Y+7, r26	; 0x07
    42a8:	b8 87       	std	Y+8, r27	; 0x08
		for(u32 iter = 0; iter < maxIter; iter++)
    42aa:	19 82       	std	Y+1, r1	; 0x01
    42ac:	1a 82       	std	Y+2, r1	; 0x02
    42ae:	1b 82       	std	Y+3, r1	; 0x03
    42b0:	1c 82       	std	Y+4, r1	; 0x04
    42b2:	87 c0       	rjmp	.+270    	; 0x43c2 <StepperMotor_u8MoveMotorSteps+0x168>
		{
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN0:StepperMotor_u8_PIN3,DIO_u8_HIGH);
    42b4:	89 85       	ldd	r24, Y+9	; 0x09
    42b6:	88 23       	and	r24, r24
    42b8:	11 f0       	breq	.+4      	; 0x42be <StepperMotor_u8MoveMotorSteps+0x64>
    42ba:	1d 8a       	std	Y+21, r1	; 0x15
    42bc:	02 c0       	rjmp	.+4      	; 0x42c2 <StepperMotor_u8MoveMotorSteps+0x68>
    42be:	83 e0       	ldi	r24, 0x03	; 3
    42c0:	8d 8b       	std	Y+21, r24	; 0x15
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	6d 89       	ldd	r22, Y+21	; 0x15
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			delay_ms(10);
    42cc:	6a e0       	ldi	r22, 0x0A	; 10
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN0:StepperMotor_u8_PIN3,DIO_u8_LOW);
    42d8:	89 85       	ldd	r24, Y+9	; 0x09
    42da:	88 23       	and	r24, r24
    42dc:	11 f0       	breq	.+4      	; 0x42e2 <StepperMotor_u8MoveMotorSteps+0x88>
    42de:	1c 8a       	std	Y+20, r1	; 0x14
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <StepperMotor_u8MoveMotorSteps+0x8c>
    42e2:	83 e0       	ldi	r24, 0x03	; 3
    42e4:	8c 8b       	std	Y+20, r24	; 0x14
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	6c 89       	ldd	r22, Y+20	; 0x14
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN1:StepperMotor_u8_PIN2,DIO_u8_HIGH);
    42f0:	89 85       	ldd	r24, Y+9	; 0x09
    42f2:	88 23       	and	r24, r24
    42f4:	19 f0       	breq	.+6      	; 0x42fc <StepperMotor_u8MoveMotorSteps+0xa2>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	8b 8b       	std	Y+19, r24	; 0x13
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <StepperMotor_u8MoveMotorSteps+0xa6>
    42fc:	82 e0       	ldi	r24, 0x02	; 2
    42fe:	8b 8b       	std	Y+19, r24	; 0x13
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	6b 89       	ldd	r22, Y+19	; 0x13
    4304:	41 e0       	ldi	r20, 0x01	; 1
    4306:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			delay_ms(10);
    430a:	6a e0       	ldi	r22, 0x0A	; 10
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN1:StepperMotor_u8_PIN2,DIO_u8_LOW);
    4316:	89 85       	ldd	r24, Y+9	; 0x09
    4318:	88 23       	and	r24, r24
    431a:	19 f0       	breq	.+6      	; 0x4322 <StepperMotor_u8MoveMotorSteps+0xc8>
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	8a 8b       	std	Y+18, r24	; 0x12
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <StepperMotor_u8MoveMotorSteps+0xcc>
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	8a 8b       	std	Y+18, r24	; 0x12
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	6a 89       	ldd	r22, Y+18	; 0x12
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN2:StepperMotor_u8_PIN1,DIO_u8_HIGH);
    4330:	89 85       	ldd	r24, Y+9	; 0x09
    4332:	88 23       	and	r24, r24
    4334:	19 f0       	breq	.+6      	; 0x433c <StepperMotor_u8MoveMotorSteps+0xe2>
    4336:	82 e0       	ldi	r24, 0x02	; 2
    4338:	89 8b       	std	Y+17, r24	; 0x11
    433a:	02 c0       	rjmp	.+4      	; 0x4340 <StepperMotor_u8MoveMotorSteps+0xe6>
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	89 8b       	std	Y+17, r24	; 0x11
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	69 89       	ldd	r22, Y+17	; 0x11
    4344:	41 e0       	ldi	r20, 0x01	; 1
    4346:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			delay_ms(10);
    434a:	6a e0       	ldi	r22, 0x0A	; 10
    434c:	70 e0       	ldi	r23, 0x00	; 0
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN2:StepperMotor_u8_PIN1,DIO_u8_LOW);
    4356:	89 85       	ldd	r24, Y+9	; 0x09
    4358:	88 23       	and	r24, r24
    435a:	19 f0       	breq	.+6      	; 0x4362 <StepperMotor_u8MoveMotorSteps+0x108>
    435c:	82 e0       	ldi	r24, 0x02	; 2
    435e:	88 8b       	std	Y+16, r24	; 0x10
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <StepperMotor_u8MoveMotorSteps+0x10c>
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	88 8b       	std	Y+16, r24	; 0x10
    4366:	80 e0       	ldi	r24, 0x00	; 0
    4368:	68 89       	ldd	r22, Y+16	; 0x10
    436a:	40 e0       	ldi	r20, 0x00	; 0
    436c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_HIGH);
    4370:	89 85       	ldd	r24, Y+9	; 0x09
    4372:	88 23       	and	r24, r24
    4374:	19 f0       	breq	.+6      	; 0x437c <StepperMotor_u8MoveMotorSteps+0x122>
    4376:	83 e0       	ldi	r24, 0x03	; 3
    4378:	8f 87       	std	Y+15, r24	; 0x0f
    437a:	01 c0       	rjmp	.+2      	; 0x437e <StepperMotor_u8MoveMotorSteps+0x124>
    437c:	1f 86       	std	Y+15, r1	; 0x0f
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	6f 85       	ldd	r22, Y+15	; 0x0f
    4382:	41 e0       	ldi	r20, 0x01	; 1
    4384:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			delay_ms(10);
    4388:	6a e0       	ldi	r22, 0x0A	; 10
    438a:	70 e0       	ldi	r23, 0x00	; 0
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_LOW);
    4394:	89 85       	ldd	r24, Y+9	; 0x09
    4396:	88 23       	and	r24, r24
    4398:	19 f0       	breq	.+6      	; 0x43a0 <StepperMotor_u8MoveMotorSteps+0x146>
    439a:	83 e0       	ldi	r24, 0x03	; 3
    439c:	8e 87       	std	Y+14, r24	; 0x0e
    439e:	01 c0       	rjmp	.+2      	; 0x43a2 <StepperMotor_u8MoveMotorSteps+0x148>
    43a0:	1e 86       	std	Y+14, r1	; 0x0e
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	6e 85       	ldd	r22, Y+14	; 0x0e
    43a6:	40 e0       	ldi	r20, 0x00	; 0
    43a8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		{
			return StepperMotor_u8_Error;
		}

		u32 maxIter = steps/4;
		for(u32 iter = 0; iter < maxIter; iter++)
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	9a 81       	ldd	r25, Y+2	; 0x02
    43b0:	ab 81       	ldd	r26, Y+3	; 0x03
    43b2:	bc 81       	ldd	r27, Y+4	; 0x04
    43b4:	01 96       	adiw	r24, 0x01	; 1
    43b6:	a1 1d       	adc	r26, r1
    43b8:	b1 1d       	adc	r27, r1
    43ba:	89 83       	std	Y+1, r24	; 0x01
    43bc:	9a 83       	std	Y+2, r25	; 0x02
    43be:	ab 83       	std	Y+3, r26	; 0x03
    43c0:	bc 83       	std	Y+4, r27	; 0x04
    43c2:	29 81       	ldd	r18, Y+1	; 0x01
    43c4:	3a 81       	ldd	r19, Y+2	; 0x02
    43c6:	4b 81       	ldd	r20, Y+3	; 0x03
    43c8:	5c 81       	ldd	r21, Y+4	; 0x04
    43ca:	8d 81       	ldd	r24, Y+5	; 0x05
    43cc:	9e 81       	ldd	r25, Y+6	; 0x06
    43ce:	af 81       	ldd	r26, Y+7	; 0x07
    43d0:	b8 85       	ldd	r27, Y+8	; 0x08
    43d2:	28 17       	cp	r18, r24
    43d4:	39 07       	cpc	r19, r25
    43d6:	4a 07       	cpc	r20, r26
    43d8:	5b 07       	cpc	r21, r27
    43da:	08 f4       	brcc	.+2      	; 0x43de <StepperMotor_u8MoveMotorSteps+0x184>
    43dc:	6b cf       	rjmp	.-298    	; 0x42b4 <StepperMotor_u8MoveMotorSteps+0x5a>
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_HIGH);
			delay_ms(10);
			DIO_u8SetPinValue(StepperMotor_u8_PORT,(direction)?StepperMotor_u8_PIN3:StepperMotor_u8_PIN0,DIO_u8_LOW);
		}

		return StepperMotor_u8_Correct;
    43de:	1e 8a       	std	Y+22, r1	; 0x16
    43e0:	8e 89       	ldd	r24, Y+22	; 0x16
}
    43e2:	66 96       	adiw	r28, 0x16	; 22
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
    43ee:	cf 91       	pop	r28
    43f0:	df 91       	pop	r29
    43f2:	08 95       	ret

000043f4 <SSD_voidINIT>:
    {1,1,1,0,0,1,0}, //7
    {1,1,1,1,1,1,1}, //8
    {1,1,1,1,0,1,1}};

void SSD_voidINIT(void)
{
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(SSD_u8_INITIAL_PORT,DIO_u8_OUTPUT);
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	61 e0       	ldi	r22, 0x01	; 1
    4400:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SSD_u8_INITIAL_PORT,!DIO_u8_LOW);
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	61 e0       	ldi	r22, 0x01	; 1
    4408:	0e 94 18 1b 	call	0x3630	; 0x3630 <DIO_u8SetPortValue>
}
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <SSD_u8Write>:


u8 SSD_u8Write(u8 num)
{
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	00 d0       	rcall	.+0      	; 0x4418 <SSD_u8Write+0x6>
    4418:	00 d0       	rcall	.+0      	; 0x441a <SSD_u8Write+0x8>
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
    441e:	8a 83       	std	Y+2, r24	; 0x02
	if(num > 9)
    4420:	8a 81       	ldd	r24, Y+2	; 0x02
    4422:	8a 30       	cpi	r24, 0x0A	; 10
    4424:	18 f0       	brcs	.+6      	; 0x442c <SSD_u8Write+0x1a>
	{
		return 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	8c 83       	std	Y+4, r24	; 0x04
    442a:	28 c0       	rjmp	.+80     	; 0x447c <SSD_u8Write+0x6a>
	}

	for(u8 DIO_u8_PINi = 0; DIO_u8_PINi < 7;DIO_u8_PINi++)
    442c:	19 82       	std	Y+1, r1	; 0x01
    442e:	22 c0       	rjmp	.+68     	; 0x4474 <SSD_u8Write+0x62>
	{
		DIO_u8SetPinValue(SSD_u8_INITIAL_PORT,DIO_u8_PINi,!SSD_Digits[num][DIO_u8_PINi]);
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	28 2f       	mov	r18, r24
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	48 2f       	mov	r20, r24
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	c9 01       	movw	r24, r18
    443e:	88 0f       	add	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	88 0f       	add	r24, r24
    4444:	99 1f       	adc	r25, r25
    4446:	88 0f       	add	r24, r24
    4448:	99 1f       	adc	r25, r25
    444a:	82 1b       	sub	r24, r18
    444c:	93 0b       	sbc	r25, r19
    444e:	84 0f       	add	r24, r20
    4450:	95 1f       	adc	r25, r21
    4452:	fc 01       	movw	r30, r24
    4454:	e8 59       	subi	r30, 0x98	; 152
    4456:	fe 4f       	sbci	r31, 0xFE	; 254
    4458:	80 81       	ld	r24, Z
    445a:	1b 82       	std	Y+3, r1	; 0x03
    445c:	88 23       	and	r24, r24
    445e:	11 f4       	brne	.+4      	; 0x4464 <SSD_u8Write+0x52>
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	8b 83       	std	Y+3, r24	; 0x03
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	69 81       	ldd	r22, Y+1	; 0x01
    4468:	4b 81       	ldd	r20, Y+3	; 0x03
    446a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	if(num > 9)
	{
		return 1;
	}

	for(u8 DIO_u8_PINi = 0; DIO_u8_PINi < 7;DIO_u8_PINi++)
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	8f 5f       	subi	r24, 0xFF	; 255
    4472:	89 83       	std	Y+1, r24	; 0x01
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	87 30       	cpi	r24, 0x07	; 7
    4478:	d8 f2       	brcs	.-74     	; 0x4430 <SSD_u8Write+0x1e>
	{
		DIO_u8SetPinValue(SSD_u8_INITIAL_PORT,DIO_u8_PINi,!SSD_Digits[num][DIO_u8_PINi]);
	}

	return 0;
    447a:	1c 82       	std	Y+4, r1	; 0x04
    447c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	08 95       	ret

0000448c <SSD_u8Enable>:

u8 SSD_u8Enable()
{
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(SSD_u8_INITIAL_PORT,SSD_u8_INITIAL_ENABLE_PIN,!DIO_u8_LOW);
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	67 e0       	ldi	r22, 0x07	; 7
    4498:	41 e0       	ldi	r20, 0x01	; 1
    449a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

	return 0;
    449e:	80 e0       	ldi	r24, 0x00	; 0
}
    44a0:	cf 91       	pop	r28
    44a2:	df 91       	pop	r29
    44a4:	08 95       	ret

000044a6 <SSD_u8Disable>:

u8 SSD_u8Disable()
{
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(SSD_u8_INITIAL_PORT,SSD_u8_INITIAL_ENABLE_PIN,!DIO_u8_HIGH);
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	67 e0       	ldi	r22, 0x07	; 7
    44b2:	40 e0       	ldi	r20, 0x00	; 0
    44b4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

	return 0;
    44b8:	80 e0       	ldi	r24, 0x00	; 0
}
    44ba:	cf 91       	pop	r28
    44bc:	df 91       	pop	r29
    44be:	08 95       	ret

000044c0 <SERVO_voidInit>:

//HAL
#include "HAL/SERVO/SERVO_interface.h"

void SERVO_voidInit()
{
    44c0:	df 93       	push	r29
    44c2:	cf 93       	push	r28
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
	 * period = 32.7 ms
	 */


//timer1 init
TIM1_voidPWMInit();
    44c8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TIM1_voidPWMInit>

//clear on cmp match
TIM1_voidSetOutputCompareMode(TIM1_u8_TIM1A,TIM1_u8_OC1_CLEAR);
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	62 e0       	ldi	r22, 0x02	; 2
    44d0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <TIM1_voidSetOutputCompareMode>

//angle 90 at init
SERVO_voidMoveAngle(90);
    44d4:	8a e5       	ldi	r24, 0x5A	; 90
    44d6:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>


}
    44da:	cf 91       	pop	r28
    44dc:	df 91       	pop	r29
    44de:	08 95       	ret

000044e0 <SERVO_voidMoveAngle>:

// function desc:  moves the servo based on given angle
//input: u8 angle deg to move the servo (0 to 180)
// output : realtime movement of the servo connected on timer1 ocr
u8 SERVO_voidMoveAngle(u8 angle)
{
    44e0:	df 93       	push	r29
    44e2:	cf 93       	push	r28
    44e4:	00 d0       	rcall	.+0      	; 0x44e6 <SERVO_voidMoveAngle+0x6>
    44e6:	0f 92       	push	r0
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
    44ec:	8b 83       	std	Y+3, r24	; 0x03
// error check
	u8 localservo_error = SERVO_u8_Angle_excuted;
    44ee:	1a 82       	std	Y+2, r1	; 0x02
	if (angle<0 || angle > 180) localservo_error = SERVO_u8_Angle_Error;
    44f0:	8b 81       	ldd	r24, Y+3	; 0x03
    44f2:	85 3b       	cpi	r24, 0xB5	; 181
    44f4:	10 f0       	brcs	.+4      	; 0x44fa <SERVO_voidMoveAngle+0x1a>
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	8a 83       	std	Y+2, r24	; 0x02


u8 ocrval = ((u8) (12.0 +(( 67.0/180.0 )*angle)));
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	88 2f       	mov	r24, r24
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	aa 27       	eor	r26, r26
    4502:	97 fd       	sbrc	r25, 7
    4504:	a0 95       	com	r26
    4506:	ba 2f       	mov	r27, r26
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	29 ee       	ldi	r18, 0xE9	; 233
    451a:	33 e9       	ldi	r19, 0x93	; 147
    451c:	4e eb       	ldi	r20, 0xBE	; 190
    451e:	5e e3       	ldi	r21, 0x3E	; 62
    4520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	bc 01       	movw	r22, r24
    452a:	cd 01       	movw	r24, r26
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e4       	ldi	r20, 0x40	; 64
    4532:	51 e4       	ldi	r21, 0x41	; 65
    4534:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	89 83       	std	Y+1, r24	; 0x01

//formula to move from 0 to 180;
TIM1_voidSetOCR1A(ocrval);
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	88 2f       	mov	r24, r24
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 73 10 	call	0x20e6	; 0x20e6 <TIM1_voidSetOCR1A>


//return errorstatus
return localservo_error;
    4554:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit()
{
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(LCD_u8_DATA_PORT,DIO_u8_OUTPUT);
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	61 e0       	ldi	r22, 0x01	; 1
    456e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_OUTPUT);
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_OUTPUT);
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	61 e0       	ldi	r22, 0x01	; 1
    4580:	41 e0       	ldi	r20, 0x01	; 1
    4582:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8_Enable_PORT,LCD_u8_Enable_PIN,DIO_u8_OUTPUT);
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	62 e0       	ldi	r22, 0x02	; 2
    458a:	41 e0       	ldi	r20, 0x01	; 1
    458c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	delay_ms(100);
    4590:	64 e6       	ldi	r22, 0x64	; 100
    4592:	70 e0       	ldi	r23, 0x00	; 0
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
	LCD_voidSendInstruction(0b00111100);
    459c:	8c e3       	ldi	r24, 0x3C	; 60
    459e:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
	delay_ms(2);
    45a2:	62 e0       	ldi	r22, 0x02	; 2
    45a4:	70 e0       	ldi	r23, 0x00	; 0
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
	LCD_voidSendInstruction(0b00111100);
    45ae:	8c e3       	ldi	r24, 0x3C	; 60
    45b0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
	delay_ms(2);
    45b4:	62 e0       	ldi	r22, 0x02	; 2
    45b6:	70 e0       	ldi	r23, 0x00	; 0
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
	//0b00001DCB, D:SetDisplay, C: cursor, B: Blinking Cursor
	LCD_voidSendInstruction(0b00001111);
    45c0:	8f e0       	ldi	r24, 0x0F	; 15
    45c2:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
	delay_ms(2);
    45c6:	62 e0       	ldi	r22, 0x02	; 2
    45c8:	70 e0       	ldi	r23, 0x00	; 0
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
	LCD_voidSendInstruction(LCD_u8_ClearDisplay);
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
	delay_ms(2);
    45d8:	62 e0       	ldi	r22, 0x02	; 2
    45da:	70 e0       	ldi	r23, 0x00	; 0
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
	LCD_voidSendInstruction(0b00000110);
    45e4:	86 e0       	ldi	r24, 0x06	; 6
    45e6:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>


}
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	08 95       	ret

000045f0 <LCD_voidSendInstruction>:

void LCD_voidSendInstruction(u8 instruction)
{
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	0f 92       	push	r0
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	60 e0       	ldi	r22, 0x00	; 0
    4600:	40 e0       	ldi	r20, 0x00	; 0
    4602:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	61 e0       	ldi	r22, 0x01	; 1
    460a:	40 e0       	ldi	r20, 0x00	; 0
    460c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_Enable_PORT,LCD_u8_Enable_PIN,DIO_u8_HIGH);
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	62 e0       	ldi	r22, 0x02	; 2
    4614:	41 e0       	ldi	r20, 0x01	; 1
    4616:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_u8_DATA_PORT,instruction);
    461a:	82 e0       	ldi	r24, 0x02	; 2
    461c:	69 81       	ldd	r22, Y+1	; 0x01
    461e:	0e 94 18 1b 	call	0x3630	; 0x3630 <DIO_u8SetPortValue>

	delay_ms(2);
    4622:	62 e0       	ldi	r22, 0x02	; 2
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>

	DIO_u8SetPinValue(LCD_u8_Enable_PORT,LCD_u8_Enable_PIN,DIO_u8_LOW);
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	62 e0       	ldi	r22, 0x02	; 2
    4632:	40 e0       	ldi	r20, 0x00	; 0
    4634:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    4638:	0f 90       	pop	r0
    463a:	cf 91       	pop	r28
    463c:	df 91       	pop	r29
    463e:	08 95       	ret

00004640 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 ch)
{
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	0f 92       	push	r0
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	41 e0       	ldi	r20, 0x01	; 1
    4652:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	61 e0       	ldi	r22, 0x01	; 1
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_Enable_PORT,LCD_u8_Enable_PIN,DIO_u8_HIGH);
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	62 e0       	ldi	r22, 0x02	; 2
    4664:	41 e0       	ldi	r20, 0x01	; 1
    4666:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_u8_DATA_PORT,ch);
    466a:	82 e0       	ldi	r24, 0x02	; 2
    466c:	69 81       	ldd	r22, Y+1	; 0x01
    466e:	0e 94 18 1b 	call	0x3630	; 0x3630 <DIO_u8SetPortValue>

	delay_ms(1);
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>

	DIO_u8SetPinValue(LCD_u8_Enable_PORT,LCD_u8_Enable_PIN,DIO_u8_LOW);
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	62 e0       	ldi	r22, 0x02	; 2
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    4688:	0f 90       	pop	r0
    468a:	cf 91       	pop	r28
    468c:	df 91       	pop	r29
    468e:	08 95       	ret

00004690 <LCD_voidSetPos>:

void LCD_voidSetPos(u8 y,u8 x)
{
    4690:	df 93       	push	r29
    4692:	cf 93       	push	r28
    4694:	00 d0       	rcall	.+0      	; 0x4696 <LCD_voidSetPos+0x6>
    4696:	cd b7       	in	r28, 0x3d	; 61
    4698:	de b7       	in	r29, 0x3e	; 62
    469a:	89 83       	std	Y+1, r24	; 0x01
    469c:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSendInstruction(0x80 + 0x40*y + x);
    469e:	89 81       	ldd	r24, Y+1	; 0x01
    46a0:	88 2f       	mov	r24, r24
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	02 96       	adiw	r24, 0x02	; 2
    46a6:	00 24       	eor	r0, r0
    46a8:	96 95       	lsr	r25
    46aa:	87 95       	ror	r24
    46ac:	07 94       	ror	r0
    46ae:	96 95       	lsr	r25
    46b0:	87 95       	ror	r24
    46b2:	07 94       	ror	r0
    46b4:	98 2f       	mov	r25, r24
    46b6:	80 2d       	mov	r24, r0
    46b8:	98 2f       	mov	r25, r24
    46ba:	8a 81       	ldd	r24, Y+2	; 0x02
    46bc:	89 0f       	add	r24, r25
    46be:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
}
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	08 95       	ret

000046cc <LCD_voidPrintStr>:

void LCD_voidPrintStr(u8* str)
{
    46cc:	df 93       	push	r29
    46ce:	cf 93       	push	r28
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62
    46d4:	27 97       	sbiw	r28, 0x07	; 7
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	9f 83       	std	Y+7, r25	; 0x07
    46e2:	8e 83       	std	Y+6, r24	; 0x06
	u32 i = 0;
    46e4:	1a 82       	std	Y+2, r1	; 0x02
    46e6:	1b 82       	std	Y+3, r1	; 0x03
    46e8:	1c 82       	std	Y+4, r1	; 0x04
    46ea:	1d 82       	std	Y+5, r1	; 0x05
	u8 line = 0; //0:
    46ec:	19 82       	std	Y+1, r1	; 0x01
    46ee:	50 c0       	rjmp	.+160    	; 0x4790 <LCD_voidPrintStr+0xc4>
	while(str[i] != '\0')
	{
		if((i != 0) && (i%16 == 0) && (line == 0))
    46f0:	8a 81       	ldd	r24, Y+2	; 0x02
    46f2:	9b 81       	ldd	r25, Y+3	; 0x03
    46f4:	ac 81       	ldd	r26, Y+4	; 0x04
    46f6:	bd 81       	ldd	r27, Y+5	; 0x05
    46f8:	00 97       	sbiw	r24, 0x00	; 0
    46fa:	a1 05       	cpc	r26, r1
    46fc:	b1 05       	cpc	r27, r1
    46fe:	b1 f0       	breq	.+44     	; 0x472c <LCD_voidPrintStr+0x60>
    4700:	8a 81       	ldd	r24, Y+2	; 0x02
    4702:	9b 81       	ldd	r25, Y+3	; 0x03
    4704:	ac 81       	ldd	r26, Y+4	; 0x04
    4706:	bd 81       	ldd	r27, Y+5	; 0x05
    4708:	8f 70       	andi	r24, 0x0F	; 15
    470a:	90 70       	andi	r25, 0x00	; 0
    470c:	a0 70       	andi	r26, 0x00	; 0
    470e:	b0 70       	andi	r27, 0x00	; 0
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	a1 05       	cpc	r26, r1
    4714:	b1 05       	cpc	r27, r1
    4716:	51 f4       	brne	.+20     	; 0x472c <LCD_voidPrintStr+0x60>
    4718:	89 81       	ldd	r24, Y+1	; 0x01
    471a:	88 23       	and	r24, r24
    471c:	39 f4       	brne	.+14     	; 0x472c <LCD_voidPrintStr+0x60>
		{
			line = 1;
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSetPos(line,0);
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	0e 94 48 23 	call	0x4690	; 0x4690 <LCD_voidSetPos>
    472a:	1d c0       	rjmp	.+58     	; 0x4766 <LCD_voidPrintStr+0x9a>
		}
		else if((i%16 == 0) && (line == 1))
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	9b 81       	ldd	r25, Y+3	; 0x03
    4730:	ac 81       	ldd	r26, Y+4	; 0x04
    4732:	bd 81       	ldd	r27, Y+5	; 0x05
    4734:	8f 70       	andi	r24, 0x0F	; 15
    4736:	90 70       	andi	r25, 0x00	; 0
    4738:	a0 70       	andi	r26, 0x00	; 0
    473a:	b0 70       	andi	r27, 0x00	; 0
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	a1 05       	cpc	r26, r1
    4740:	b1 05       	cpc	r27, r1
    4742:	89 f4       	brne	.+34     	; 0x4766 <LCD_voidPrintStr+0x9a>
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	81 30       	cpi	r24, 0x01	; 1
    4748:	71 f4       	brne	.+28     	; 0x4766 <LCD_voidPrintStr+0x9a>
		{
			delay_ms(4000);
    474a:	60 ea       	ldi	r22, 0xA0	; 160
    474c:	7f e0       	ldi	r23, 0x0F	; 15
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			line = 0;
    4756:	19 82       	std	Y+1, r1	; 0x01
			LCD_voidSendInstruction(LCD_u8_ClearDisplay);
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
			LCD_voidSetPos(line,0);
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	60 e0       	ldi	r22, 0x00	; 0
    4762:	0e 94 48 23 	call	0x4690	; 0x4690 <LCD_voidSetPos>
		}
		LCD_voidWriteChar(str[i]);
    4766:	2a 81       	ldd	r18, Y+2	; 0x02
    4768:	3b 81       	ldd	r19, Y+3	; 0x03
    476a:	8e 81       	ldd	r24, Y+6	; 0x06
    476c:	9f 81       	ldd	r25, Y+7	; 0x07
    476e:	fc 01       	movw	r30, r24
    4770:	e2 0f       	add	r30, r18
    4772:	f3 1f       	adc	r31, r19
    4774:	80 81       	ld	r24, Z
    4776:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
		i++;
    477a:	8a 81       	ldd	r24, Y+2	; 0x02
    477c:	9b 81       	ldd	r25, Y+3	; 0x03
    477e:	ac 81       	ldd	r26, Y+4	; 0x04
    4780:	bd 81       	ldd	r27, Y+5	; 0x05
    4782:	01 96       	adiw	r24, 0x01	; 1
    4784:	a1 1d       	adc	r26, r1
    4786:	b1 1d       	adc	r27, r1
    4788:	8a 83       	std	Y+2, r24	; 0x02
    478a:	9b 83       	std	Y+3, r25	; 0x03
    478c:	ac 83       	std	Y+4, r26	; 0x04
    478e:	bd 83       	std	Y+5, r27	; 0x05

void LCD_voidPrintStr(u8* str)
{
	u32 i = 0;
	u8 line = 0; //0:
	while(str[i] != '\0')
    4790:	2a 81       	ldd	r18, Y+2	; 0x02
    4792:	3b 81       	ldd	r19, Y+3	; 0x03
    4794:	8e 81       	ldd	r24, Y+6	; 0x06
    4796:	9f 81       	ldd	r25, Y+7	; 0x07
    4798:	fc 01       	movw	r30, r24
    479a:	e2 0f       	add	r30, r18
    479c:	f3 1f       	adc	r31, r19
    479e:	80 81       	ld	r24, Z
    47a0:	88 23       	and	r24, r24
    47a2:	09 f0       	breq	.+2      	; 0x47a6 <LCD_voidPrintStr+0xda>
    47a4:	a5 cf       	rjmp	.-182    	; 0x46f0 <LCD_voidPrintStr+0x24>
		}
		LCD_voidWriteChar(str[i]);
		i++;
	}

}
    47a6:	27 96       	adiw	r28, 0x07	; 7
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	cf 91       	pop	r28
    47b4:	df 91       	pop	r29
    47b6:	08 95       	ret

000047b8 <LCD_voidShiftRightDisplay>:


void LCD_voidShiftRightDisplay()
{
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendInstruction(0b00011100);
    47c0:	8c e1       	ldi	r24, 0x1C	; 28
    47c2:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
}
    47c6:	cf 91       	pop	r28
    47c8:	df 91       	pop	r29
    47ca:	08 95       	ret

000047cc <LCD_voidShiftLeftDisplay>:


void LCD_voidShiftLeftDisplay()
{
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendInstruction(0b00011000);
    47d4:	88 e1       	ldi	r24, 0x18	; 24
    47d6:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <LCD_voidSendInstruction>
}
    47da:	cf 91       	pop	r28
    47dc:	df 91       	pop	r29
    47de:	08 95       	ret

000047e0 <LCD_voidWriteInteger>:

void LCD_voidWriteInteger(u32 integer)
{
    47e0:	ef 92       	push	r14
    47e2:	ff 92       	push	r15
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	df 93       	push	r29
    47ea:	cf 93       	push	r28
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
    47f0:	29 97       	sbiw	r28, 0x09	; 9
    47f2:	0f b6       	in	r0, 0x3f	; 63
    47f4:	f8 94       	cli
    47f6:	de bf       	out	0x3e, r29	; 62
    47f8:	0f be       	out	0x3f, r0	; 63
    47fa:	cd bf       	out	0x3d, r28	; 61
    47fc:	6e 83       	std	Y+6, r22	; 0x06
    47fe:	7f 83       	std	Y+7, r23	; 0x07
    4800:	88 87       	std	Y+8, r24	; 0x08
    4802:	99 87       	std	Y+9, r25	; 0x09
	if(integer == 0)
    4804:	8e 81       	ldd	r24, Y+6	; 0x06
    4806:	9f 81       	ldd	r25, Y+7	; 0x07
    4808:	a8 85       	ldd	r26, Y+8	; 0x08
    480a:	b9 85       	ldd	r27, Y+9	; 0x09
    480c:	00 97       	sbiw	r24, 0x00	; 0
    480e:	a1 05       	cpc	r26, r1
    4810:	b1 05       	cpc	r27, r1
    4812:	21 f4       	brne	.+8      	; 0x481c <LCD_voidWriteInteger+0x3c>
	{
		LCD_voidWriteChar('0');
    4814:	80 e3       	ldi	r24, 0x30	; 48
    4816:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
    481a:	74 c0       	rjmp	.+232    	; 0x4904 <LCD_voidWriteInteger+0x124>
		return;
	}

	u8 count  = 0;
    481c:	1d 82       	std	Y+5, r1	; 0x05
	u32 invertedInteger = 0;
    481e:	19 82       	std	Y+1, r1	; 0x01
    4820:	1a 82       	std	Y+2, r1	; 0x02
    4822:	1b 82       	std	Y+3, r1	; 0x03
    4824:	1c 82       	std	Y+4, r1	; 0x04
    4826:	3b c0       	rjmp	.+118    	; 0x489e <LCD_voidWriteInteger+0xbe>
	while(integer != 0)
	{
		invertedInteger = (integer%10) + invertedInteger*10;
    4828:	8e 81       	ldd	r24, Y+6	; 0x06
    482a:	9f 81       	ldd	r25, Y+7	; 0x07
    482c:	a8 85       	ldd	r26, Y+8	; 0x08
    482e:	b9 85       	ldd	r27, Y+9	; 0x09
    4830:	2a e0       	ldi	r18, 0x0A	; 10
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	40 e0       	ldi	r20, 0x00	; 0
    4836:	50 e0       	ldi	r21, 0x00	; 0
    4838:	bc 01       	movw	r22, r24
    483a:	cd 01       	movw	r24, r26
    483c:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	7c 01       	movw	r14, r24
    4846:	8d 01       	movw	r16, r26
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	9a 81       	ldd	r25, Y+2	; 0x02
    484c:	ab 81       	ldd	r26, Y+3	; 0x03
    484e:	bc 81       	ldd	r27, Y+4	; 0x04
    4850:	2a e0       	ldi	r18, 0x0A	; 10
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e0       	ldi	r20, 0x00	; 0
    4856:	50 e0       	ldi	r21, 0x00	; 0
    4858:	bc 01       	movw	r22, r24
    485a:	cd 01       	movw	r24, r26
    485c:	0e 94 0a 30 	call	0x6014	; 0x6014 <__mulsi3>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	8e 0d       	add	r24, r14
    4866:	9f 1d       	adc	r25, r15
    4868:	a0 1f       	adc	r26, r16
    486a:	b1 1f       	adc	r27, r17
    486c:	89 83       	std	Y+1, r24	; 0x01
    486e:	9a 83       	std	Y+2, r25	; 0x02
    4870:	ab 83       	std	Y+3, r26	; 0x03
    4872:	bc 83       	std	Y+4, r27	; 0x04
		integer /= 10;
    4874:	8e 81       	ldd	r24, Y+6	; 0x06
    4876:	9f 81       	ldd	r25, Y+7	; 0x07
    4878:	a8 85       	ldd	r26, Y+8	; 0x08
    487a:	b9 85       	ldd	r27, Y+9	; 0x09
    487c:	2a e0       	ldi	r18, 0x0A	; 10
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e0       	ldi	r20, 0x00	; 0
    4882:	50 e0       	ldi	r21, 0x00	; 0
    4884:	bc 01       	movw	r22, r24
    4886:	cd 01       	movw	r24, r26
    4888:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    488c:	da 01       	movw	r26, r20
    488e:	c9 01       	movw	r24, r18
    4890:	8e 83       	std	Y+6, r24	; 0x06
    4892:	9f 83       	std	Y+7, r25	; 0x07
    4894:	a8 87       	std	Y+8, r26	; 0x08
    4896:	b9 87       	std	Y+9, r27	; 0x09
		count++;
    4898:	8d 81       	ldd	r24, Y+5	; 0x05
    489a:	8f 5f       	subi	r24, 0xFF	; 255
    489c:	8d 83       	std	Y+5, r24	; 0x05
		return;
	}

	u8 count  = 0;
	u32 invertedInteger = 0;
	while(integer != 0)
    489e:	8e 81       	ldd	r24, Y+6	; 0x06
    48a0:	9f 81       	ldd	r25, Y+7	; 0x07
    48a2:	a8 85       	ldd	r26, Y+8	; 0x08
    48a4:	b9 85       	ldd	r27, Y+9	; 0x09
    48a6:	00 97       	sbiw	r24, 0x00	; 0
    48a8:	a1 05       	cpc	r26, r1
    48aa:	b1 05       	cpc	r27, r1
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <LCD_voidWriteInteger+0xd0>
    48ae:	bc cf       	rjmp	.-136    	; 0x4828 <LCD_voidWriteInteger+0x48>
    48b0:	26 c0       	rjmp	.+76     	; 0x48fe <LCD_voidWriteInteger+0x11e>
		count++;
	}

	while(count != 0)
	{
		LCD_voidWriteChar(invertedInteger%10 + 48);
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	9a 81       	ldd	r25, Y+2	; 0x02
    48b6:	ab 81       	ldd	r26, Y+3	; 0x03
    48b8:	bc 81       	ldd	r27, Y+4	; 0x04
    48ba:	2a e0       	ldi	r18, 0x0A	; 10
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	40 e0       	ldi	r20, 0x00	; 0
    48c0:	50 e0       	ldi	r21, 0x00	; 0
    48c2:	bc 01       	movw	r22, r24
    48c4:	cd 01       	movw	r24, r26
    48c6:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	80 5d       	subi	r24, 0xD0	; 208
    48d0:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
		invertedInteger /=10;
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	ab 81       	ldd	r26, Y+3	; 0x03
    48da:	bc 81       	ldd	r27, Y+4	; 0x04
    48dc:	2a e0       	ldi	r18, 0x0A	; 10
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	40 e0       	ldi	r20, 0x00	; 0
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	bc 01       	movw	r22, r24
    48e6:	cd 01       	movw	r24, r26
    48e8:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    48ec:	da 01       	movw	r26, r20
    48ee:	c9 01       	movw	r24, r18
    48f0:	89 83       	std	Y+1, r24	; 0x01
    48f2:	9a 83       	std	Y+2, r25	; 0x02
    48f4:	ab 83       	std	Y+3, r26	; 0x03
    48f6:	bc 83       	std	Y+4, r27	; 0x04
		count--;
    48f8:	8d 81       	ldd	r24, Y+5	; 0x05
    48fa:	81 50       	subi	r24, 0x01	; 1
    48fc:	8d 83       	std	Y+5, r24	; 0x05
		invertedInteger = (integer%10) + invertedInteger*10;
		integer /= 10;
		count++;
	}

	while(count != 0)
    48fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4900:	88 23       	and	r24, r24
    4902:	b9 f6       	brne	.-82     	; 0x48b2 <LCD_voidWriteInteger+0xd2>
	{
		LCD_voidWriteChar(invertedInteger%10 + 48);
		invertedInteger /=10;
		count--;
	}
}
    4904:	29 96       	adiw	r28, 0x09	; 9
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	08 95       	ret

0000491e <LCD_voidWriteFraction>:

void LCD_voidWriteFraction(u32 frac)
{
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	df 93       	push	r29
    4928:	cf 93       	push	r28
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	2a 97       	sbiw	r28, 0x0a	; 10
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	de bf       	out	0x3e, r29	; 62
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	cd bf       	out	0x3d, r28	; 61
    493a:	6f 83       	std	Y+7, r22	; 0x07
    493c:	78 87       	std	Y+8, r23	; 0x08
    493e:	89 87       	std	Y+9, r24	; 0x09
    4940:	9a 87       	std	Y+10, r25	; 0x0a
	u8 count  = 0;
    4942:	1e 82       	std	Y+6, r1	; 0x06
	u32 invertedFrac = 0;
    4944:	1a 82       	std	Y+2, r1	; 0x02
    4946:	1b 82       	std	Y+3, r1	; 0x03
    4948:	1c 82       	std	Y+4, r1	; 0x04
    494a:	1d 82       	std	Y+5, r1	; 0x05
    494c:	3b c0       	rjmp	.+118    	; 0x49c4 <LCD_voidWriteFraction+0xa6>
	while(frac != 0)
	{
		invertedFrac = (frac%10) + invertedFrac*10;
    494e:	8f 81       	ldd	r24, Y+7	; 0x07
    4950:	98 85       	ldd	r25, Y+8	; 0x08
    4952:	a9 85       	ldd	r26, Y+9	; 0x09
    4954:	ba 85       	ldd	r27, Y+10	; 0x0a
    4956:	2a e0       	ldi	r18, 0x0A	; 10
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e0       	ldi	r20, 0x00	; 0
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	7c 01       	movw	r14, r24
    496c:	8d 01       	movw	r16, r26
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	9b 81       	ldd	r25, Y+3	; 0x03
    4972:	ac 81       	ldd	r26, Y+4	; 0x04
    4974:	bd 81       	ldd	r27, Y+5	; 0x05
    4976:	2a e0       	ldi	r18, 0x0A	; 10
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e0       	ldi	r20, 0x00	; 0
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	bc 01       	movw	r22, r24
    4980:	cd 01       	movw	r24, r26
    4982:	0e 94 0a 30 	call	0x6014	; 0x6014 <__mulsi3>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	8e 0d       	add	r24, r14
    498c:	9f 1d       	adc	r25, r15
    498e:	a0 1f       	adc	r26, r16
    4990:	b1 1f       	adc	r27, r17
    4992:	8a 83       	std	Y+2, r24	; 0x02
    4994:	9b 83       	std	Y+3, r25	; 0x03
    4996:	ac 83       	std	Y+4, r26	; 0x04
    4998:	bd 83       	std	Y+5, r27	; 0x05
		frac /= 10;
    499a:	8f 81       	ldd	r24, Y+7	; 0x07
    499c:	98 85       	ldd	r25, Y+8	; 0x08
    499e:	a9 85       	ldd	r26, Y+9	; 0x09
    49a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    49a2:	2a e0       	ldi	r18, 0x0A	; 10
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	40 e0       	ldi	r20, 0x00	; 0
    49a8:	50 e0       	ldi	r21, 0x00	; 0
    49aa:	bc 01       	movw	r22, r24
    49ac:	cd 01       	movw	r24, r26
    49ae:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    49b2:	da 01       	movw	r26, r20
    49b4:	c9 01       	movw	r24, r18
    49b6:	8f 83       	std	Y+7, r24	; 0x07
    49b8:	98 87       	std	Y+8, r25	; 0x08
    49ba:	a9 87       	std	Y+9, r26	; 0x09
    49bc:	ba 87       	std	Y+10, r27	; 0x0a
		count++;
    49be:	8e 81       	ldd	r24, Y+6	; 0x06
    49c0:	8f 5f       	subi	r24, 0xFF	; 255
    49c2:	8e 83       	std	Y+6, r24	; 0x06

void LCD_voidWriteFraction(u32 frac)
{
	u8 count  = 0;
	u32 invertedFrac = 0;
	while(frac != 0)
    49c4:	8f 81       	ldd	r24, Y+7	; 0x07
    49c6:	98 85       	ldd	r25, Y+8	; 0x08
    49c8:	a9 85       	ldd	r26, Y+9	; 0x09
    49ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	a1 05       	cpc	r26, r1
    49d0:	b1 05       	cpc	r27, r1
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <LCD_voidWriteFraction+0xb8>
    49d4:	bc cf       	rjmp	.-136    	; 0x494e <LCD_voidWriteFraction+0x30>
		invertedFrac = (frac%10) + invertedFrac*10;
		frac /= 10;
		count++;
	}

	u8 zerosToPrint = LCD_u8_MAX_FRACTION_DIGITS - count;
    49d6:	83 e0       	ldi	r24, 0x03	; 3
    49d8:	9e 81       	ldd	r25, Y+6	; 0x06
    49da:	89 1b       	sub	r24, r25
    49dc:	89 83       	std	Y+1, r24	; 0x01
    49de:	06 c0       	rjmp	.+12     	; 0x49ec <LCD_voidWriteFraction+0xce>
	while(zerosToPrint)
	{
		LCD_voidWriteChar('0');
    49e0:	80 e3       	ldi	r24, 0x30	; 48
    49e2:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
		zerosToPrint--;
    49e6:	89 81       	ldd	r24, Y+1	; 0x01
    49e8:	81 50       	subi	r24, 0x01	; 1
    49ea:	89 83       	std	Y+1, r24	; 0x01
		frac /= 10;
		count++;
	}

	u8 zerosToPrint = LCD_u8_MAX_FRACTION_DIGITS - count;
	while(zerosToPrint)
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	88 23       	and	r24, r24
    49f0:	b9 f7       	brne	.-18     	; 0x49e0 <LCD_voidWriteFraction+0xc2>
    49f2:	26 c0       	rjmp	.+76     	; 0x4a40 <LCD_voidWriteFraction+0x122>
		zerosToPrint--;
	}

	while(count != 0)
	{
		LCD_voidWriteChar(invertedFrac%10 + 48);
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	9b 81       	ldd	r25, Y+3	; 0x03
    49f8:	ac 81       	ldd	r26, Y+4	; 0x04
    49fa:	bd 81       	ldd	r27, Y+5	; 0x05
    49fc:	2a e0       	ldi	r18, 0x0A	; 10
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	40 e0       	ldi	r20, 0x00	; 0
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	80 5d       	subi	r24, 0xD0	; 208
    4a12:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
		invertedFrac /=10;
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1a:	ac 81       	ldd	r26, Y+4	; 0x04
    4a1c:	bd 81       	ldd	r27, Y+5	; 0x05
    4a1e:	2a e0       	ldi	r18, 0x0A	; 10
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e0       	ldi	r20, 0x00	; 0
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	bc 01       	movw	r22, r24
    4a28:	cd 01       	movw	r24, r26
    4a2a:	0e 94 29 30 	call	0x6052	; 0x6052 <__udivmodsi4>
    4a2e:	da 01       	movw	r26, r20
    4a30:	c9 01       	movw	r24, r18
    4a32:	8a 83       	std	Y+2, r24	; 0x02
    4a34:	9b 83       	std	Y+3, r25	; 0x03
    4a36:	ac 83       	std	Y+4, r26	; 0x04
    4a38:	bd 83       	std	Y+5, r27	; 0x05
		count--;
    4a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3c:	81 50       	subi	r24, 0x01	; 1
    4a3e:	8e 83       	std	Y+6, r24	; 0x06
	{
		LCD_voidWriteChar('0');
		zerosToPrint--;
	}

	while(count != 0)
    4a40:	8e 81       	ldd	r24, Y+6	; 0x06
    4a42:	88 23       	and	r24, r24
    4a44:	b9 f6       	brne	.-82     	; 0x49f4 <LCD_voidWriteFraction+0xd6>
	{
		LCD_voidWriteChar(invertedFrac%10 + 48);
		invertedFrac /=10;
		count--;
	}
}
    4a46:	2a 96       	adiw	r28, 0x0a	; 10
    4a48:	0f b6       	in	r0, 0x3f	; 63
    4a4a:	f8 94       	cli
    4a4c:	de bf       	out	0x3e, r29	; 62
    4a4e:	0f be       	out	0x3f, r0	; 63
    4a50:	cd bf       	out	0x3d, r28	; 61
    4a52:	cf 91       	pop	r28
    4a54:	df 91       	pop	r29
    4a56:	1f 91       	pop	r17
    4a58:	0f 91       	pop	r16
    4a5a:	ff 90       	pop	r15
    4a5c:	ef 90       	pop	r14
    4a5e:	08 95       	ret

00004a60 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(f32 num)
{
    4a60:	df 93       	push	r29
    4a62:	cf 93       	push	r28
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	2c 97       	sbiw	r28, 0x0c	; 12
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	f8 94       	cli
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	69 87       	std	Y+9, r22	; 0x09
    4a76:	7a 87       	std	Y+10, r23	; 0x0a
    4a78:	8b 87       	std	Y+11, r24	; 0x0b
    4a7a:	9c 87       	std	Y+12, r25	; 0x0c

	if(num < 0)
    4a7c:	69 85       	ldd	r22, Y+9	; 0x09
    4a7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4a80:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a82:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a90:	88 23       	and	r24, r24
    4a92:	64 f4       	brge	.+24     	; 0x4aac <LCD_voidWriteNumber+0x4c>
	{
		num *= -1;
    4a94:	89 85       	ldd	r24, Y+9	; 0x09
    4a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a98:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a9a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a9c:	b0 58       	subi	r27, 0x80	; 128
    4a9e:	89 87       	std	Y+9, r24	; 0x09
    4aa0:	9a 87       	std	Y+10, r25	; 0x0a
    4aa2:	ab 87       	std	Y+11, r26	; 0x0b
    4aa4:	bc 87       	std	Y+12, r27	; 0x0c
		LCD_voidWriteChar('-');
    4aa6:	8d e2       	ldi	r24, 0x2D	; 45
    4aa8:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
	}

	u32 intNum = (s32)num;
    4aac:	69 85       	ldd	r22, Y+9	; 0x09
    4aae:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ab4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	8d 83       	std	Y+5, r24	; 0x05
    4abe:	9e 83       	std	Y+6, r25	; 0x06
    4ac0:	af 83       	std	Y+7, r26	; 0x07
    4ac2:	b8 87       	std	Y+8, r27	; 0x08
	f32 afterDecimalPoint = num - (f32)intNum;
    4ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    4ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    4ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    4aca:	98 85       	ldd	r25, Y+8	; 0x08
    4acc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4ad0:	9b 01       	movw	r18, r22
    4ad2:	ac 01       	movw	r20, r24
    4ad4:	69 85       	ldd	r22, Y+9	; 0x09
    4ad6:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ada:	9c 85       	ldd	r25, Y+12	; 0x0c
    4adc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	89 83       	std	Y+1, r24	; 0x01
    4ae6:	9a 83       	std	Y+2, r25	; 0x02
    4ae8:	ab 83       	std	Y+3, r26	; 0x03
    4aea:	bc 83       	std	Y+4, r27	; 0x04

	LCD_voidWriteInteger(intNum);
    4aec:	8d 81       	ldd	r24, Y+5	; 0x05
    4aee:	9e 81       	ldd	r25, Y+6	; 0x06
    4af0:	af 81       	ldd	r26, Y+7	; 0x07
    4af2:	b8 85       	ldd	r27, Y+8	; 0x08
    4af4:	bc 01       	movw	r22, r24
    4af6:	cd 01       	movw	r24, r26
    4af8:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteInteger>

	if(afterDecimalPoint > LCD_u8_MINMUM_FRACTION)
    4afc:	69 81       	ldd	r22, Y+1	; 0x01
    4afe:	7a 81       	ldd	r23, Y+2	; 0x02
    4b00:	8b 81       	ldd	r24, Y+3	; 0x03
    4b02:	9c 81       	ldd	r25, Y+4	; 0x04
    4b04:	2f e6       	ldi	r18, 0x6F	; 111
    4b06:	32 e1       	ldi	r19, 0x12	; 18
    4b08:	43 e8       	ldi	r20, 0x83	; 131
    4b0a:	5a e3       	ldi	r21, 0x3A	; 58
    4b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b10:	18 16       	cp	r1, r24
    4b12:	cc f4       	brge	.+50     	; 0x4b46 <LCD_voidWriteNumber+0xe6>
	{
		LCD_voidWriteChar('.');
    4b14:	8e e2       	ldi	r24, 0x2E	; 46
    4b16:	0e 94 20 23 	call	0x4640	; 0x4640 <LCD_voidWriteChar>
		LCD_voidWriteFraction(afterDecimalPoint*LCD_u8_MAX_FRACTION_DIGITS_FACTOR);
    4b1a:	69 81       	ldd	r22, Y+1	; 0x01
    4b1c:	7a 81       	ldd	r23, Y+2	; 0x02
    4b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b20:	9c 81       	ldd	r25, Y+4	; 0x04
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	4a e7       	ldi	r20, 0x7A	; 122
    4b28:	54 e4       	ldi	r21, 0x44	; 68
    4b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	bc 01       	movw	r22, r24
    4b34:	cd 01       	movw	r24, r26
    4b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	bc 01       	movw	r22, r24
    4b40:	cd 01       	movw	r24, r26
    4b42:	0e 94 8f 24 	call	0x491e	; 0x491e <LCD_voidWriteFraction>
	}
}
    4b46:	2c 96       	adiw	r28, 0x0c	; 12
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	cf 91       	pop	r28
    4b54:	df 91       	pop	r29
    4b56:	08 95       	ret

00004b58 <KPD_voidINIT>:


u8 (*KPD_pu8_Layout)[KPD_u8_NUM_OF_COLUMNS];

void KPD_voidINIT()
{
    4b58:	df 93       	push	r29
    4b5a:	cf 93       	push	r28
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
	switch(KPD_u8_INITIAL_LAYOUT)
		{
		case KPD_u8_NUMBERS_LAYOUT:
			KPD_pu8_Layout = KPD_Keys;
    4b60:	8e ea       	ldi	r24, 0xAE	; 174
    4b62:	91 e0       	ldi	r25, 0x01	; 1
    4b64:	90 93 08 02 	sts	0x0208, r25
    4b68:	80 93 07 02 	sts	0x0207, r24
		case KPD_u8_ALPHABETS_LAYOUT:
			KPD_pu8_Layout = KPD_Alphabets;
		}


	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_ROW_PIN0,DIO_u8_OUTPUT);
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	41 e0       	ldi	r20, 0x01	; 1
    4b72:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_ROW_PIN1,DIO_u8_OUTPUT);
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	61 e0       	ldi	r22, 0x01	; 1
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_ROW_PIN2,DIO_u8_OUTPUT);
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	62 e0       	ldi	r22, 0x02	; 2
    4b84:	41 e0       	ldi	r20, 0x01	; 1
    4b86:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_ROW_PIN3,DIO_u8_OUTPUT);
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	63 e0       	ldi	r22, 0x03	; 3
    4b8e:	41 e0       	ldi	r20, 0x01	; 1
    4b90:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_ROW_PIN0,DIO_u8_HIGH);
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	41 e0       	ldi	r20, 0x01	; 1
    4b9a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_ROW_PIN1,DIO_u8_HIGH);
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	61 e0       	ldi	r22, 0x01	; 1
    4ba2:	41 e0       	ldi	r20, 0x01	; 1
    4ba4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_ROW_PIN2,DIO_u8_HIGH);
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	62 e0       	ldi	r22, 0x02	; 2
    4bac:	41 e0       	ldi	r20, 0x01	; 1
    4bae:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_ROW_PIN3,DIO_u8_HIGH);
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	63 e0       	ldi	r22, 0x03	; 3
    4bb6:	41 e0       	ldi	r20, 0x01	; 1
    4bb8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_COLUMN_PIN0,DIO_u8_INPUT);
    4bbc:	81 e0       	ldi	r24, 0x01	; 1
    4bbe:	64 e0       	ldi	r22, 0x04	; 4
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_COLUMN_PIN1,DIO_u8_INPUT);
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	65 e0       	ldi	r22, 0x05	; 5
    4bca:	40 e0       	ldi	r20, 0x00	; 0
    4bcc:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_COLUMN_PIN2,DIO_u8_INPUT);
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	66 e0       	ldi	r22, 0x06	; 6
    4bd4:	40 e0       	ldi	r20, 0x00	; 0
    4bd6:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_COLUMN_PIN3,DIO_u8_INPUT);
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	67 e0       	ldi	r22, 0x07	; 7
    4bde:	40 e0       	ldi	r20, 0x00	; 0
    4be0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>


	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_COLUMN_PIN0,DIO_u8_HIGH);
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	64 e0       	ldi	r22, 0x04	; 4
    4be8:	41 e0       	ldi	r20, 0x01	; 1
    4bea:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_COLUMN_PIN1,DIO_u8_HIGH);
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	65 e0       	ldi	r22, 0x05	; 5
    4bf2:	41 e0       	ldi	r20, 0x01	; 1
    4bf4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_COLUMN_PIN2,DIO_u8_HIGH);
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	66 e0       	ldi	r22, 0x06	; 6
    4bfc:	41 e0       	ldi	r20, 0x01	; 1
    4bfe:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_COLUMN_PIN3,DIO_u8_HIGH);
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	67 e0       	ldi	r22, 0x07	; 7
    4c06:	41 e0       	ldi	r20, 0x01	; 1
    4c08:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    4c0c:	cf 91       	pop	r28
    4c0e:	df 91       	pop	r29
    4c10:	08 95       	ret

00004c12 <KPD_u8ReadKey>:

u8 KPD_u8ReadKey()
{
    4c12:	df 93       	push	r29
    4c14:	cf 93       	push	r28
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
    4c1a:	2c 97       	sbiw	r28, 0x0c	; 12
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	cd bf       	out	0x3d, r28	; 61
	u8 KPD_u8RowPins[KPD_u8_NUM_OF_ROWS] = {KPD_u8_ROW_PIN0,KPD_u8_ROW_PIN1,
			KPD_u8_ROW_PIN2,KPD_u8_ROW_PIN3};
    4c26:	1d 82       	std	Y+5, r1	; 0x05
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	8e 83       	std	Y+6, r24	; 0x06
    4c2c:	82 e0       	ldi	r24, 0x02	; 2
    4c2e:	8f 83       	std	Y+7, r24	; 0x07
    4c30:	83 e0       	ldi	r24, 0x03	; 3
    4c32:	88 87       	std	Y+8, r24	; 0x08
	u8 KPD_u8ColumnsPins[KPD_u8_NUM_OF_COLUMNS] = {KPD_u8_COLUMN_PIN0,
			KPD_u8_COLUMN_PIN1,KPD_u8_COLUMN_PIN2,KPD_u8_COLUMN_PIN3};
    4c34:	84 e0       	ldi	r24, 0x04	; 4
    4c36:	89 87       	std	Y+9, r24	; 0x09
    4c38:	85 e0       	ldi	r24, 0x05	; 5
    4c3a:	8a 87       	std	Y+10, r24	; 0x0a
    4c3c:	86 e0       	ldi	r24, 0x06	; 6
    4c3e:	8b 87       	std	Y+11, r24	; 0x0b
    4c40:	87 e0       	ldi	r24, 0x07	; 7
    4c42:	8c 87       	std	Y+12, r24	; 0x0c

	u8 KPD_u8Char = 0;
    4c44:	1c 82       	std	Y+4, r1	; 0x04
	for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
    4c46:	1b 82       	std	Y+3, r1	; 0x03
    4c48:	74 c0       	rjmp	.+232    	; 0x4d32 <KPD_u8ReadKey+0x120>
	{
		DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_LOW);
    4c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4c:	28 2f       	mov	r18, r24
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	ce 01       	movw	r24, r28
    4c52:	05 96       	adiw	r24, 0x05	; 5
    4c54:	fc 01       	movw	r30, r24
    4c56:	e2 0f       	add	r30, r18
    4c58:	f3 1f       	adc	r31, r19
    4c5a:	90 81       	ld	r25, Z
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	69 2f       	mov	r22, r25
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		for(u8 KPD_u8_COLUMNi = 0; KPD_u8_COLUMNi < KPD_u8_NUM_OF_COLUMNS; KPD_u8_COLUMNi++)
    4c66:	1a 82       	std	Y+2, r1	; 0x02
    4c68:	4f c0       	rjmp	.+158    	; 0x4d08 <KPD_u8ReadKey+0xf6>
		{
			u8 KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	28 2f       	mov	r18, r24
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	ce 01       	movw	r24, r28
    4c72:	09 96       	adiw	r24, 0x09	; 9
    4c74:	fc 01       	movw	r30, r24
    4c76:	e2 0f       	add	r30, r18
    4c78:	f3 1f       	adc	r31, r19
    4c7a:	90 81       	ld	r25, Z
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	69 2f       	mov	r22, r25
    4c80:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4c84:	89 83       	std	Y+1, r24	; 0x01
			delay_ms(20);
    4c86:	64 e1       	ldi	r22, 0x14	; 20
    4c88:	70 e0       	ldi	r23, 0x00	; 0
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
			KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4c92:	8a 81       	ldd	r24, Y+2	; 0x02
    4c94:	28 2f       	mov	r18, r24
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	ce 01       	movw	r24, r28
    4c9a:	09 96       	adiw	r24, 0x09	; 9
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	e2 0f       	add	r30, r18
    4ca0:	f3 1f       	adc	r31, r19
    4ca2:	90 81       	ld	r25, Z
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	69 2f       	mov	r22, r25
    4ca8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4cac:	89 83       	std	Y+1, r24	; 0x01
			if(KPD_u8PinState == DIO_u8_LOW)
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	88 23       	and	r24, r24
    4cb2:	39 f5       	brne	.+78     	; 0x4d02 <KPD_u8ReadKey+0xf0>
			{
				KPD_u8Char = KPD_pu8_Layout[KPD_u8_ROWi][KPD_u8_COLUMNi];
    4cb4:	20 91 07 02 	lds	r18, 0x0207
    4cb8:	30 91 08 02 	lds	r19, 0x0208
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	88 2f       	mov	r24, r24
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	88 0f       	add	r24, r24
    4cc4:	99 1f       	adc	r25, r25
    4cc6:	88 0f       	add	r24, r24
    4cc8:	99 1f       	adc	r25, r25
    4cca:	28 0f       	add	r18, r24
    4ccc:	39 1f       	adc	r19, r25
    4cce:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd0:	88 2f       	mov	r24, r24
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	f9 01       	movw	r30, r18
    4cd6:	e8 0f       	add	r30, r24
    4cd8:	f9 1f       	adc	r31, r25
    4cda:	80 81       	ld	r24, Z
    4cdc:	8c 83       	std	Y+4, r24	; 0x04
    4cde:	0e c0       	rjmp	.+28     	; 0x4cfc <KPD_u8ReadKey+0xea>
				while(KPD_u8PinState == DIO_u8_LOW)
				{
					KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce2:	28 2f       	mov	r18, r24
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	09 96       	adiw	r24, 0x09	; 9
    4cea:	fc 01       	movw	r30, r24
    4cec:	e2 0f       	add	r30, r18
    4cee:	f3 1f       	adc	r31, r19
    4cf0:	90 81       	ld	r25, Z
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	69 2f       	mov	r22, r25
    4cf6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4cfa:	89 83       	std	Y+1, r24	; 0x01
			delay_ms(20);
			KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
			if(KPD_u8PinState == DIO_u8_LOW)
			{
				KPD_u8Char = KPD_pu8_Layout[KPD_u8_ROWi][KPD_u8_COLUMNi];
				while(KPD_u8PinState == DIO_u8_LOW)
    4cfc:	89 81       	ldd	r24, Y+1	; 0x01
    4cfe:	88 23       	and	r24, r24
    4d00:	79 f3       	breq	.-34     	; 0x4ce0 <KPD_u8ReadKey+0xce>

	u8 KPD_u8Char = 0;
	for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
	{
		DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_LOW);
		for(u8 KPD_u8_COLUMNi = 0; KPD_u8_COLUMNi < KPD_u8_NUM_OF_COLUMNS; KPD_u8_COLUMNi++)
    4d02:	8a 81       	ldd	r24, Y+2	; 0x02
    4d04:	8f 5f       	subi	r24, 0xFF	; 255
    4d06:	8a 83       	std	Y+2, r24	; 0x02
    4d08:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0a:	84 30       	cpi	r24, 0x04	; 4
    4d0c:	08 f4       	brcc	.+2      	; 0x4d10 <KPD_u8ReadKey+0xfe>
    4d0e:	ad cf       	rjmp	.-166    	; 0x4c6a <KPD_u8ReadKey+0x58>
					KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
				}

			}
		}
		DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
    4d10:	8b 81       	ldd	r24, Y+3	; 0x03
    4d12:	28 2f       	mov	r18, r24
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	ce 01       	movw	r24, r28
    4d18:	05 96       	adiw	r24, 0x05	; 5
    4d1a:	fc 01       	movw	r30, r24
    4d1c:	e2 0f       	add	r30, r18
    4d1e:	f3 1f       	adc	r31, r19
    4d20:	90 81       	ld	r25, Z
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	69 2f       	mov	r22, r25
    4d26:	41 e0       	ldi	r20, 0x01	; 1
    4d28:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
			KPD_u8_ROW_PIN2,KPD_u8_ROW_PIN3};
	u8 KPD_u8ColumnsPins[KPD_u8_NUM_OF_COLUMNS] = {KPD_u8_COLUMN_PIN0,
			KPD_u8_COLUMN_PIN1,KPD_u8_COLUMN_PIN2,KPD_u8_COLUMN_PIN3};

	u8 KPD_u8Char = 0;
	for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
    4d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2e:	8f 5f       	subi	r24, 0xFF	; 255
    4d30:	8b 83       	std	Y+3, r24	; 0x03
    4d32:	8b 81       	ldd	r24, Y+3	; 0x03
    4d34:	84 30       	cpi	r24, 0x04	; 4
    4d36:	08 f4       	brcc	.+2      	; 0x4d3a <KPD_u8ReadKey+0x128>
    4d38:	88 cf       	rjmp	.-240    	; 0x4c4a <KPD_u8ReadKey+0x38>

			}
		}
		DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
	}
	return KPD_u8Char;
    4d3a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4d3c:	2c 96       	adiw	r28, 0x0c	; 12
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	cf 91       	pop	r28
    4d4a:	df 91       	pop	r29
    4d4c:	08 95       	ret

00004d4e <KPD_u8WaitAndReadKey>:

u8 KPD_u8WaitAndReadKey()
{
    4d4e:	df 93       	push	r29
    4d50:	cf 93       	push	r28
    4d52:	cd b7       	in	r28, 0x3d	; 61
    4d54:	de b7       	in	r29, 0x3e	; 62
    4d56:	2c 97       	sbiw	r28, 0x0c	; 12
    4d58:	0f b6       	in	r0, 0x3f	; 63
    4d5a:	f8 94       	cli
    4d5c:	de bf       	out	0x3e, r29	; 62
    4d5e:	0f be       	out	0x3f, r0	; 63
    4d60:	cd bf       	out	0x3d, r28	; 61
	// same as KPD_u8ReadKey() but stops the program till the user enters an input
	while(1)
	{
		u8 KPD_u8RowPins[KPD_u8_NUM_OF_ROWS] = {KPD_u8_ROW_PIN0,KPD_u8_ROW_PIN1,
					KPD_u8_ROW_PIN2,KPD_u8_ROW_PIN3};
    4d62:	1d 82       	std	Y+5, r1	; 0x05
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	8e 83       	std	Y+6, r24	; 0x06
    4d68:	82 e0       	ldi	r24, 0x02	; 2
    4d6a:	8f 83       	std	Y+7, r24	; 0x07
    4d6c:	83 e0       	ldi	r24, 0x03	; 3
    4d6e:	88 87       	std	Y+8, r24	; 0x08
			u8 KPD_u8ColumnsPins[KPD_u8_NUM_OF_COLUMNS] = {KPD_u8_COLUMN_PIN0,
					KPD_u8_COLUMN_PIN1,KPD_u8_COLUMN_PIN2,KPD_u8_COLUMN_PIN3};
    4d70:	84 e0       	ldi	r24, 0x04	; 4
    4d72:	89 87       	std	Y+9, r24	; 0x09
    4d74:	85 e0       	ldi	r24, 0x05	; 5
    4d76:	8a 87       	std	Y+10, r24	; 0x0a
    4d78:	86 e0       	ldi	r24, 0x06	; 6
    4d7a:	8b 87       	std	Y+11, r24	; 0x0b
    4d7c:	87 e0       	ldi	r24, 0x07	; 7
    4d7e:	8c 87       	std	Y+12, r24	; 0x0c

			u8 KPD_u8Char = 0;
    4d80:	1c 82       	std	Y+4, r1	; 0x04
			for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
    4d82:	1b 82       	std	Y+3, r1	; 0x03
    4d84:	8d c0       	rjmp	.+282    	; 0x4ea0 <KPD_u8WaitAndReadKey+0x152>
			{
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_LOW);
    4d86:	8b 81       	ldd	r24, Y+3	; 0x03
    4d88:	28 2f       	mov	r18, r24
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	ce 01       	movw	r24, r28
    4d8e:	05 96       	adiw	r24, 0x05	; 5
    4d90:	fc 01       	movw	r30, r24
    4d92:	e2 0f       	add	r30, r18
    4d94:	f3 1f       	adc	r31, r19
    4d96:	90 81       	ld	r25, Z
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	69 2f       	mov	r22, r25
    4d9c:	40 e0       	ldi	r20, 0x00	; 0
    4d9e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
				for(u8 KPD_u8_COLUMNi = 0; KPD_u8_COLUMNi < KPD_u8_NUM_OF_COLUMNS; KPD_u8_COLUMNi++)
    4da2:	1a 82       	std	Y+2, r1	; 0x02
    4da4:	68 c0       	rjmp	.+208    	; 0x4e76 <KPD_u8WaitAndReadKey+0x128>
				{
					u8 KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4da6:	8a 81       	ldd	r24, Y+2	; 0x02
    4da8:	28 2f       	mov	r18, r24
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	ce 01       	movw	r24, r28
    4dae:	09 96       	adiw	r24, 0x09	; 9
    4db0:	fc 01       	movw	r30, r24
    4db2:	e2 0f       	add	r30, r18
    4db4:	f3 1f       	adc	r31, r19
    4db6:	90 81       	ld	r25, Z
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	69 2f       	mov	r22, r25
    4dbc:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4dc0:	89 83       	std	Y+1, r24	; 0x01
					delay_ms(20);
    4dc2:	64 e1       	ldi	r22, 0x14	; 20
    4dc4:	70 e0       	ldi	r23, 0x00	; 0
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <delay_ms>
					KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	28 2f       	mov	r18, r24
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	09 96       	adiw	r24, 0x09	; 9
    4dd8:	fc 01       	movw	r30, r24
    4dda:	e2 0f       	add	r30, r18
    4ddc:	f3 1f       	adc	r31, r19
    4dde:	90 81       	ld	r25, Z
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	69 2f       	mov	r22, r25
    4de4:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4de8:	89 83       	std	Y+1, r24	; 0x01
					if(KPD_u8PinState == DIO_u8_LOW)
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	88 23       	and	r24, r24
    4dee:	09 f0       	breq	.+2      	; 0x4df2 <KPD_u8WaitAndReadKey+0xa4>
    4df0:	3f c0       	rjmp	.+126    	; 0x4e70 <KPD_u8WaitAndReadKey+0x122>
					{
						KPD_u8Char = KPD_pu8_Layout[KPD_u8_ROWi][KPD_u8_COLUMNi];
    4df2:	20 91 07 02 	lds	r18, 0x0207
    4df6:	30 91 08 02 	lds	r19, 0x0208
    4dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfc:	88 2f       	mov	r24, r24
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	88 0f       	add	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	28 0f       	add	r18, r24
    4e0a:	39 1f       	adc	r19, r25
    4e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0e:	88 2f       	mov	r24, r24
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	f9 01       	movw	r30, r18
    4e14:	e8 0f       	add	r30, r24
    4e16:	f9 1f       	adc	r31, r25
    4e18:	80 81       	ld	r24, Z
    4e1a:	8c 83       	std	Y+4, r24	; 0x04
    4e1c:	0e c0       	rjmp	.+28     	; 0x4e3a <KPD_u8WaitAndReadKey+0xec>
						while(KPD_u8PinState == DIO_u8_LOW)
						{
							KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
    4e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	ce 01       	movw	r24, r28
    4e26:	09 96       	adiw	r24, 0x09	; 9
    4e28:	fc 01       	movw	r30, r24
    4e2a:	e2 0f       	add	r30, r18
    4e2c:	f3 1f       	adc	r31, r19
    4e2e:	90 81       	ld	r25, Z
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	69 2f       	mov	r22, r25
    4e34:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DIO_u8GetPinValue>
    4e38:	89 83       	std	Y+1, r24	; 0x01
					delay_ms(20);
					KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
					if(KPD_u8PinState == DIO_u8_LOW)
					{
						KPD_u8Char = KPD_pu8_Layout[KPD_u8_ROWi][KPD_u8_COLUMNi];
						while(KPD_u8PinState == DIO_u8_LOW)
    4e3a:	89 81       	ldd	r24, Y+1	; 0x01
    4e3c:	88 23       	and	r24, r24
    4e3e:	79 f3       	breq	.-34     	; 0x4e1e <KPD_u8WaitAndReadKey+0xd0>
						{
							KPD_u8PinState = DIO_u8GetPinValue(KPD_u8_PORT,KPD_u8ColumnsPins[KPD_u8_COLUMNi]);
						}
						DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
    4e40:	8b 81       	ldd	r24, Y+3	; 0x03
    4e42:	28 2f       	mov	r18, r24
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	ce 01       	movw	r24, r28
    4e48:	05 96       	adiw	r24, 0x05	; 5
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	e2 0f       	add	r30, r18
    4e4e:	f3 1f       	adc	r31, r19
    4e50:	90 81       	ld	r25, Z
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	69 2f       	mov	r22, r25
    4e56:	41 e0       	ldi	r20, 0x01	; 1
    4e58:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
						return KPD_u8Char;
    4e5c:	8c 81       	ldd	r24, Y+4	; 0x04
				}
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
			}
	}

}
    4e5e:	2c 96       	adiw	r28, 0x0c	; 12
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
    4e6a:	cf 91       	pop	r28
    4e6c:	df 91       	pop	r29
    4e6e:	08 95       	ret

			u8 KPD_u8Char = 0;
			for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
			{
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_LOW);
				for(u8 KPD_u8_COLUMNi = 0; KPD_u8_COLUMNi < KPD_u8_NUM_OF_COLUMNS; KPD_u8_COLUMNi++)
    4e70:	8a 81       	ldd	r24, Y+2	; 0x02
    4e72:	8f 5f       	subi	r24, 0xFF	; 255
    4e74:	8a 83       	std	Y+2, r24	; 0x02
    4e76:	8a 81       	ldd	r24, Y+2	; 0x02
    4e78:	84 30       	cpi	r24, 0x04	; 4
    4e7a:	08 f4       	brcc	.+2      	; 0x4e7e <KPD_u8WaitAndReadKey+0x130>
    4e7c:	94 cf       	rjmp	.-216    	; 0x4da6 <KPD_u8WaitAndReadKey+0x58>
						}
						DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
						return KPD_u8Char;
					}
				}
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_u8RowPins[KPD_u8_ROWi],DIO_u8_HIGH);
    4e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e80:	28 2f       	mov	r18, r24
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	ce 01       	movw	r24, r28
    4e86:	05 96       	adiw	r24, 0x05	; 5
    4e88:	fc 01       	movw	r30, r24
    4e8a:	e2 0f       	add	r30, r18
    4e8c:	f3 1f       	adc	r31, r19
    4e8e:	90 81       	ld	r25, Z
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	69 2f       	mov	r22, r25
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
					KPD_u8_ROW_PIN2,KPD_u8_ROW_PIN3};
			u8 KPD_u8ColumnsPins[KPD_u8_NUM_OF_COLUMNS] = {KPD_u8_COLUMN_PIN0,
					KPD_u8_COLUMN_PIN1,KPD_u8_COLUMN_PIN2,KPD_u8_COLUMN_PIN3};

			u8 KPD_u8Char = 0;
			for(u8 KPD_u8_ROWi = 0; KPD_u8_ROWi < KPD_u8_NUM_OF_ROWS; KPD_u8_ROWi++)
    4e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9c:	8f 5f       	subi	r24, 0xFF	; 255
    4e9e:	8b 83       	std	Y+3, r24	; 0x03
    4ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea2:	84 30       	cpi	r24, 0x04	; 4
    4ea4:	08 f4       	brcc	.+2      	; 0x4ea8 <KPD_u8WaitAndReadKey+0x15a>
    4ea6:	6f cf       	rjmp	.-290    	; 0x4d86 <KPD_u8WaitAndReadKey+0x38>
    4ea8:	5c cf       	rjmp	.-328    	; 0x4d62 <KPD_u8WaitAndReadKey+0x14>

00004eaa <KPD_u8SetLayout>:
	}

}

void KPD_u8SetLayout(u8 KPD_u8_Layout)
{
    4eaa:	df 93       	push	r29
    4eac:	cf 93       	push	r28
    4eae:	0f 92       	push	r0
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	89 83       	std	Y+1, r24	; 0x01
	switch(KPD_u8_INITIAL_LAYOUT)
			{
			case KPD_u8_NUMBERS_LAYOUT:
				KPD_pu8_Layout = KPD_Keys;
    4eb6:	8e ea       	ldi	r24, 0xAE	; 174
    4eb8:	91 e0       	ldi	r25, 0x01	; 1
    4eba:	90 93 08 02 	sts	0x0208, r25
    4ebe:	80 93 07 02 	sts	0x0207, r24
				break;
			case KPD_u8_ALPHABETS_LAYOUT:
				KPD_pu8_Layout = KPD_Alphabets;
			}

}
    4ec2:	0f 90       	pop	r0
    4ec4:	cf 91       	pop	r28
    4ec6:	df 91       	pop	r29
    4ec8:	08 95       	ret

00004eca <KPD_u8ToggleLayout>:

void KPD_u8ToggleLayout()
{
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
	if(KPD_pu8_Layout == KPD_Keys)
    4ed2:	80 91 07 02 	lds	r24, 0x0207
    4ed6:	90 91 08 02 	lds	r25, 0x0208
    4eda:	21 e0       	ldi	r18, 0x01	; 1
    4edc:	8e 3a       	cpi	r24, 0xAE	; 174
    4ede:	92 07       	cpc	r25, r18
    4ee0:	39 f4       	brne	.+14     	; 0x4ef0 <KPD_u8ToggleLayout+0x26>
	{
		KPD_pu8_Layout = KPD_Alphabets;
    4ee2:	8e eb       	ldi	r24, 0xBE	; 190
    4ee4:	91 e0       	ldi	r25, 0x01	; 1
    4ee6:	90 93 08 02 	sts	0x0208, r25
    4eea:	80 93 07 02 	sts	0x0207, r24
    4eee:	06 c0       	rjmp	.+12     	; 0x4efc <KPD_u8ToggleLayout+0x32>
	}
	else
	{
		KPD_pu8_Layout = KPD_Keys;
    4ef0:	8e ea       	ldi	r24, 0xAE	; 174
    4ef2:	91 e0       	ldi	r25, 0x01	; 1
    4ef4:	90 93 08 02 	sts	0x0208, r25
    4ef8:	80 93 07 02 	sts	0x0207, r24
	}

}
    4efc:	cf 91       	pop	r28
    4efe:	df 91       	pop	r29
    4f00:	08 95       	ret

00004f02 <IR_voidInit>:
#include "IR_private.h"
#include "IR_config.h"


void IR_voidInit(u8 Copy_u8EXTINo)
{
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	0f 92       	push	r0
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	89 83       	std	Y+1, r24	; 0x01

}
    4f0e:	0f 90       	pop	r0
    4f10:	cf 91       	pop	r28
    4f12:	df 91       	pop	r29
    4f14:	08 95       	ret

00004f16 <IR_voidEnable>:
void IR_voidEnable(u8 Copy_u8EXTINo)
{
    4f16:	df 93       	push	r29
    4f18:	cf 93       	push	r28
    4f1a:	0f 92       	push	r0
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    4f20:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidEXTIEnable(Copy_u8EXTINo, EXTI_u8_FALLING_EDGE);
    4f22:	89 81       	ldd	r24, Y+1	; 0x01
    4f24:	62 e0       	ldi	r22, 0x02	; 2
    4f26:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <EXTI_voidEXTIEnable>
}
    4f2a:	0f 90       	pop	r0
    4f2c:	cf 91       	pop	r28
    4f2e:	df 91       	pop	r29
    4f30:	08 95       	ret

00004f32 <IR_voidDisable>:
void IR_voidDisable(u8 Copy_u8EXTINo)
{
    4f32:	df 93       	push	r29
    4f34:	cf 93       	push	r28
    4f36:	0f 92       	push	r0
    4f38:	cd b7       	in	r28, 0x3d	; 61
    4f3a:	de b7       	in	r29, 0x3e	; 62
    4f3c:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidEXTIDisable(Copy_u8EXTINo);
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	0e 94 93 16 	call	0x2d26	; 0x2d26 <EXTI_voidEXTIDisable>
}
    4f44:	0f 90       	pop	r0
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <IR_voidSetCallBack>:
void IR_voidSetCallBack(void(*Copy_PtrToFunc)(void), u8 Copy_u8EXTINo )
{
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <IR_voidSetCallBack+0x6>
    4f52:	0f 92       	push	r0
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    4f58:	9a 83       	std	Y+2, r25	; 0x02
    4f5a:	89 83       	std	Y+1, r24	; 0x01
    4f5c:	6b 83       	std	Y+3, r22	; 0x03
	EXTI_voidSetCallBack(Copy_PtrToFunc,Copy_u8EXTINo);
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	9a 81       	ldd	r25, Y+2	; 0x02
    4f62:	6b 81       	ldd	r22, Y+3	; 0x03
    4f64:	0e 94 d6 16 	call	0x2dac	; 0x2dac <EXTI_voidSetCallBack>
}
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <GamePad_ButtonPressed>:
#include "GamePad_interface.h"
#include "GamePad_config.h"
#include "GamePad_private.h"
  /*   FRAME : 255 1 1 1 2 VAR1 VAR2 0  */
button_t GamePad_ButtonPressed(u8 *frame)
	{
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
    4f7c:	28 97       	sbiw	r28, 0x08	; 8
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	f8 94       	cli
    4f82:	de bf       	out	0x3e, r29	; 62
    4f84:	0f be       	out	0x3f, r0	; 63
    4f86:	cd bf       	out	0x3d, r28	; 61
    4f88:	9b 83       	std	Y+3, r25	; 0x03
    4f8a:	8a 83       	std	Y+2, r24	; 0x02
		button_t LocalButtonState = BUTTON_ERROR;
    4f8c:	81 e1       	ldi	r24, 0x11	; 17
    4f8e:	89 83       	std	Y+1, r24	; 0x01


		   if  (frame[0] != 255)
    4f90:	ea 81       	ldd	r30, Y+2	; 0x02
    4f92:	fb 81       	ldd	r31, Y+3	; 0x03
    4f94:	80 81       	ld	r24, Z
    4f96:	8f 3f       	cpi	r24, 0xFF	; 255
    4f98:	19 f0       	breq	.+6      	; 0x4fa0 <GamePad_ButtonPressed+0x2c>
		   {
			   return BUTTON_ERROR;
    4f9a:	21 e1       	ldi	r18, 0x11	; 17
    4f9c:	28 87       	std	Y+8, r18	; 0x08
    4f9e:	b9 c0       	rjmp	.+370    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		   }
		   if (frame[1] != 1)
    4fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	31 96       	adiw	r30, 0x01	; 1
    4fa8:	80 81       	ld	r24, Z
    4faa:	81 30       	cpi	r24, 0x01	; 1
    4fac:	19 f0       	breq	.+6      	; 0x4fb4 <GamePad_ButtonPressed+0x40>
		   {
			   return BUTTON_ERROR;
    4fae:	31 e1       	ldi	r19, 0x11	; 17
    4fb0:	38 87       	std	Y+8, r19	; 0x08
    4fb2:	af c0       	rjmp	.+350    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		   }
		   if (frame[2] != 1)
    4fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fb8:	fc 01       	movw	r30, r24
    4fba:	32 96       	adiw	r30, 0x02	; 2
    4fbc:	80 81       	ld	r24, Z
    4fbe:	81 30       	cpi	r24, 0x01	; 1
    4fc0:	19 f0       	breq	.+6      	; 0x4fc8 <GamePad_ButtonPressed+0x54>
		   {
		   		return BUTTON_ERROR;
    4fc2:	81 e1       	ldi	r24, 0x11	; 17
    4fc4:	88 87       	std	Y+8, r24	; 0x08
    4fc6:	a5 c0       	rjmp	.+330    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		   }
		  if  (frame[3] != 1)
    4fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fca:	9b 81       	ldd	r25, Y+3	; 0x03
    4fcc:	fc 01       	movw	r30, r24
    4fce:	33 96       	adiw	r30, 0x03	; 3
    4fd0:	80 81       	ld	r24, Z
    4fd2:	81 30       	cpi	r24, 0x01	; 1
    4fd4:	19 f0       	breq	.+6      	; 0x4fdc <GamePad_ButtonPressed+0x68>
		  {
		  		return BUTTON_ERROR;
    4fd6:	91 e1       	ldi	r25, 0x11	; 17
    4fd8:	98 87       	std	Y+8, r25	; 0x08
    4fda:	9b c0       	rjmp	.+310    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		  }
		   if (frame[4] != 2)
    4fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fde:	9b 81       	ldd	r25, Y+3	; 0x03
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	34 96       	adiw	r30, 0x04	; 4
    4fe4:	80 81       	ld	r24, Z
    4fe6:	82 30       	cpi	r24, 0x02	; 2
    4fe8:	19 f0       	breq	.+6      	; 0x4ff0 <GamePad_ButtonPressed+0x7c>
		   {
		  		 return BUTTON_ERROR;
    4fea:	21 e1       	ldi	r18, 0x11	; 17
    4fec:	28 87       	std	Y+8, r18	; 0x08
    4fee:	91 c0       	rjmp	.+290    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		   }
		   if (frame[7] != 0)
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	37 96       	adiw	r30, 0x07	; 7
    4ff8:	80 81       	ld	r24, Z
    4ffa:	88 23       	and	r24, r24
    4ffc:	19 f0       	breq	.+6      	; 0x5004 <GamePad_ButtonPressed+0x90>
		   {
		   		 return BUTTON_ERROR;
    4ffe:	31 e1       	ldi	r19, 0x11	; 17
    5000:	38 87       	std	Y+8, r19	; 0x08
    5002:	87 c0       	rjmp	.+270    	; 0x5112 <GamePad_ButtonPressed+0x19e>
		   }
		   switch(frame[5])
    5004:	8a 81       	ldd	r24, Y+2	; 0x02
    5006:	9b 81       	ldd	r25, Y+3	; 0x03
    5008:	fc 01       	movw	r30, r24
    500a:	35 96       	adiw	r30, 0x05	; 5
    500c:	80 81       	ld	r24, Z
    500e:	28 2f       	mov	r18, r24
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	3f 83       	std	Y+7, r19	; 0x07
    5014:	2e 83       	std	Y+6, r18	; 0x06
    5016:	8e 81       	ldd	r24, Y+6	; 0x06
    5018:	9f 81       	ldd	r25, Y+7	; 0x07
    501a:	84 30       	cpi	r24, 0x04	; 4
    501c:	91 05       	cpc	r25, r1
    501e:	09 f4       	brne	.+2      	; 0x5022 <GamePad_ButtonPressed+0xae>
    5020:	68 c0       	rjmp	.+208    	; 0x50f2 <GamePad_ButtonPressed+0x17e>
    5022:	2e 81       	ldd	r18, Y+6	; 0x06
    5024:	3f 81       	ldd	r19, Y+7	; 0x07
    5026:	25 30       	cpi	r18, 0x05	; 5
    5028:	31 05       	cpc	r19, r1
    502a:	8c f4       	brge	.+34     	; 0x504e <GamePad_ButtonPressed+0xda>
    502c:	8e 81       	ldd	r24, Y+6	; 0x06
    502e:	9f 81       	ldd	r25, Y+7	; 0x07
    5030:	81 30       	cpi	r24, 0x01	; 1
    5032:	91 05       	cpc	r25, r1
    5034:	09 f4       	brne	.+2      	; 0x5038 <GamePad_ButtonPressed+0xc4>
    5036:	58 c0       	rjmp	.+176    	; 0x50e8 <GamePad_ButtonPressed+0x174>
    5038:	2e 81       	ldd	r18, Y+6	; 0x06
    503a:	3f 81       	ldd	r19, Y+7	; 0x07
    503c:	22 30       	cpi	r18, 0x02	; 2
    503e:	31 05       	cpc	r19, r1
    5040:	09 f4       	brne	.+2      	; 0x5044 <GamePad_ButtonPressed+0xd0>
    5042:	54 c0       	rjmp	.+168    	; 0x50ec <GamePad_ButtonPressed+0x178>
    5044:	8e 81       	ldd	r24, Y+6	; 0x06
    5046:	9f 81       	ldd	r25, Y+7	; 0x07
    5048:	00 97       	sbiw	r24, 0x00	; 0
    504a:	a1 f0       	breq	.+40     	; 0x5074 <GamePad_ButtonPressed+0x100>
    504c:	5e c0       	rjmp	.+188    	; 0x510a <GamePad_ButtonPressed+0x196>
    504e:	2e 81       	ldd	r18, Y+6	; 0x06
    5050:	3f 81       	ldd	r19, Y+7	; 0x07
    5052:	20 31       	cpi	r18, 0x10	; 16
    5054:	31 05       	cpc	r19, r1
    5056:	09 f4       	brne	.+2      	; 0x505a <GamePad_ButtonPressed+0xe6>
    5058:	52 c0       	rjmp	.+164    	; 0x50fe <GamePad_ButtonPressed+0x18a>
    505a:	8e 81       	ldd	r24, Y+6	; 0x06
    505c:	9f 81       	ldd	r25, Y+7	; 0x07
    505e:	80 32       	cpi	r24, 0x20	; 32
    5060:	91 05       	cpc	r25, r1
    5062:	09 f4       	brne	.+2      	; 0x5066 <GamePad_ButtonPressed+0xf2>
    5064:	4f c0       	rjmp	.+158    	; 0x5104 <GamePad_ButtonPressed+0x190>
    5066:	2e 81       	ldd	r18, Y+6	; 0x06
    5068:	3f 81       	ldd	r19, Y+7	; 0x07
    506a:	28 30       	cpi	r18, 0x08	; 8
    506c:	31 05       	cpc	r19, r1
    506e:	09 f4       	brne	.+2      	; 0x5072 <GamePad_ButtonPressed+0xfe>
    5070:	43 c0       	rjmp	.+134    	; 0x50f8 <GamePad_ButtonPressed+0x184>
    5072:	4b c0       	rjmp	.+150    	; 0x510a <GamePad_ButtonPressed+0x196>
			   {
			   case 0:
			switch(frame[6])
    5074:	8a 81       	ldd	r24, Y+2	; 0x02
    5076:	9b 81       	ldd	r25, Y+3	; 0x03
    5078:	fc 01       	movw	r30, r24
    507a:	36 96       	adiw	r30, 0x06	; 6
    507c:	80 81       	ld	r24, Z
    507e:	28 2f       	mov	r18, r24
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	3d 83       	std	Y+5, r19	; 0x05
    5084:	2c 83       	std	Y+4, r18	; 0x04
    5086:	8c 81       	ldd	r24, Y+4	; 0x04
    5088:	9d 81       	ldd	r25, Y+5	; 0x05
    508a:	82 30       	cpi	r24, 0x02	; 2
    508c:	91 05       	cpc	r25, r1
    508e:	01 f1       	breq	.+64     	; 0x50d0 <GamePad_ButtonPressed+0x15c>
    5090:	2c 81       	ldd	r18, Y+4	; 0x04
    5092:	3d 81       	ldd	r19, Y+5	; 0x05
    5094:	23 30       	cpi	r18, 0x03	; 3
    5096:	31 05       	cpc	r19, r1
    5098:	54 f4       	brge	.+20     	; 0x50ae <GamePad_ButtonPressed+0x13a>
    509a:	8c 81       	ldd	r24, Y+4	; 0x04
    509c:	9d 81       	ldd	r25, Y+5	; 0x05
    509e:	00 97       	sbiw	r24, 0x00	; 0
    50a0:	89 f0       	breq	.+34     	; 0x50c4 <GamePad_ButtonPressed+0x150>
    50a2:	2c 81       	ldd	r18, Y+4	; 0x04
    50a4:	3d 81       	ldd	r19, Y+5	; 0x05
    50a6:	21 30       	cpi	r18, 0x01	; 1
    50a8:	31 05       	cpc	r19, r1
    50aa:	79 f0       	breq	.+30     	; 0x50ca <GamePad_ButtonPressed+0x156>
    50ac:	1a c0       	rjmp	.+52     	; 0x50e2 <GamePad_ButtonPressed+0x16e>
    50ae:	8c 81       	ldd	r24, Y+4	; 0x04
    50b0:	9d 81       	ldd	r25, Y+5	; 0x05
    50b2:	84 30       	cpi	r24, 0x04	; 4
    50b4:	91 05       	cpc	r25, r1
    50b6:	79 f0       	breq	.+30     	; 0x50d6 <GamePad_ButtonPressed+0x162>
    50b8:	2c 81       	ldd	r18, Y+4	; 0x04
    50ba:	3d 81       	ldd	r19, Y+5	; 0x05
    50bc:	28 30       	cpi	r18, 0x08	; 8
    50be:	31 05       	cpc	r19, r1
    50c0:	69 f0       	breq	.+26     	; 0x50dc <GamePad_ButtonPressed+0x168>
    50c2:	0f c0       	rjmp	.+30     	; 0x50e2 <GamePad_ButtonPressed+0x16e>
				   	{
				   		case 0:LocalButtonState = NO_BUTTON_PRESSED;break;
    50c4:	86 e0       	ldi	r24, 0x06	; 6
    50c6:	89 83       	std	Y+1, r24	; 0x01
    50c8:	22 c0       	rjmp	.+68     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   		case 1:LocalButtonState = UP;break;
    50ca:	87 e0       	ldi	r24, 0x07	; 7
    50cc:	89 83       	std	Y+1, r24	; 0x01
    50ce:	1f c0       	rjmp	.+62     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   		case 2:LocalButtonState = DOWN;break;
    50d0:	88 e0       	ldi	r24, 0x08	; 8
    50d2:	89 83       	std	Y+1, r24	; 0x01
    50d4:	1c c0       	rjmp	.+56     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   		case 4:LocalButtonState = LEFT;break;
    50d6:	8a e0       	ldi	r24, 0x0A	; 10
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	19 c0       	rjmp	.+50     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   		case 8:LocalButtonState = RIGHT;break;
    50dc:	89 e0       	ldi	r24, 0x09	; 9
    50de:	89 83       	std	Y+1, r24	; 0x01
    50e0:	16 c0       	rjmp	.+44     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   		default:LocalButtonState = BUTTON_ERROR;
    50e2:	81 e1       	ldi	r24, 0x11	; 17
    50e4:	89 83       	std	Y+1, r24	; 0x01
    50e6:	13 c0       	rjmp	.+38     	; 0x510e <GamePad_ButtonPressed+0x19a>
				   	}
			break;
			   case 1:LocalButtonState = START;break;
    50e8:	19 82       	std	Y+1, r1	; 0x01
    50ea:	11 c0       	rjmp	.+34     	; 0x510e <GamePad_ButtonPressed+0x19a>
			   case 2:LocalButtonState = SELECT;break;
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	0e c0       	rjmp	.+28     	; 0x510e <GamePad_ButtonPressed+0x19a>
			   case 4:LocalButtonState = TRIANGLE;break;
    50f2:	82 e0       	ldi	r24, 0x02	; 2
    50f4:	89 83       	std	Y+1, r24	; 0x01
    50f6:	0b c0       	rjmp	.+22     	; 0x510e <GamePad_ButtonPressed+0x19a>
			   case 8:LocalButtonState = CIRCLE;break;
    50f8:	83 e0       	ldi	r24, 0x03	; 3
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	08 c0       	rjmp	.+16     	; 0x510e <GamePad_ButtonPressed+0x19a>
			   case 16:LocalButtonState = CROSS;break;
    50fe:	84 e0       	ldi	r24, 0x04	; 4
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	05 c0       	rjmp	.+10     	; 0x510e <GamePad_ButtonPressed+0x19a>
			   case 32:LocalButtonState = SQUARE;break;
    5104:	85 e0       	ldi	r24, 0x05	; 5
    5106:	89 83       	std	Y+1, r24	; 0x01
    5108:	02 c0       	rjmp	.+4      	; 0x510e <GamePad_ButtonPressed+0x19a>
			   default:LocalButtonState= BUTTON_ERROR;
    510a:	81 e1       	ldi	r24, 0x11	; 17
    510c:	89 83       	std	Y+1, r24	; 0x01





	   return LocalButtonState;
    510e:	39 81       	ldd	r19, Y+1	; 0x01
    5110:	38 87       	std	Y+8, r19	; 0x08
    5112:	88 85       	ldd	r24, Y+8	; 0x08
	}
    5114:	28 96       	adiw	r28, 0x08	; 8
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	f8 94       	cli
    511a:	de bf       	out	0x3e, r29	; 62
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	cd bf       	out	0x3d, r28	; 61
    5120:	cf 91       	pop	r28
    5122:	df 91       	pop	r29
    5124:	08 95       	ret

00005126 <GamePad_JoyStickMoved>:



button_t GamePad_JoyStickMoved(u8 *frame)
{
    5126:	df 93       	push	r29
    5128:	cf 93       	push	r28
    512a:	cd b7       	in	r28, 0x3d	; 61
    512c:	de b7       	in	r29, 0x3e	; 62
    512e:	27 97       	sbiw	r28, 0x07	; 7
    5130:	0f b6       	in	r0, 0x3f	; 63
    5132:	f8 94       	cli
    5134:	de bf       	out	0x3e, r29	; 62
    5136:	0f be       	out	0x3f, r0	; 63
    5138:	cd bf       	out	0x3d, r28	; 61
    513a:	9c 83       	std	Y+4, r25	; 0x04
    513c:	8b 83       	std	Y+3, r24	; 0x03
		button_t LocalButtonState = BUTTON_ERROR;
    513e:	81 e1       	ldi	r24, 0x11	; 17
    5140:	8a 83       	std	Y+2, r24	; 0x02
		u8 yVal;
		   if  (frame[0] != 255)
    5142:	eb 81       	ldd	r30, Y+3	; 0x03
    5144:	fc 81       	ldd	r31, Y+4	; 0x04
    5146:	80 81       	ld	r24, Z
    5148:	8f 3f       	cpi	r24, 0xFF	; 255
    514a:	19 f0       	breq	.+6      	; 0x5152 <GamePad_JoyStickMoved+0x2c>
		   {
			   return BUTTON_ERROR;
    514c:	21 e1       	ldi	r18, 0x11	; 17
    514e:	2f 83       	std	Y+7, r18	; 0x07
    5150:	bb c0       	rjmp	.+374    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   }
		   if (frame[1] != 1)
    5152:	8b 81       	ldd	r24, Y+3	; 0x03
    5154:	9c 81       	ldd	r25, Y+4	; 0x04
    5156:	fc 01       	movw	r30, r24
    5158:	31 96       	adiw	r30, 0x01	; 1
    515a:	80 81       	ld	r24, Z
    515c:	81 30       	cpi	r24, 0x01	; 1
    515e:	19 f0       	breq	.+6      	; 0x5166 <GamePad_JoyStickMoved+0x40>
		   {
			   return BUTTON_ERROR;
    5160:	31 e1       	ldi	r19, 0x11	; 17
    5162:	3f 83       	std	Y+7, r19	; 0x07
    5164:	b1 c0       	rjmp	.+354    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   }
		   if (frame[2] != 2)
    5166:	8b 81       	ldd	r24, Y+3	; 0x03
    5168:	9c 81       	ldd	r25, Y+4	; 0x04
    516a:	fc 01       	movw	r30, r24
    516c:	32 96       	adiw	r30, 0x02	; 2
    516e:	80 81       	ld	r24, Z
    5170:	82 30       	cpi	r24, 0x02	; 2
    5172:	19 f0       	breq	.+6      	; 0x517a <GamePad_JoyStickMoved+0x54>
		   {
		   		return BUTTON_ERROR;
    5174:	81 e1       	ldi	r24, 0x11	; 17
    5176:	8f 83       	std	Y+7, r24	; 0x07
    5178:	a7 c0       	rjmp	.+334    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   }
		  if  (frame[3] != 1)
    517a:	8b 81       	ldd	r24, Y+3	; 0x03
    517c:	9c 81       	ldd	r25, Y+4	; 0x04
    517e:	fc 01       	movw	r30, r24
    5180:	33 96       	adiw	r30, 0x03	; 3
    5182:	80 81       	ld	r24, Z
    5184:	81 30       	cpi	r24, 0x01	; 1
    5186:	19 f0       	breq	.+6      	; 0x518e <GamePad_JoyStickMoved+0x68>
		  {
		  		return BUTTON_ERROR;
    5188:	91 e1       	ldi	r25, 0x11	; 17
    518a:	9f 83       	std	Y+7, r25	; 0x07
    518c:	9d c0       	rjmp	.+314    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		  }
		   if (frame[4] != 2)
    518e:	8b 81       	ldd	r24, Y+3	; 0x03
    5190:	9c 81       	ldd	r25, Y+4	; 0x04
    5192:	fc 01       	movw	r30, r24
    5194:	34 96       	adiw	r30, 0x04	; 4
    5196:	80 81       	ld	r24, Z
    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	19 f0       	breq	.+6      	; 0x51a2 <GamePad_JoyStickMoved+0x7c>
		   {
		  		 return BUTTON_ERROR;
    519c:	21 e1       	ldi	r18, 0x11	; 17
    519e:	2f 83       	std	Y+7, r18	; 0x07
    51a0:	93 c0       	rjmp	.+294    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   }
		   if (frame[7] != 0)
    51a2:	8b 81       	ldd	r24, Y+3	; 0x03
    51a4:	9c 81       	ldd	r25, Y+4	; 0x04
    51a6:	fc 01       	movw	r30, r24
    51a8:	37 96       	adiw	r30, 0x07	; 7
    51aa:	80 81       	ld	r24, Z
    51ac:	88 23       	and	r24, r24
    51ae:	19 f0       	breq	.+6      	; 0x51b6 <GamePad_JoyStickMoved+0x90>
		   {
		   		 return BUTTON_ERROR;
    51b0:	31 e1       	ldi	r19, 0x11	; 17
    51b2:	3f 83       	std	Y+7, r19	; 0x07
    51b4:	89 c0       	rjmp	.+274    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   }
		   switch(frame[5])
    51b6:	8b 81       	ldd	r24, Y+3	; 0x03
    51b8:	9c 81       	ldd	r25, Y+4	; 0x04
    51ba:	fc 01       	movw	r30, r24
    51bc:	35 96       	adiw	r30, 0x05	; 5
    51be:	80 81       	ld	r24, Z
    51c0:	28 2f       	mov	r18, r24
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	3e 83       	std	Y+6, r19	; 0x06
    51c6:	2d 83       	std	Y+5, r18	; 0x05
    51c8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ca:	9e 81       	ldd	r25, Y+6	; 0x06
    51cc:	84 30       	cpi	r24, 0x04	; 4
    51ce:	91 05       	cpc	r25, r1
    51d0:	09 f4       	brne	.+2      	; 0x51d4 <GamePad_JoyStickMoved+0xae>
    51d2:	6a c0       	rjmp	.+212    	; 0x52a8 <GamePad_JoyStickMoved+0x182>
    51d4:	2d 81       	ldd	r18, Y+5	; 0x05
    51d6:	3e 81       	ldd	r19, Y+6	; 0x06
    51d8:	25 30       	cpi	r18, 0x05	; 5
    51da:	31 05       	cpc	r19, r1
    51dc:	8c f4       	brge	.+34     	; 0x5200 <GamePad_JoyStickMoved+0xda>
    51de:	8d 81       	ldd	r24, Y+5	; 0x05
    51e0:	9e 81       	ldd	r25, Y+6	; 0x06
    51e2:	81 30       	cpi	r24, 0x01	; 1
    51e4:	91 05       	cpc	r25, r1
    51e6:	09 f4       	brne	.+2      	; 0x51ea <GamePad_JoyStickMoved+0xc4>
    51e8:	5a c0       	rjmp	.+180    	; 0x529e <GamePad_JoyStickMoved+0x178>
    51ea:	2d 81       	ldd	r18, Y+5	; 0x05
    51ec:	3e 81       	ldd	r19, Y+6	; 0x06
    51ee:	22 30       	cpi	r18, 0x02	; 2
    51f0:	31 05       	cpc	r19, r1
    51f2:	09 f4       	brne	.+2      	; 0x51f6 <GamePad_JoyStickMoved+0xd0>
    51f4:	56 c0       	rjmp	.+172    	; 0x52a2 <GamePad_JoyStickMoved+0x17c>
    51f6:	8d 81       	ldd	r24, Y+5	; 0x05
    51f8:	9e 81       	ldd	r25, Y+6	; 0x06
    51fa:	00 97       	sbiw	r24, 0x00	; 0
    51fc:	a1 f0       	breq	.+40     	; 0x5226 <GamePad_JoyStickMoved+0x100>
    51fe:	60 c0       	rjmp	.+192    	; 0x52c0 <GamePad_JoyStickMoved+0x19a>
    5200:	2d 81       	ldd	r18, Y+5	; 0x05
    5202:	3e 81       	ldd	r19, Y+6	; 0x06
    5204:	20 31       	cpi	r18, 0x10	; 16
    5206:	31 05       	cpc	r19, r1
    5208:	09 f4       	brne	.+2      	; 0x520c <GamePad_JoyStickMoved+0xe6>
    520a:	54 c0       	rjmp	.+168    	; 0x52b4 <GamePad_JoyStickMoved+0x18e>
    520c:	8d 81       	ldd	r24, Y+5	; 0x05
    520e:	9e 81       	ldd	r25, Y+6	; 0x06
    5210:	80 32       	cpi	r24, 0x20	; 32
    5212:	91 05       	cpc	r25, r1
    5214:	09 f4       	brne	.+2      	; 0x5218 <GamePad_JoyStickMoved+0xf2>
    5216:	51 c0       	rjmp	.+162    	; 0x52ba <GamePad_JoyStickMoved+0x194>
    5218:	2d 81       	ldd	r18, Y+5	; 0x05
    521a:	3e 81       	ldd	r19, Y+6	; 0x06
    521c:	28 30       	cpi	r18, 0x08	; 8
    521e:	31 05       	cpc	r19, r1
    5220:	09 f4       	brne	.+2      	; 0x5224 <GamePad_JoyStickMoved+0xfe>
    5222:	45 c0       	rjmp	.+138    	; 0x52ae <GamePad_JoyStickMoved+0x188>
    5224:	4d c0       	rjmp	.+154    	; 0x52c0 <GamePad_JoyStickMoved+0x19a>
		   			   {
		   			   case 0:
		   				    yVal = frame[6];
    5226:	8b 81       	ldd	r24, Y+3	; 0x03
    5228:	9c 81       	ldd	r25, Y+4	; 0x04
    522a:	fc 01       	movw	r30, r24
    522c:	36 96       	adiw	r30, 0x06	; 6
    522e:	80 81       	ld	r24, Z
    5230:	89 83       	std	Y+1, r24	; 0x01
		   				   if((yVal > 0) && (yVal < 30))
    5232:	89 81       	ldd	r24, Y+1	; 0x01
    5234:	88 23       	and	r24, r24
    5236:	31 f0       	breq	.+12     	; 0x5244 <GamePad_JoyStickMoved+0x11e>
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	8e 31       	cpi	r24, 0x1E	; 30
    523c:	18 f4       	brcc	.+6      	; 0x5244 <GamePad_JoyStickMoved+0x11e>
		   				   {
		   					   	  return forwardRight;
    523e:	3c e0       	ldi	r19, 0x0C	; 12
    5240:	3f 83       	std	Y+7, r19	; 0x07
    5242:	42 c0       	rjmp	.+132    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   				   else if((yVal > 30) && (yVal < 65))
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	8f 31       	cpi	r24, 0x1F	; 31
    5248:	30 f0       	brcs	.+12     	; 0x5256 <GamePad_JoyStickMoved+0x130>
    524a:	89 81       	ldd	r24, Y+1	; 0x01
    524c:	81 34       	cpi	r24, 0x41	; 65
    524e:	18 f4       	brcc	.+6      	; 0x5256 <GamePad_JoyStickMoved+0x130>
		   				   {
		   					   	   return forward;
    5250:	8b e0       	ldi	r24, 0x0B	; 11
    5252:	8f 83       	std	Y+7, r24	; 0x07
    5254:	39 c0       	rjmp	.+114    	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   				   else if((yVal > 65) && (yVal < 95))
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	82 34       	cpi	r24, 0x42	; 66
    525a:	30 f0       	brcs	.+12     	; 0x5268 <GamePad_JoyStickMoved+0x142>
    525c:	89 81       	ldd	r24, Y+1	; 0x01
    525e:	8f 35       	cpi	r24, 0x5F	; 95
    5260:	18 f4       	brcc	.+6      	; 0x5268 <GamePad_JoyStickMoved+0x142>
		   				   {
		   					   	   return forwardLeft;
    5262:	9d e0       	ldi	r25, 0x0D	; 13
    5264:	9f 83       	std	Y+7, r25	; 0x07
    5266:	30 c0       	rjmp	.+96     	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   				   else if((yVal > 95) && (yVal < 125))
    5268:	89 81       	ldd	r24, Y+1	; 0x01
    526a:	80 36       	cpi	r24, 0x60	; 96
    526c:	30 f0       	brcs	.+12     	; 0x527a <GamePad_JoyStickMoved+0x154>
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	8d 37       	cpi	r24, 0x7D	; 125
    5272:	18 f4       	brcc	.+6      	; 0x527a <GamePad_JoyStickMoved+0x154>
		   				   {
		   					   	   return backwardLeft;
    5274:	20 e1       	ldi	r18, 0x10	; 16
    5276:	2f 83       	std	Y+7, r18	; 0x07
    5278:	27 c0       	rjmp	.+78     	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   				   else if((yVal > 125) && (yVal < 160))
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	8e 37       	cpi	r24, 0x7E	; 126
    527e:	30 f0       	brcs	.+12     	; 0x528c <GamePad_JoyStickMoved+0x166>
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	80 3a       	cpi	r24, 0xA0	; 160
    5284:	18 f4       	brcc	.+6      	; 0x528c <GamePad_JoyStickMoved+0x166>
		   				   {
		   					   	   return backward;
    5286:	3e e0       	ldi	r19, 0x0E	; 14
    5288:	3f 83       	std	Y+7, r19	; 0x07
    528a:	1e c0       	rjmp	.+60     	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   				   else if((yVal > 160) && (yVal < 190))
    528c:	89 81       	ldd	r24, Y+1	; 0x01
    528e:	81 3a       	cpi	r24, 0xA1	; 161
    5290:	c8 f0       	brcs	.+50     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
    5292:	89 81       	ldd	r24, Y+1	; 0x01
    5294:	8e 3b       	cpi	r24, 0xBE	; 190
    5296:	b0 f4       	brcc	.+44     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   				   {
		   					   	   return backwardRight;
    5298:	8f e0       	ldi	r24, 0x0F	; 15
    529a:	8f 83       	std	Y+7, r24	; 0x07
    529c:	15 c0       	rjmp	.+42     	; 0x52c8 <GamePad_JoyStickMoved+0x1a2>
		   				   }
		   			break;
		   			   case 1:LocalButtonState = START;break;
    529e:	1a 82       	std	Y+2, r1	; 0x02
    52a0:	11 c0       	rjmp	.+34     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   case 2:LocalButtonState = SELECT;break;
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	8a 83       	std	Y+2, r24	; 0x02
    52a6:	0e c0       	rjmp	.+28     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   case 4:LocalButtonState = TRIANGLE;break;
    52a8:	82 e0       	ldi	r24, 0x02	; 2
    52aa:	8a 83       	std	Y+2, r24	; 0x02
    52ac:	0b c0       	rjmp	.+22     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   case 8:LocalButtonState = CIRCLE;break;
    52ae:	83 e0       	ldi	r24, 0x03	; 3
    52b0:	8a 83       	std	Y+2, r24	; 0x02
    52b2:	08 c0       	rjmp	.+16     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   case 16:LocalButtonState = CROSS;break;
    52b4:	84 e0       	ldi	r24, 0x04	; 4
    52b6:	8a 83       	std	Y+2, r24	; 0x02
    52b8:	05 c0       	rjmp	.+10     	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   case 32:LocalButtonState = SQUARE;break;
    52ba:	85 e0       	ldi	r24, 0x05	; 5
    52bc:	8a 83       	std	Y+2, r24	; 0x02
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <GamePad_JoyStickMoved+0x19e>
		   			   default:LocalButtonState= BUTTON_ERROR;
    52c0:	81 e1       	ldi	r24, 0x11	; 17
    52c2:	8a 83       	std	Y+2, r24	; 0x02
		   			   }




	   return LocalButtonState;
    52c4:	9a 81       	ldd	r25, Y+2	; 0x02
    52c6:	9f 83       	std	Y+7, r25	; 0x07
    52c8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    52ca:	27 96       	adiw	r28, 0x07	; 7
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	f8 94       	cli
    52d0:	de bf       	out	0x3e, r29	; 62
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	cd bf       	out	0x3d, r28	; 61
    52d6:	cf 91       	pop	r28
    52d8:	df 91       	pop	r29
    52da:	08 95       	ret

000052dc <EEPROM_voidSendDataByte>:
/*********************************************************************************/
/* Copy_u16LocationAddress:the address of the location you want to write on		**/
/* Copy_u8DataByte:Assign the Data you want to send								**/
/*********************************************************************************/
void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    52dc:	df 93       	push	r29
    52de:	cf 93       	push	r28
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    52e4:	62 97       	sbiw	r28, 0x12	; 18
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	99 8b       	std	Y+17, r25	; 0x11
    52f2:	88 8b       	std	Y+16, r24	; 0x10
    52f4:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    52f6:	88 89       	ldd	r24, Y+16	; 0x10
    52f8:	99 89       	ldd	r25, Y+17	; 0x11
    52fa:	89 2f       	mov	r24, r25
    52fc:	99 27       	eor	r25, r25
    52fe:	80 65       	ori	r24, 0x50	; 80
    5300:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    5302:	0e 94 cb 0c 	call	0x1996	; 0x1996 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    5306:	8f 85       	ldd	r24, Y+15	; 0x0f
    5308:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    530c:	88 89       	ldd	r24, Y+16	; 0x10
    530e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    5312:	8a 89       	ldd	r24, Y+18	; 0x12
    5314:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    5318:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TWI_voidSendStopCondition>
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	a0 e2       	ldi	r26, 0x20	; 32
    5322:	b1 e4       	ldi	r27, 0x41	; 65
    5324:	8b 87       	std	Y+11, r24	; 0x0b
    5326:	9c 87       	std	Y+12, r25	; 0x0c
    5328:	ad 87       	std	Y+13, r26	; 0x0d
    532a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    532c:	6b 85       	ldd	r22, Y+11	; 0x0b
    532e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5330:	8d 85       	ldd	r24, Y+13	; 0x0d
    5332:	9e 85       	ldd	r25, Y+14	; 0x0e
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	4a ef       	ldi	r20, 0xFA	; 250
    533a:	54 e4       	ldi	r21, 0x44	; 68
    533c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	8f 83       	std	Y+7, r24	; 0x07
    5346:	98 87       	std	Y+8, r25	; 0x08
    5348:	a9 87       	std	Y+9, r26	; 0x09
    534a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    534c:	6f 81       	ldd	r22, Y+7	; 0x07
    534e:	78 85       	ldd	r23, Y+8	; 0x08
    5350:	89 85       	ldd	r24, Y+9	; 0x09
    5352:	9a 85       	ldd	r25, Y+10	; 0x0a
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	40 e8       	ldi	r20, 0x80	; 128
    535a:	5f e3       	ldi	r21, 0x3F	; 63
    535c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5360:	88 23       	and	r24, r24
    5362:	2c f4       	brge	.+10     	; 0x536e <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	9e 83       	std	Y+6, r25	; 0x06
    536a:	8d 83       	std	Y+5, r24	; 0x05
    536c:	3f c0       	rjmp	.+126    	; 0x53ec <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    536e:	6f 81       	ldd	r22, Y+7	; 0x07
    5370:	78 85       	ldd	r23, Y+8	; 0x08
    5372:	89 85       	ldd	r24, Y+9	; 0x09
    5374:	9a 85       	ldd	r25, Y+10	; 0x0a
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	3f ef       	ldi	r19, 0xFF	; 255
    537a:	4f e7       	ldi	r20, 0x7F	; 127
    537c:	57 e4       	ldi	r21, 0x47	; 71
    537e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5382:	18 16       	cp	r1, r24
    5384:	4c f5       	brge	.+82     	; 0x53d8 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5386:	6b 85       	ldd	r22, Y+11	; 0x0b
    5388:	7c 85       	ldd	r23, Y+12	; 0x0c
    538a:	8d 85       	ldd	r24, Y+13	; 0x0d
    538c:	9e 85       	ldd	r25, Y+14	; 0x0e
    538e:	20 e0       	ldi	r18, 0x00	; 0
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	40 e2       	ldi	r20, 0x20	; 32
    5394:	51 e4       	ldi	r21, 0x41	; 65
    5396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    539a:	dc 01       	movw	r26, r24
    539c:	cb 01       	movw	r24, r22
    539e:	bc 01       	movw	r22, r24
    53a0:	cd 01       	movw	r24, r26
    53a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	9e 83       	std	Y+6, r25	; 0x06
    53ac:	8d 83       	std	Y+5, r24	; 0x05
    53ae:	0f c0       	rjmp	.+30     	; 0x53ce <EEPROM_voidSendDataByte+0xf2>
    53b0:	88 ec       	ldi	r24, 0xC8	; 200
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	9c 83       	std	Y+4, r25	; 0x04
    53b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    53b8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ba:	9c 81       	ldd	r25, Y+4	; 0x04
    53bc:	01 97       	sbiw	r24, 0x01	; 1
    53be:	f1 f7       	brne	.-4      	; 0x53bc <EEPROM_voidSendDataByte+0xe0>
    53c0:	9c 83       	std	Y+4, r25	; 0x04
    53c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53c4:	8d 81       	ldd	r24, Y+5	; 0x05
    53c6:	9e 81       	ldd	r25, Y+6	; 0x06
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	9e 83       	std	Y+6, r25	; 0x06
    53cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ce:	8d 81       	ldd	r24, Y+5	; 0x05
    53d0:	9e 81       	ldd	r25, Y+6	; 0x06
    53d2:	00 97       	sbiw	r24, 0x00	; 0
    53d4:	69 f7       	brne	.-38     	; 0x53b0 <EEPROM_voidSendDataByte+0xd4>
    53d6:	14 c0       	rjmp	.+40     	; 0x5400 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d8:	6f 81       	ldd	r22, Y+7	; 0x07
    53da:	78 85       	ldd	r23, Y+8	; 0x08
    53dc:	89 85       	ldd	r24, Y+9	; 0x09
    53de:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e4:	dc 01       	movw	r26, r24
    53e6:	cb 01       	movw	r24, r22
    53e8:	9e 83       	std	Y+6, r25	; 0x06
    53ea:	8d 83       	std	Y+5, r24	; 0x05
    53ec:	8d 81       	ldd	r24, Y+5	; 0x05
    53ee:	9e 81       	ldd	r25, Y+6	; 0x06
    53f0:	9a 83       	std	Y+2, r25	; 0x02
    53f2:	89 83       	std	Y+1, r24	; 0x01
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	9a 81       	ldd	r25, Y+2	; 0x02
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <EEPROM_voidSendDataByte+0x11c>
    53fc:	9a 83       	std	Y+2, r25	; 0x02
    53fe:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    5400:	62 96       	adiw	r28, 0x12	; 18
    5402:	0f b6       	in	r0, 0x3f	; 63
    5404:	f8 94       	cli
    5406:	de bf       	out	0x3e, r29	; 62
    5408:	0f be       	out	0x3f, r0	; 63
    540a:	cd bf       	out	0x3d, r28	; 61
    540c:	cf 91       	pop	r28
    540e:	df 91       	pop	r29
    5410:	08 95       	ret

00005412 <EEPROM_u8ReadDataByte>:
/* Desc:This Function reads a byte of data from eeprom							**/
/*********************************************************************************/
/* Copy_u16LocationAddress:the address of the location you want to read from	**/
/*********************************************************************************/
u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    5412:	df 93       	push	r29
    5414:	cf 93       	push	r28
    5416:	00 d0       	rcall	.+0      	; 0x5418 <EEPROM_u8ReadDataByte+0x6>
    5418:	00 d0       	rcall	.+0      	; 0x541a <EEPROM_u8ReadDataByte+0x8>
    541a:	0f 92       	push	r0
    541c:	cd b7       	in	r28, 0x3d	; 61
    541e:	de b7       	in	r29, 0x3e	; 62
    5420:	9d 83       	std	Y+5, r25	; 0x05
    5422:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    5424:	8c 81       	ldd	r24, Y+4	; 0x04
    5426:	9d 81       	ldd	r25, Y+5	; 0x05
    5428:	89 2f       	mov	r24, r25
    542a:	99 27       	eor	r25, r25
    542c:	80 65       	ori	r24, 0x50	; 80
    542e:	89 83       	std	Y+1, r24	; 0x01

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    5430:	0e 94 cb 0c 	call	0x1996	; 0x1996 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    5434:	89 81       	ldd	r24, Y+1	; 0x01
    5436:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    543a:	8c 81       	ldd	r24, Y+4	; 0x04
    543c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    5440:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    5444:	89 81       	ldd	r24, Y+1	; 0x01
    5446:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    544a:	ce 01       	movw	r24, r28
    544c:	02 96       	adiw	r24, 0x02	; 2
    544e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TWI_ErrorStatusMasterReadDataByteWithACK>

	u8 dummy;
	TWI_ErrorStatusMasterReadDataByteWithNACK(&dummy);
    5452:	ce 01       	movw	r24, r28
    5454:	03 96       	adiw	r24, 0x03	; 3
    5456:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_ErrorStatusMasterReadDataByteWithNACK>


	/*send the stop condition*/
	TWI_voidSendStopCondition();
    545a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TWI_voidSendStopCondition>

	return Local_u8Data;
    545e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5460:	0f 90       	pop	r0
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	cf 91       	pop	r28
    546c:	df 91       	pop	r29
    546e:	08 95       	ret

00005470 <DSC_voidInit>:
#include "DSC_private.h"
#include "DSC_config.h"


void DSC_voidInit()
{
    5470:	df 93       	push	r29
    5472:	cf 93       	push	r28
    5474:	cd b7       	in	r28, 0x3d	; 61
    5476:	de b7       	in	r29, 0x3e	; 62
	//set-up timer0 pwm
	TIM0_voidPWMInit();
    5478:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <TIM0_voidPWMInit>
	TIM0_voidSetOutputCompareMode(TIM0_u8_OC0_CLEAR);
    547c:	82 e0       	ldi	r24, 0x02	; 2
    547e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <TIM0_voidSetOutputCompareMode>
	DIO_u8SetPinDirection(TIM0_u8_PORT,TIM0_u8_OC0_PIN,DIO_u8_OUTPUT);
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	63 e0       	ldi	r22, 0x03	; 3
    5486:	41 e0       	ldi	r20, 0x01	; 1
    5488:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	//set-up timer2 pwm
	TIM2_voidPWMInit();
    548c:	0e 94 cb 12 	call	0x2596	; 0x2596 <TIM2_voidPWMInit>
	TIM2_voidSetOutputCompareMode(TIM2_u8_OC2_CLEAR);
    5490:	82 e0       	ldi	r24, 0x02	; 2
    5492:	0e 94 5f 13 	call	0x26be	; 0x26be <TIM2_voidSetOutputCompareMode>
	DIO_u8SetPinDirection(TIM2_u8_PORT,TIM2_u8_OC2_PIN,DIO_u8_OUTPUT);
    5496:	83 e0       	ldi	r24, 0x03	; 3
    5498:	67 e0       	ldi	r22, 0x07	; 7
    549a:	41 e0       	ldi	r20, 0x01	; 1
    549c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	//set-up the direction pins
	DIO_u8SetPinDirection(DSC_u8_DIRECTION_PORT,DSC_u8_IN1_PIN,DIO_u8_OUTPUT);
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	60 e0       	ldi	r22, 0x00	; 0
    54a4:	41 e0       	ldi	r20, 0x01	; 1
    54a6:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DSC_u8_DIRECTION_PORT,DSC_u8_IN2_PIN,DIO_u8_OUTPUT);
    54aa:	80 e0       	ldi	r24, 0x00	; 0
    54ac:	61 e0       	ldi	r22, 0x01	; 1
    54ae:	41 e0       	ldi	r20, 0x01	; 1
    54b0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DSC_u8_DIRECTION_PORT,DSC_u8_IN3_PIN,DIO_u8_OUTPUT);
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	62 e0       	ldi	r22, 0x02	; 2
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DSC_u8_DIRECTION_PORT,DSC_u8_IN4_PIN,DIO_u8_OUTPUT);
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	63 e0       	ldi	r22, 0x03	; 3
    54c2:	41 e0       	ldi	r20, 0x01	; 1
    54c4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <DIO_u8SetPinDirection>

	//set all the direction pins to low
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN1_PIN,DIO_u8_LOW);
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	60 e0       	ldi	r22, 0x00	; 0
    54cc:	40 e0       	ldi	r20, 0x00	; 0
    54ce:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN2_PIN,DIO_u8_LOW);
    54d2:	80 e0       	ldi	r24, 0x00	; 0
    54d4:	61 e0       	ldi	r22, 0x01	; 1
    54d6:	40 e0       	ldi	r20, 0x00	; 0
    54d8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN3_PIN,DIO_u8_LOW);
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	62 e0       	ldi	r22, 0x02	; 2
    54e0:	40 e0       	ldi	r20, 0x00	; 0
    54e2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN4_PIN,DIO_u8_LOW);
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	63 e0       	ldi	r22, 0x03	; 3
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    54f0:	cf 91       	pop	r28
    54f2:	df 91       	pop	r29
    54f4:	08 95       	ret

000054f6 <DSC_voidSetDirectionAndRPM>:

void DSC_voidSetDirectionAndRPM(u8 DSC_u8_Direction, u16 DSC_u8_RPM)
{
    54f6:	df 93       	push	r29
    54f8:	cf 93       	push	r28
    54fa:	00 d0       	rcall	.+0      	; 0x54fc <DSC_voidSetDirectionAndRPM+0x6>
    54fc:	00 d0       	rcall	.+0      	; 0x54fe <DSC_voidSetDirectionAndRPM+0x8>
    54fe:	0f 92       	push	r0
    5500:	cd b7       	in	r28, 0x3d	; 61
    5502:	de b7       	in	r29, 0x3e	; 62
    5504:	89 83       	std	Y+1, r24	; 0x01
    5506:	7b 83       	std	Y+3, r23	; 0x03
    5508:	6a 83       	std	Y+2, r22	; 0x02
	switch(DSC_u8_Direction)
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	28 2f       	mov	r18, r24
    550e:	30 e0       	ldi	r19, 0x00	; 0
    5510:	3d 83       	std	Y+5, r19	; 0x05
    5512:	2c 83       	std	Y+4, r18	; 0x04
    5514:	8c 81       	ldd	r24, Y+4	; 0x04
    5516:	9d 81       	ldd	r25, Y+5	; 0x05
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	d1 f0       	breq	.+52     	; 0x5550 <DSC_voidSetDirectionAndRPM+0x5a>
    551c:	2c 81       	ldd	r18, Y+4	; 0x04
    551e:	3d 81       	ldd	r19, Y+5	; 0x05
    5520:	21 30       	cpi	r18, 0x01	; 1
    5522:	31 05       	cpc	r19, r1
    5524:	49 f5       	brne	.+82     	; 0x5578 <DSC_voidSetDirectionAndRPM+0x82>
	{
	case DSC_u8_FORWARD:
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN1_PIN,DIO_u8_HIGH);
    5526:	80 e0       	ldi	r24, 0x00	; 0
    5528:	60 e0       	ldi	r22, 0x00	; 0
    552a:	41 e0       	ldi	r20, 0x01	; 1
    552c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN3_PIN,DIO_u8_HIGH);
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	62 e0       	ldi	r22, 0x02	; 2
    5534:	41 e0       	ldi	r20, 0x01	; 1
    5536:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN2_PIN,DIO_u8_LOW);
    553a:	80 e0       	ldi	r24, 0x00	; 0
    553c:	61 e0       	ldi	r22, 0x01	; 1
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN4_PIN,DIO_u8_LOW);
    5544:	80 e0       	ldi	r24, 0x00	; 0
    5546:	63 e0       	ldi	r22, 0x03	; 3
    5548:	40 e0       	ldi	r20, 0x00	; 0
    554a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
    554e:	14 c0       	rjmp	.+40     	; 0x5578 <DSC_voidSetDirectionAndRPM+0x82>
		break;
	case DSC_u8_BACKWORD:
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN1_PIN,DIO_u8_LOW);
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	60 e0       	ldi	r22, 0x00	; 0
    5554:	40 e0       	ldi	r20, 0x00	; 0
    5556:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN3_PIN,DIO_u8_LOW);
    555a:	80 e0       	ldi	r24, 0x00	; 0
    555c:	62 e0       	ldi	r22, 0x02	; 2
    555e:	40 e0       	ldi	r20, 0x00	; 0
    5560:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN2_PIN,DIO_u8_HIGH);
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	61 e0       	ldi	r22, 0x01	; 1
    5568:	41 e0       	ldi	r20, 0x01	; 1
    556a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN4_PIN,DIO_u8_HIGH);
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	63 e0       	ldi	r22, 0x03	; 3
    5572:	41 e0       	ldi	r20, 0x01	; 1
    5574:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
		break;
	}
	TIM0_voidSetOCR0((((f32)DSC_u8_RPM)/DSC_f32_MAX_RPM)*255);
    5578:	8a 81       	ldd	r24, Y+2	; 0x02
    557a:	9b 81       	ldd	r25, Y+3	; 0x03
    557c:	cc 01       	movw	r24, r24
    557e:	a0 e0       	ldi	r26, 0x00	; 0
    5580:	b0 e0       	ldi	r27, 0x00	; 0
    5582:	bc 01       	movw	r22, r24
    5584:	cd 01       	movw	r24, r26
    5586:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	bc 01       	movw	r22, r24
    5590:	cd 01       	movw	r24, r26
    5592:	20 e0       	ldi	r18, 0x00	; 0
    5594:	30 e0       	ldi	r19, 0x00	; 0
    5596:	48 ec       	ldi	r20, 0xC8	; 200
    5598:	52 e4       	ldi	r21, 0x42	; 66
    559a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    559e:	dc 01       	movw	r26, r24
    55a0:	cb 01       	movw	r24, r22
    55a2:	bc 01       	movw	r22, r24
    55a4:	cd 01       	movw	r24, r26
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	4f e7       	ldi	r20, 0x7F	; 127
    55ac:	53 e4       	ldi	r21, 0x43	; 67
    55ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	bc 01       	movw	r22, r24
    55b8:	cd 01       	movw	r24, r26
    55ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TIM0_voidSetOCR0>
	TIM2_voidSetOCR2((((f32)DSC_u8_RPM)/DSC_f32_MAX_RPM)*255);
    55c6:	8a 81       	ldd	r24, Y+2	; 0x02
    55c8:	9b 81       	ldd	r25, Y+3	; 0x03
    55ca:	cc 01       	movw	r24, r24
    55cc:	a0 e0       	ldi	r26, 0x00	; 0
    55ce:	b0 e0       	ldi	r27, 0x00	; 0
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    55d8:	dc 01       	movw	r26, r24
    55da:	cb 01       	movw	r24, r22
    55dc:	bc 01       	movw	r22, r24
    55de:	cd 01       	movw	r24, r26
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	48 ec       	ldi	r20, 0xC8	; 200
    55e6:	52 e4       	ldi	r21, 0x42	; 66
    55e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	bc 01       	movw	r22, r24
    55f2:	cd 01       	movw	r24, r26
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	4f e7       	ldi	r20, 0x7F	; 127
    55fa:	53 e4       	ldi	r21, 0x43	; 67
    55fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5600:	dc 01       	movw	r26, r24
    5602:	cb 01       	movw	r24, r22
    5604:	bc 01       	movw	r22, r24
    5606:	cd 01       	movw	r24, r26
    5608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	0e 94 51 13 	call	0x26a2	; 0x26a2 <TIM2_voidSetOCR2>

}
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	cf 91       	pop	r28
    5620:	df 91       	pop	r29
    5622:	08 95       	ret

00005624 <DSC_voidStop>:

void DSC_voidStop()
{
    5624:	df 93       	push	r29
    5626:	cf 93       	push	r28
    5628:	cd b7       	in	r28, 0x3d	; 61
    562a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN1_PIN,DIO_u8_LOW);
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	60 e0       	ldi	r22, 0x00	; 0
    5630:	40 e0       	ldi	r20, 0x00	; 0
    5632:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN3_PIN,DIO_u8_LOW);
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	62 e0       	ldi	r22, 0x02	; 2
    563a:	40 e0       	ldi	r20, 0x00	; 0
    563c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN2_PIN,DIO_u8_LOW);
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	61 e0       	ldi	r22, 0x01	; 1
    5644:	40 e0       	ldi	r20, 0x00	; 0
    5646:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DSC_u8_DIRECTION_PORT,DSC_u8_IN4_PIN,DIO_u8_LOW);
    564a:	80 e0       	ldi	r24, 0x00	; 0
    564c:	63 e0       	ldi	r22, 0x03	; 3
    564e:	40 e0       	ldi	r20, 0x00	; 0
    5650:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <DIO_u8SetPinValue>
}
    5654:	cf 91       	pop	r28
    5656:	df 91       	pop	r29
    5658:	08 95       	ret

0000565a <RC_SYSTEM_ReceiveISR>:
volatile button_t lastButton = NO_BUTTON_PRESSED;
volatile button_t lastButtonState = NO_BUTTON_PRESSED;


void RC_SYSTEM_ReceiveISR(void)
{
    565a:	df 93       	push	r29
    565c:	cf 93       	push	r28
    565e:	0f 92       	push	r0
    5660:	cd b7       	in	r28, 0x3d	; 61
    5662:	de b7       	in	r29, 0x3e	; 62

    u8 receivedByte = UART_u16Read(); // Read the incoming byte
    5664:	0e 94 4f 0b 	call	0x169e	; 0x169e <UART_u16Read>
    5668:	89 83       	std	Y+1, r24	; 0x01
    Frame[byteIndex++] = receivedByte;
    566a:	20 91 01 02 	lds	r18, 0x0201
    566e:	82 2f       	mov	r24, r18
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	fc 01       	movw	r30, r24
    5674:	e7 5f       	subi	r30, 0xF7	; 247
    5676:	fd 4f       	sbci	r31, 0xFD	; 253
    5678:	89 81       	ldd	r24, Y+1	; 0x01
    567a:	80 83       	st	Z, r24
    567c:	82 2f       	mov	r24, r18
    567e:	8f 5f       	subi	r24, 0xFF	; 255
    5680:	80 93 01 02 	sts	0x0201, r24

    if(Frame[0] != 255)
    5684:	80 91 09 02 	lds	r24, 0x0209
    5688:	8f 3f       	cpi	r24, 0xFF	; 255
    568a:	11 f0       	breq	.+4      	; 0x5690 <RC_SYSTEM_ReceiveISR+0x36>
    {
    	byteIndex = 0;
    568c:	10 92 01 02 	sts	0x0201, r1
    }

    if (byteIndex >= 8)
    5690:	80 91 01 02 	lds	r24, 0x0201
    5694:	88 30       	cpi	r24, 0x08	; 8
    5696:	40 f0       	brcs	.+16     	; 0x56a8 <RC_SYSTEM_ReceiveISR+0x4e>
    {
        // Frame complete, process it
        lastButton = GamePad_JoyStickMoved((u8*)Frame);
    5698:	89 e0       	ldi	r24, 0x09	; 9
    569a:	92 e0       	ldi	r25, 0x02	; 2
    569c:	0e 94 93 28 	call	0x5126	; 0x5126 <GamePad_JoyStickMoved>
    56a0:	80 93 ce 01 	sts	0x01CE, r24

        // Reset for next frame
        byteIndex = 0;
    56a4:	10 92 01 02 	sts	0x0201, r1
    }

    if((lastButton == SELECT) && (lastButtonState != SELECT))
    56a8:	80 91 ce 01 	lds	r24, 0x01CE
    56ac:	81 30       	cpi	r24, 0x01	; 1
    56ae:	91 f4       	brne	.+36     	; 0x56d4 <RC_SYSTEM_ReceiveISR+0x7a>
    56b0:	80 91 cf 01 	lds	r24, 0x01CF
    56b4:	81 30       	cpi	r24, 0x01	; 1
    56b6:	71 f0       	breq	.+28     	; 0x56d4 <RC_SYSTEM_ReceiveISR+0x7a>
    {
    	//RC_SYSTEM_u8_Mode = (RC_SYSTEM_u8_Mode == RC_SYSTEM_u8_AUTO_MODE)?RC_SYSTEM_u8_MAN_MODE:RC_SYSTEM_u8_AUTO_MODE;
    	lastButtonState = SELECT;
    56b8:	81 e0       	ldi	r24, 0x01	; 1
    56ba:	80 93 cf 01 	sts	0x01CF, r24
    	if(RC_SYSTEM_u8_Mode == RC_SYSTEM_u8_AUTO_MODE)
    56be:	80 91 00 02 	lds	r24, 0x0200
    56c2:	81 30       	cpi	r24, 0x01	; 1
    56c4:	19 f4       	brne	.+6      	; 0x56cc <RC_SYSTEM_ReceiveISR+0x72>
    	{
    		RC_SYSTEM_u8_Mode = RC_SYSTEM_u8_MAN_MODE;
    56c6:	10 92 00 02 	sts	0x0200, r1
    56ca:	0f c0       	rjmp	.+30     	; 0x56ea <RC_SYSTEM_ReceiveISR+0x90>
    	}
    	else
    	{
    		RC_SYSTEM_u8_Mode = RC_SYSTEM_u8_AUTO_MODE;
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	80 93 00 02 	sts	0x0200, r24
    56d2:	0b c0       	rjmp	.+22     	; 0x56ea <RC_SYSTEM_ReceiveISR+0x90>
    	}
    }
    else if((lastButton != SELECT) && (lastButtonState == SELECT))
    56d4:	80 91 ce 01 	lds	r24, 0x01CE
    56d8:	81 30       	cpi	r24, 0x01	; 1
    56da:	39 f0       	breq	.+14     	; 0x56ea <RC_SYSTEM_ReceiveISR+0x90>
    56dc:	80 91 cf 01 	lds	r24, 0x01CF
    56e0:	81 30       	cpi	r24, 0x01	; 1
    56e2:	19 f4       	brne	.+6      	; 0x56ea <RC_SYSTEM_ReceiveISR+0x90>
    {
    	lastButtonState = NO_BUTTON_PRESSED;
    56e4:	86 e0       	ldi	r24, 0x06	; 6
    56e6:	80 93 cf 01 	sts	0x01CF, r24
    }
}
    56ea:	0f 90       	pop	r0
    56ec:	cf 91       	pop	r28
    56ee:	df 91       	pop	r29
    56f0:	08 95       	ret

000056f2 <RC_SYSTEM_voidInit>:


void RC_SYSTEM_voidInit()
{
    56f2:	df 93       	push	r29
    56f4:	cf 93       	push	r28
    56f6:	cd b7       	in	r28, 0x3d	; 61
    56f8:	de b7       	in	r29, 0x3e	; 62
	DSC_voidInit();
    56fa:	0e 94 38 2a 	call	0x5470	; 0x5470 <DSC_voidInit>
	SERVO_voidInit();
    56fe:	0e 94 60 22 	call	0x44c0	; 0x44c0 <SERVO_voidInit>
	USS_voidInit();
    5702:	0e 94 77 1f 	call	0x3eee	; 0x3eee <USS_voidInit>
	UART_voidInit();
    5706:	0e 94 c2 07 	call	0xf84	; 0xf84 <UART_voidInit>
	UART_voidSetReceiveCallBack(RC_SYSTEM_ReceiveISR);
    570a:	8d e2       	ldi	r24, 0x2D	; 45
    570c:	9b e2       	ldi	r25, 0x2B	; 43
    570e:	0e 94 ad 0b 	call	0x175a	; 0x175a <UART_voidSetReceiveCallBack>
	UART_voidEnableReceiveInterrupt();
    5712:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidEnableReceiveInterrupt>

	GPI_voidInit();
    5716:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <GPI_voidInit>
}
    571a:	cf 91       	pop	r28
    571c:	df 91       	pop	r29
    571e:	08 95       	ret

00005720 <RC_SYSTEM_voidStart>:

void RC_SYSTEM_voidStart()
{
    5720:	df 93       	push	r29
    5722:	cf 93       	push	r28
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
	RC_SYSTEM_voidInit();
    5728:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <RC_SYSTEM_voidInit>

	while(1)
	{
		if(RC_SYSTEM_u8_Mode == RC_SYSTEM_u8_AUTO_MODE)
    572c:	80 91 00 02 	lds	r24, 0x0200
    5730:	81 30       	cpi	r24, 0x01	; 1
    5732:	19 f4       	brne	.+6      	; 0x573a <RC_SYSTEM_voidStart+0x1a>
		{
			AUTO_voidStart();
    5734:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <AUTO_voidStart>
    5738:	f9 cf       	rjmp	.-14     	; 0x572c <RC_SYSTEM_voidStart+0xc>
		}
		else
		{
			MAN_voidStart();
    573a:	0e 94 af 2b 	call	0x575e	; 0x575e <MAN_voidStart>
    573e:	f6 cf       	rjmp	.-20     	; 0x572c <RC_SYSTEM_voidStart+0xc>

00005740 <MAN_voidInit>:

extern volatile u8 RC_SYSTEM_u8_Mode;
extern volatile button_t lastButton;

void MAN_voidInit()
{
    5740:	df 93       	push	r29
    5742:	cf 93       	push	r28
    5744:	cd b7       	in	r28, 0x3d	; 61
    5746:	de b7       	in	r29, 0x3e	; 62
	IR_voidDisable(EXTI_u8_EXTI0);
    5748:	80 e0       	ldi	r24, 0x00	; 0
    574a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <IR_voidDisable>
	IR_voidDisable(EXTI_u8_EXTI1);
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	0e 94 99 27 	call	0x4f32	; 0x4f32 <IR_voidDisable>

	TIM0_voidDisableOverFlowInterrupt();
    5754:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TIM0_voidDisableOverFlowInterrupt>
}
    5758:	cf 91       	pop	r28
    575a:	df 91       	pop	r29
    575c:	08 95       	ret

0000575e <MAN_voidStart>:

void MAN_voidStart()
{
    575e:	df 93       	push	r29
    5760:	cf 93       	push	r28
    5762:	00 d0       	rcall	.+0      	; 0x5764 <MAN_voidStart+0x6>
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
	MAN_voidInit();
    5768:	0e 94 a0 2b 	call	0x5740	; 0x5740 <MAN_voidInit>

	 while (1)
	    {
		 if(RC_SYSTEM_u8_Mode != RC_SYSTEM_u8_MAN_MODE)
    576c:	80 91 00 02 	lds	r24, 0x0200
    5770:	88 23       	and	r24, r24
    5772:	09 f0       	breq	.+2      	; 0x5776 <MAN_voidStart+0x18>
    5774:	9e c0       	rjmp	.+316    	; 0x58b2 <MAN_voidStart+0x154>
		 {
			 return;
		 }

		 switch(lastButton)
    5776:	80 91 ce 01 	lds	r24, 0x01CE
    577a:	28 2f       	mov	r18, r24
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	3a 83       	std	Y+2, r19	; 0x02
    5780:	29 83       	std	Y+1, r18	; 0x01
    5782:	89 81       	ldd	r24, Y+1	; 0x01
    5784:	9a 81       	ldd	r25, Y+2	; 0x02
    5786:	8d 30       	cpi	r24, 0x0D	; 13
    5788:	91 05       	cpc	r25, r1
    578a:	09 f4       	brne	.+2      	; 0x578e <MAN_voidStart+0x30>
    578c:	57 c0       	rjmp	.+174    	; 0x583c <MAN_voidStart+0xde>
    578e:	29 81       	ldd	r18, Y+1	; 0x01
    5790:	3a 81       	ldd	r19, Y+2	; 0x02
    5792:	2e 30       	cpi	r18, 0x0E	; 14
    5794:	31 05       	cpc	r19, r1
    5796:	5c f4       	brge	.+22     	; 0x57ae <MAN_voidStart+0x50>
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	9a 81       	ldd	r25, Y+2	; 0x02
    579c:	8b 30       	cpi	r24, 0x0B	; 11
    579e:	91 05       	cpc	r25, r1
    57a0:	c9 f0       	breq	.+50     	; 0x57d4 <MAN_voidStart+0x76>
    57a2:	29 81       	ldd	r18, Y+1	; 0x01
    57a4:	3a 81       	ldd	r19, Y+2	; 0x02
    57a6:	2c 30       	cpi	r18, 0x0C	; 12
    57a8:	31 05       	cpc	r19, r1
    57aa:	71 f1       	breq	.+92     	; 0x5808 <MAN_voidStart+0xaa>
    57ac:	7c c0       	rjmp	.+248    	; 0x58a6 <MAN_voidStart+0x148>
    57ae:	89 81       	ldd	r24, Y+1	; 0x01
    57b0:	9a 81       	ldd	r25, Y+2	; 0x02
    57b2:	8f 30       	cpi	r24, 0x0F	; 15
    57b4:	91 05       	cpc	r25, r1
    57b6:	09 f4       	brne	.+2      	; 0x57ba <MAN_voidStart+0x5c>
    57b8:	64 c0       	rjmp	.+200    	; 0x5882 <MAN_voidStart+0x124>
    57ba:	29 81       	ldd	r18, Y+1	; 0x01
    57bc:	3a 81       	ldd	r19, Y+2	; 0x02
    57be:	2f 30       	cpi	r18, 0x0F	; 15
    57c0:	31 05       	cpc	r19, r1
    57c2:	0c f4       	brge	.+2      	; 0x57c6 <MAN_voidStart+0x68>
    57c4:	55 c0       	rjmp	.+170    	; 0x5870 <MAN_voidStart+0x112>
    57c6:	89 81       	ldd	r24, Y+1	; 0x01
    57c8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ca:	80 31       	cpi	r24, 0x10	; 16
    57cc:	91 05       	cpc	r25, r1
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <MAN_voidStart+0x74>
    57d0:	61 c0       	rjmp	.+194    	; 0x5894 <MAN_voidStart+0x136>
    57d2:	69 c0       	rjmp	.+210    	; 0x58a6 <MAN_voidStart+0x148>
		 {
		 case forward:
			 if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    57d4:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    57d8:	dc 01       	movw	r26, r24
    57da:	cb 01       	movw	r24, r22
    57dc:	bc 01       	movw	r22, r24
    57de:	cd 01       	movw	r24, r26
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	40 ea       	ldi	r20, 0xA0	; 160
    57e6:	51 e4       	ldi	r21, 0x41	; 65
    57e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ec:	88 23       	and	r24, r24
    57ee:	1c f4       	brge	.+6      	; 0x57f6 <MAN_voidStart+0x98>
			 {
				 DSC_voidStop();
    57f0:	0e 94 12 2b 	call	0x5624	; 0x5624 <DSC_voidStop>
    57f4:	bb cf       	rjmp	.-138    	; 0x576c <MAN_voidStart+0xe>
			 }
			 else{
			 DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,MAN_u8_CAR_SPEED);
    57f6:	81 e0       	ldi	r24, 0x01	; 1
    57f8:	66 e9       	ldi	r22, 0x96	; 150
    57fa:	70 e0       	ldi	r23, 0x00	; 0
    57fc:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_CENTER);
    5800:	8a e5       	ldi	r24, 0x5A	; 90
    5802:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    5806:	b2 cf       	rjmp	.-156    	; 0x576c <MAN_voidStart+0xe>
	    	 }
			 break;
		 case forwardRight:
			 if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    5808:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	bc 01       	movw	r22, r24
    5812:	cd 01       	movw	r24, r26
    5814:	20 e0       	ldi	r18, 0x00	; 0
    5816:	30 e0       	ldi	r19, 0x00	; 0
    5818:	40 ea       	ldi	r20, 0xA0	; 160
    581a:	51 e4       	ldi	r21, 0x41	; 65
    581c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5820:	88 23       	and	r24, r24
    5822:	1c f4       	brge	.+6      	; 0x582a <MAN_voidStart+0xcc>
			 {
				 DSC_voidStop();
    5824:	0e 94 12 2b 	call	0x5624	; 0x5624 <DSC_voidStop>
    5828:	a1 cf       	rjmp	.-190    	; 0x576c <MAN_voidStart+0xe>
			 }
			 else{
			 DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,MAN_u8_CAR_SPEED);
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	66 e9       	ldi	r22, 0x96	; 150
    582e:	70 e0       	ldi	r23, 0x00	; 0
    5830:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_RIGHT);
    5834:	84 eb       	ldi	r24, 0xB4	; 180
    5836:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    583a:	98 cf       	rjmp	.-208    	; 0x576c <MAN_voidStart+0xe>
			 }
		 	 break;
		 case forwardLeft:
			 if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    583c:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	bc 01       	movw	r22, r24
    5846:	cd 01       	movw	r24, r26
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	40 ea       	ldi	r20, 0xA0	; 160
    584e:	51 e4       	ldi	r21, 0x41	; 65
    5850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5854:	88 23       	and	r24, r24
    5856:	1c f4       	brge	.+6      	; 0x585e <MAN_voidStart+0x100>
			 {
				 DSC_voidStop();
    5858:	0e 94 12 2b 	call	0x5624	; 0x5624 <DSC_voidStop>
    585c:	87 cf       	rjmp	.-242    	; 0x576c <MAN_voidStart+0xe>
			 }else{
			 DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,MAN_u8_CAR_SPEED);
    585e:	81 e0       	ldi	r24, 0x01	; 1
    5860:	66 e9       	ldi	r22, 0x96	; 150
    5862:	70 e0       	ldi	r23, 0x00	; 0
    5864:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_LEFT);
    5868:	80 e0       	ldi	r24, 0x00	; 0
    586a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    586e:	7e cf       	rjmp	.-260    	; 0x576c <MAN_voidStart+0xe>
			 }
			 break;
		 case backward:
			 DSC_voidSetDirectionAndRPM(DSC_u8_BACKWORD,MAN_u8_CAR_SPEED);
    5870:	80 e0       	ldi	r24, 0x00	; 0
    5872:	66 e9       	ldi	r22, 0x96	; 150
    5874:	70 e0       	ldi	r23, 0x00	; 0
    5876:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_CENTER);
    587a:	8a e5       	ldi	r24, 0x5A	; 90
    587c:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    5880:	75 cf       	rjmp	.-278    	; 0x576c <MAN_voidStart+0xe>
			 break;
		 case backwardRight:
			 DSC_voidSetDirectionAndRPM(DSC_u8_BACKWORD,MAN_u8_CAR_SPEED);
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	66 e9       	ldi	r22, 0x96	; 150
    5886:	70 e0       	ldi	r23, 0x00	; 0
    5888:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_RIGHT);
    588c:	84 eb       	ldi	r24, 0xB4	; 180
    588e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    5892:	6c cf       	rjmp	.-296    	; 0x576c <MAN_voidStart+0xe>
		 	 break;
		 case backwardLeft:
			 DSC_voidSetDirectionAndRPM(DSC_u8_BACKWORD,MAN_u8_CAR_SPEED);
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	66 e9       	ldi	r22, 0x96	; 150
    5898:	70 e0       	ldi	r23, 0x00	; 0
    589a:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
			SERVO_voidMoveAngle(MAN_u8_SERVO_LEFT);
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    58a4:	63 cf       	rjmp	.-314    	; 0x576c <MAN_voidStart+0xe>
		 	 break;
		 default:
			 DSC_voidStop();
    58a6:	0e 94 12 2b 	call	0x5624	; 0x5624 <DSC_voidStop>
			 SERVO_voidMoveAngle(MAN_u8_SERVO_CENTER);
    58aa:	8a e5       	ldi	r24, 0x5A	; 90
    58ac:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
    58b0:	5d cf       	rjmp	.-326    	; 0x576c <MAN_voidStart+0xe>
			 break;
		 }


	    }
}
    58b2:	0f 90       	pop	r0
    58b4:	0f 90       	pop	r0
    58b6:	cf 91       	pop	r28
    58b8:	df 91       	pop	r29
    58ba:	08 95       	ret

000058bc <CRTOS_voidMSDelay>:
CRTOS_TCP_t taskArr[MAX_ARR_SIZE];
u8 taskCounter = 0;

u8 delayCount = 0;
void CRTOS_voidMSDelay()
{
    58bc:	df 93       	push	r29
    58be:	cf 93       	push	r28
    58c0:	cd b7       	in	r28, 0x3d	; 61
    58c2:	de b7       	in	r29, 0x3e	; 62
	delayCount++;
    58c4:	80 91 03 02 	lds	r24, 0x0203
    58c8:	8f 5f       	subi	r24, 0xFF	; 255
    58ca:	80 93 03 02 	sts	0x0203, r24
	if(delayCount == 4)
    58ce:	80 91 03 02 	lds	r24, 0x0203
    58d2:	84 30       	cpi	r24, 0x04	; 4
    58d4:	21 f4       	brne	.+8      	; 0x58de <CRTOS_voidMSDelay+0x22>
	{
		delayCount = 0;
    58d6:	10 92 03 02 	sts	0x0203, r1
		CRTOS_voidSH();
    58da:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <CRTOS_voidSH>
	}
}
    58de:	cf 91       	pop	r28
    58e0:	df 91       	pop	r29
    58e2:	08 95       	ret

000058e4 <CRTOS_voidInit>:

void CRTOS_voidInit()
{
    58e4:	df 93       	push	r29
    58e6:	cf 93       	push	r28
    58e8:	cd b7       	in	r28, 0x3d	; 61
    58ea:	de b7       	in	r29, 0x3e	; 62
	TIM0_voidInit();
    58ec:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TIM0_voidInit>
	TIM0_voidSetOverFlowCallBack(CRTOS_voidMSDelay);
    58f0:	8e e5       	ldi	r24, 0x5E	; 94
    58f2:	9c e2       	ldi	r25, 0x2C	; 44
    58f4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <TIM0_voidSetOverFlowCallBack>
	TIM0_voidEnableOverFlowInterrupt();
    58f8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <TIM0_voidEnableOverFlowInterrupt>
}
    58fc:	cf 91       	pop	r28
    58fe:	df 91       	pop	r29
    5900:	08 95       	ret

00005902 <CRTOS_voidCreateTask>:



void CRTOS_voidCreateTask(u16 period, u16 firstDelay, void (*pf)(void))
{
    5902:	df 93       	push	r29
    5904:	cf 93       	push	r28
    5906:	00 d0       	rcall	.+0      	; 0x5908 <CRTOS_voidCreateTask+0x6>
    5908:	00 d0       	rcall	.+0      	; 0x590a <CRTOS_voidCreateTask+0x8>
    590a:	00 d0       	rcall	.+0      	; 0x590c <CRTOS_voidCreateTask+0xa>
    590c:	cd b7       	in	r28, 0x3d	; 61
    590e:	de b7       	in	r29, 0x3e	; 62
    5910:	9a 83       	std	Y+2, r25	; 0x02
    5912:	89 83       	std	Y+1, r24	; 0x01
    5914:	7c 83       	std	Y+4, r23	; 0x04
    5916:	6b 83       	std	Y+3, r22	; 0x03
    5918:	5e 83       	std	Y+6, r21	; 0x06
    591a:	4d 83       	std	Y+5, r20	; 0x05
	taskArr[taskCounter].period = period;
    591c:	80 91 02 02 	lds	r24, 0x0202
    5920:	28 2f       	mov	r18, r24
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	c9 01       	movw	r24, r18
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	88 0f       	add	r24, r24
    592c:	99 1f       	adc	r25, r25
    592e:	88 0f       	add	r24, r24
    5930:	99 1f       	adc	r25, r25
    5932:	82 1b       	sub	r24, r18
    5934:	93 0b       	sbc	r25, r19
    5936:	fc 01       	movw	r30, r24
    5938:	ef 5e       	subi	r30, 0xEF	; 239
    593a:	fd 4f       	sbci	r31, 0xFD	; 253
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	91 83       	std	Z+1, r25	; 0x01
    5942:	80 83       	st	Z, r24
	taskArr[taskCounter].delay = firstDelay;
    5944:	80 91 02 02 	lds	r24, 0x0202
    5948:	28 2f       	mov	r18, r24
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	c9 01       	movw	r24, r18
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	88 0f       	add	r24, r24
    5954:	99 1f       	adc	r25, r25
    5956:	88 0f       	add	r24, r24
    5958:	99 1f       	adc	r25, r25
    595a:	82 1b       	sub	r24, r18
    595c:	93 0b       	sbc	r25, r19
    595e:	fc 01       	movw	r30, r24
    5960:	ed 5e       	subi	r30, 0xED	; 237
    5962:	fd 4f       	sbci	r31, 0xFD	; 253
    5964:	8b 81       	ldd	r24, Y+3	; 0x03
    5966:	9c 81       	ldd	r25, Y+4	; 0x04
    5968:	91 83       	std	Z+1, r25	; 0x01
    596a:	80 83       	st	Z, r24
	taskArr[taskCounter].state = state_Ready;
    596c:	80 91 02 02 	lds	r24, 0x0202
    5970:	28 2f       	mov	r18, r24
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	c9 01       	movw	r24, r18
    5976:	88 0f       	add	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	88 0f       	add	r24, r24
    597c:	99 1f       	adc	r25, r25
    597e:	88 0f       	add	r24, r24
    5980:	99 1f       	adc	r25, r25
    5982:	82 1b       	sub	r24, r18
    5984:	93 0b       	sbc	r25, r19
    5986:	fc 01       	movw	r30, r24
    5988:	eb 5e       	subi	r30, 0xEB	; 235
    598a:	fd 4f       	sbci	r31, 0xFD	; 253
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	80 83       	st	Z, r24
	taskArr[taskCounter].pf = pf;
    5990:	80 91 02 02 	lds	r24, 0x0202
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	c9 01       	movw	r24, r18
    599a:	88 0f       	add	r24, r24
    599c:	99 1f       	adc	r25, r25
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	88 0f       	add	r24, r24
    59a4:	99 1f       	adc	r25, r25
    59a6:	82 1b       	sub	r24, r18
    59a8:	93 0b       	sbc	r25, r19
    59aa:	fc 01       	movw	r30, r24
    59ac:	ea 5e       	subi	r30, 0xEA	; 234
    59ae:	fd 4f       	sbci	r31, 0xFD	; 253
    59b0:	8d 81       	ldd	r24, Y+5	; 0x05
    59b2:	9e 81       	ldd	r25, Y+6	; 0x06
    59b4:	91 83       	std	Z+1, r25	; 0x01
    59b6:	80 83       	st	Z, r24
	taskCounter++;
    59b8:	80 91 02 02 	lds	r24, 0x0202
    59bc:	8f 5f       	subi	r24, 0xFF	; 255
    59be:	80 93 02 02 	sts	0x0202, r24
}
    59c2:	26 96       	adiw	r28, 0x06	; 6
    59c4:	0f b6       	in	r0, 0x3f	; 63
    59c6:	f8 94       	cli
    59c8:	de bf       	out	0x3e, r29	; 62
    59ca:	0f be       	out	0x3f, r0	; 63
    59cc:	cd bf       	out	0x3d, r28	; 61
    59ce:	cf 91       	pop	r28
    59d0:	df 91       	pop	r29
    59d2:	08 95       	ret

000059d4 <CRTOS_voidSH>:


void CRTOS_voidSH()
{
    59d4:	df 93       	push	r29
    59d6:	cf 93       	push	r28
    59d8:	0f 92       	push	r0
    59da:	cd b7       	in	r28, 0x3d	; 61
    59dc:	de b7       	in	r29, 0x3e	; 62
	for(u8 taskIndex = 0; taskIndex < taskCounter; taskIndex++)
    59de:	19 82       	std	Y+1, r1	; 0x01
    59e0:	a4 c0       	rjmp	.+328    	; 0x5b2a <CRTOS_voidSH+0x156>
	{
		if(taskArr[taskIndex].delay == 0)
    59e2:	89 81       	ldd	r24, Y+1	; 0x01
    59e4:	28 2f       	mov	r18, r24
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	c9 01       	movw	r24, r18
    59ea:	88 0f       	add	r24, r24
    59ec:	99 1f       	adc	r25, r25
    59ee:	88 0f       	add	r24, r24
    59f0:	99 1f       	adc	r25, r25
    59f2:	88 0f       	add	r24, r24
    59f4:	99 1f       	adc	r25, r25
    59f6:	82 1b       	sub	r24, r18
    59f8:	93 0b       	sbc	r25, r19
    59fa:	fc 01       	movw	r30, r24
    59fc:	ed 5e       	subi	r30, 0xED	; 237
    59fe:	fd 4f       	sbci	r31, 0xFD	; 253
    5a00:	80 81       	ld	r24, Z
    5a02:	91 81       	ldd	r25, Z+1	; 0x01
    5a04:	00 97       	sbiw	r24, 0x00	; 0
    5a06:	09 f0       	breq	.+2      	; 0x5a0a <CRTOS_voidSH+0x36>
    5a08:	6b c0       	rjmp	.+214    	; 0x5ae0 <CRTOS_voidSH+0x10c>
		{

			taskArr[taskIndex].delay = taskArr[taskIndex].period;
    5a0a:	89 81       	ldd	r24, Y+1	; 0x01
    5a0c:	48 2f       	mov	r20, r24
    5a0e:	50 e0       	ldi	r21, 0x00	; 0
    5a10:	89 81       	ldd	r24, Y+1	; 0x01
    5a12:	28 2f       	mov	r18, r24
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	c9 01       	movw	r24, r18
    5a18:	88 0f       	add	r24, r24
    5a1a:	99 1f       	adc	r25, r25
    5a1c:	88 0f       	add	r24, r24
    5a1e:	99 1f       	adc	r25, r25
    5a20:	88 0f       	add	r24, r24
    5a22:	99 1f       	adc	r25, r25
    5a24:	82 1b       	sub	r24, r18
    5a26:	93 0b       	sbc	r25, r19
    5a28:	fc 01       	movw	r30, r24
    5a2a:	ef 5e       	subi	r30, 0xEF	; 239
    5a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    5a2e:	20 81       	ld	r18, Z
    5a30:	31 81       	ldd	r19, Z+1	; 0x01
    5a32:	ca 01       	movw	r24, r20
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	88 0f       	add	r24, r24
    5a3a:	99 1f       	adc	r25, r25
    5a3c:	88 0f       	add	r24, r24
    5a3e:	99 1f       	adc	r25, r25
    5a40:	84 1b       	sub	r24, r20
    5a42:	95 0b       	sbc	r25, r21
    5a44:	fc 01       	movw	r30, r24
    5a46:	ed 5e       	subi	r30, 0xED	; 237
    5a48:	fd 4f       	sbci	r31, 0xFD	; 253
    5a4a:	31 83       	std	Z+1, r19	; 0x01
    5a4c:	20 83       	st	Z, r18
			if(taskArr[taskIndex].state != state_Suspending)
    5a4e:	89 81       	ldd	r24, Y+1	; 0x01
    5a50:	28 2f       	mov	r18, r24
    5a52:	30 e0       	ldi	r19, 0x00	; 0
    5a54:	c9 01       	movw	r24, r18
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	88 0f       	add	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	82 1b       	sub	r24, r18
    5a64:	93 0b       	sbc	r25, r19
    5a66:	fc 01       	movw	r30, r24
    5a68:	eb 5e       	subi	r30, 0xEB	; 235
    5a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a6c:	80 81       	ld	r24, Z
    5a6e:	84 30       	cpi	r24, 0x04	; 4
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <CRTOS_voidSH+0xa0>
    5a72:	58 c0       	rjmp	.+176    	; 0x5b24 <CRTOS_voidSH+0x150>
			{
				taskArr[taskIndex].state = state_Running;
    5a74:	89 81       	ldd	r24, Y+1	; 0x01
    5a76:	28 2f       	mov	r18, r24
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	c9 01       	movw	r24, r18
    5a7c:	88 0f       	add	r24, r24
    5a7e:	99 1f       	adc	r25, r25
    5a80:	88 0f       	add	r24, r24
    5a82:	99 1f       	adc	r25, r25
    5a84:	88 0f       	add	r24, r24
    5a86:	99 1f       	adc	r25, r25
    5a88:	82 1b       	sub	r24, r18
    5a8a:	93 0b       	sbc	r25, r19
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	eb 5e       	subi	r30, 0xEB	; 235
    5a90:	fd 4f       	sbci	r31, 0xFD	; 253
    5a92:	82 e0       	ldi	r24, 0x02	; 2
    5a94:	80 83       	st	Z, r24
				taskArr[taskIndex].pf();
    5a96:	89 81       	ldd	r24, Y+1	; 0x01
    5a98:	28 2f       	mov	r18, r24
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	c9 01       	movw	r24, r18
    5a9e:	88 0f       	add	r24, r24
    5aa0:	99 1f       	adc	r25, r25
    5aa2:	88 0f       	add	r24, r24
    5aa4:	99 1f       	adc	r25, r25
    5aa6:	88 0f       	add	r24, r24
    5aa8:	99 1f       	adc	r25, r25
    5aaa:	82 1b       	sub	r24, r18
    5aac:	93 0b       	sbc	r25, r19
    5aae:	fc 01       	movw	r30, r24
    5ab0:	ea 5e       	subi	r30, 0xEA	; 234
    5ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    5ab4:	01 90       	ld	r0, Z+
    5ab6:	f0 81       	ld	r31, Z
    5ab8:	e0 2d       	mov	r30, r0
    5aba:	09 95       	icall
				taskArr[taskIndex].state = state_Ready;
    5abc:	89 81       	ldd	r24, Y+1	; 0x01
    5abe:	28 2f       	mov	r18, r24
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	c9 01       	movw	r24, r18
    5ac4:	88 0f       	add	r24, r24
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	88 0f       	add	r24, r24
    5aca:	99 1f       	adc	r25, r25
    5acc:	88 0f       	add	r24, r24
    5ace:	99 1f       	adc	r25, r25
    5ad0:	82 1b       	sub	r24, r18
    5ad2:	93 0b       	sbc	r25, r19
    5ad4:	fc 01       	movw	r30, r24
    5ad6:	eb 5e       	subi	r30, 0xEB	; 235
    5ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	80 83       	st	Z, r24
    5ade:	22 c0       	rjmp	.+68     	; 0x5b24 <CRTOS_voidSH+0x150>
			}

		}
		else
		{
			taskArr[taskIndex].delay--;
    5ae0:	89 81       	ldd	r24, Y+1	; 0x01
    5ae2:	28 2f       	mov	r18, r24
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	c9 01       	movw	r24, r18
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	88 0f       	add	r24, r24
    5af2:	99 1f       	adc	r25, r25
    5af4:	82 1b       	sub	r24, r18
    5af6:	93 0b       	sbc	r25, r19
    5af8:	fc 01       	movw	r30, r24
    5afa:	ed 5e       	subi	r30, 0xED	; 237
    5afc:	fd 4f       	sbci	r31, 0xFD	; 253
    5afe:	80 81       	ld	r24, Z
    5b00:	91 81       	ldd	r25, Z+1	; 0x01
    5b02:	ac 01       	movw	r20, r24
    5b04:	41 50       	subi	r20, 0x01	; 1
    5b06:	50 40       	sbci	r21, 0x00	; 0
    5b08:	c9 01       	movw	r24, r18
    5b0a:	88 0f       	add	r24, r24
    5b0c:	99 1f       	adc	r25, r25
    5b0e:	88 0f       	add	r24, r24
    5b10:	99 1f       	adc	r25, r25
    5b12:	88 0f       	add	r24, r24
    5b14:	99 1f       	adc	r25, r25
    5b16:	82 1b       	sub	r24, r18
    5b18:	93 0b       	sbc	r25, r19
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	ed 5e       	subi	r30, 0xED	; 237
    5b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    5b20:	51 83       	std	Z+1, r21	; 0x01
    5b22:	40 83       	st	Z, r20
}


void CRTOS_voidSH()
{
	for(u8 taskIndex = 0; taskIndex < taskCounter; taskIndex++)
    5b24:	89 81       	ldd	r24, Y+1	; 0x01
    5b26:	8f 5f       	subi	r24, 0xFF	; 255
    5b28:	89 83       	std	Y+1, r24	; 0x01
    5b2a:	90 91 02 02 	lds	r25, 0x0202
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	89 17       	cp	r24, r25
    5b32:	08 f4       	brcc	.+2      	; 0x5b36 <CRTOS_voidSH+0x162>
    5b34:	56 cf       	rjmp	.-340    	; 0x59e2 <CRTOS_voidSH+0xe>
		else
		{
			taskArr[taskIndex].delay--;
		}
	}
}
    5b36:	0f 90       	pop	r0
    5b38:	cf 91       	pop	r28
    5b3a:	df 91       	pop	r29
    5b3c:	08 95       	ret

00005b3e <CRTOS_voidSuspendTask>:

void CRTOS_voidSuspendTask(u8 taskIndex)
{
    5b3e:	df 93       	push	r29
    5b40:	cf 93       	push	r28
    5b42:	0f 92       	push	r0
    5b44:	cd b7       	in	r28, 0x3d	; 61
    5b46:	de b7       	in	r29, 0x3e	; 62
    5b48:	89 83       	std	Y+1, r24	; 0x01
	taskArr[taskIndex].state = state_Suspending;
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	28 2f       	mov	r18, r24
    5b4e:	30 e0       	ldi	r19, 0x00	; 0
    5b50:	c9 01       	movw	r24, r18
    5b52:	88 0f       	add	r24, r24
    5b54:	99 1f       	adc	r25, r25
    5b56:	88 0f       	add	r24, r24
    5b58:	99 1f       	adc	r25, r25
    5b5a:	88 0f       	add	r24, r24
    5b5c:	99 1f       	adc	r25, r25
    5b5e:	82 1b       	sub	r24, r18
    5b60:	93 0b       	sbc	r25, r19
    5b62:	fc 01       	movw	r30, r24
    5b64:	eb 5e       	subi	r30, 0xEB	; 235
    5b66:	fd 4f       	sbci	r31, 0xFD	; 253
    5b68:	84 e0       	ldi	r24, 0x04	; 4
    5b6a:	80 83       	st	Z, r24
}
    5b6c:	0f 90       	pop	r0
    5b6e:	cf 91       	pop	r28
    5b70:	df 91       	pop	r29
    5b72:	08 95       	ret

00005b74 <CRTOS_voidMakeTaskReady>:

void CRTOS_voidMakeTaskReady(u8 taskIndex)
{
    5b74:	df 93       	push	r29
    5b76:	cf 93       	push	r28
    5b78:	0f 92       	push	r0
    5b7a:	cd b7       	in	r28, 0x3d	; 61
    5b7c:	de b7       	in	r29, 0x3e	; 62
    5b7e:	89 83       	std	Y+1, r24	; 0x01
	taskArr[taskIndex].state = state_Ready;
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	28 2f       	mov	r18, r24
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	c9 01       	movw	r24, r18
    5b88:	88 0f       	add	r24, r24
    5b8a:	99 1f       	adc	r25, r25
    5b8c:	88 0f       	add	r24, r24
    5b8e:	99 1f       	adc	r25, r25
    5b90:	88 0f       	add	r24, r24
    5b92:	99 1f       	adc	r25, r25
    5b94:	82 1b       	sub	r24, r18
    5b96:	93 0b       	sbc	r25, r19
    5b98:	fc 01       	movw	r30, r24
    5b9a:	eb 5e       	subi	r30, 0xEB	; 235
    5b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	80 83       	st	Z, r24
}
    5ba2:	0f 90       	pop	r0
    5ba4:	cf 91       	pop	r28
    5ba6:	df 91       	pop	r29
    5ba8:	08 95       	ret

00005baa <CRTOS_voidDeleteTask>:

void CRTOS_voidDeleteTask(void (*pf)(void))
{
    5baa:	df 93       	push	r29
    5bac:	cf 93       	push	r28
    5bae:	cd b7       	in	r28, 0x3d	; 61
    5bb0:	de b7       	in	r29, 0x3e	; 62
    5bb2:	69 97       	sbiw	r28, 0x19	; 25
    5bb4:	0f b6       	in	r0, 0x3f	; 63
    5bb6:	f8 94       	cli
    5bb8:	de bf       	out	0x3e, r29	; 62
    5bba:	0f be       	out	0x3f, r0	; 63
    5bbc:	cd bf       	out	0x3d, r28	; 61
    5bbe:	9a 87       	std	Y+10, r25	; 0x0a
    5bc0:	89 87       	std	Y+9, r24	; 0x09
	u8 taskIndex = 0;
    5bc2:	19 82       	std	Y+1, r1	; 0x01
    5bc4:	19 c0       	rjmp	.+50     	; 0x5bf8 <CRTOS_voidDeleteTask+0x4e>
	for(; taskIndex < taskCounter; taskIndex++)
	{
		if(taskArr[taskIndex].pf == pf)
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	28 2f       	mov	r18, r24
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	c9 01       	movw	r24, r18
    5bce:	88 0f       	add	r24, r24
    5bd0:	99 1f       	adc	r25, r25
    5bd2:	88 0f       	add	r24, r24
    5bd4:	99 1f       	adc	r25, r25
    5bd6:	88 0f       	add	r24, r24
    5bd8:	99 1f       	adc	r25, r25
    5bda:	82 1b       	sub	r24, r18
    5bdc:	93 0b       	sbc	r25, r19
    5bde:	fc 01       	movw	r30, r24
    5be0:	ea 5e       	subi	r30, 0xEA	; 234
    5be2:	fd 4f       	sbci	r31, 0xFD	; 253
    5be4:	20 81       	ld	r18, Z
    5be6:	31 81       	ldd	r19, Z+1	; 0x01
    5be8:	89 85       	ldd	r24, Y+9	; 0x09
    5bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bec:	28 17       	cp	r18, r24
    5bee:	39 07       	cpc	r19, r25
    5bf0:	41 f0       	breq	.+16     	; 0x5c02 <CRTOS_voidDeleteTask+0x58>
}

void CRTOS_voidDeleteTask(void (*pf)(void))
{
	u8 taskIndex = 0;
	for(; taskIndex < taskCounter; taskIndex++)
    5bf2:	89 81       	ldd	r24, Y+1	; 0x01
    5bf4:	8f 5f       	subi	r24, 0xFF	; 255
    5bf6:	89 83       	std	Y+1, r24	; 0x01
    5bf8:	90 91 02 02 	lds	r25, 0x0202
    5bfc:	89 81       	ldd	r24, Y+1	; 0x01
    5bfe:	89 17       	cp	r24, r25
    5c00:	10 f3       	brcs	.-60     	; 0x5bc6 <CRTOS_voidDeleteTask+0x1c>
			break;
		}
	}


	if(taskIndex != (MAX_ARR_SIZE-1))
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	89 30       	cpi	r24, 0x09	; 9
    5c06:	09 f4       	brne	.+2      	; 0x5c0a <CRTOS_voidDeleteTask+0x60>
    5c08:	a8 c0       	rjmp	.+336    	; 0x5d5a <CRTOS_voidDeleteTask+0x1b0>
    5c0a:	a1 c0       	rjmp	.+322    	; 0x5d4e <CRTOS_voidDeleteTask+0x1a4>
	{
		for(;taskIndex < taskCounter; taskIndex++)
		{
			CRTOS_TCP_t temp = taskArr[taskIndex];
    5c0c:	89 81       	ldd	r24, Y+1	; 0x01
    5c0e:	28 2f       	mov	r18, r24
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	c9 01       	movw	r24, r18
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	82 1b       	sub	r24, r18
    5c22:	93 0b       	sbc	r25, r19
    5c24:	8f 5e       	subi	r24, 0xEF	; 239
    5c26:	9d 4f       	sbci	r25, 0xFD	; 253
    5c28:	9e 01       	movw	r18, r28
    5c2a:	2e 5f       	subi	r18, 0xFE	; 254
    5c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c2e:	3c 87       	std	Y+12, r19	; 0x0c
    5c30:	2b 87       	std	Y+11, r18	; 0x0b
    5c32:	9e 87       	std	Y+14, r25	; 0x0e
    5c34:	8d 87       	std	Y+13, r24	; 0x0d
    5c36:	37 e0       	ldi	r19, 0x07	; 7
    5c38:	3f 87       	std	Y+15, r19	; 0x0f
    5c3a:	ed 85       	ldd	r30, Y+13	; 0x0d
    5c3c:	fe 85       	ldd	r31, Y+14	; 0x0e
    5c3e:	00 80       	ld	r0, Z
    5c40:	2d 85       	ldd	r18, Y+13	; 0x0d
    5c42:	3e 85       	ldd	r19, Y+14	; 0x0e
    5c44:	2f 5f       	subi	r18, 0xFF	; 255
    5c46:	3f 4f       	sbci	r19, 0xFF	; 255
    5c48:	3e 87       	std	Y+14, r19	; 0x0e
    5c4a:	2d 87       	std	Y+13, r18	; 0x0d
    5c4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    5c4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5c50:	00 82       	st	Z, r0
    5c52:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c54:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c56:	2f 5f       	subi	r18, 0xFF	; 255
    5c58:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5a:	3c 87       	std	Y+12, r19	; 0x0c
    5c5c:	2b 87       	std	Y+11, r18	; 0x0b
    5c5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    5c60:	31 50       	subi	r19, 0x01	; 1
    5c62:	3f 87       	std	Y+15, r19	; 0x0f
    5c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c66:	88 23       	and	r24, r24
    5c68:	41 f7       	brne	.-48     	; 0x5c3a <CRTOS_voidDeleteTask+0x90>
			taskArr[taskIndex] = taskArr[taskIndex+1];
    5c6a:	89 81       	ldd	r24, Y+1	; 0x01
    5c6c:	28 2f       	mov	r18, r24
    5c6e:	30 e0       	ldi	r19, 0x00	; 0
    5c70:	89 81       	ldd	r24, Y+1	; 0x01
    5c72:	88 2f       	mov	r24, r24
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	ac 01       	movw	r20, r24
    5c78:	4f 5f       	subi	r20, 0xFF	; 255
    5c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c7c:	c9 01       	movw	r24, r18
    5c7e:	88 0f       	add	r24, r24
    5c80:	99 1f       	adc	r25, r25
    5c82:	88 0f       	add	r24, r24
    5c84:	99 1f       	adc	r25, r25
    5c86:	88 0f       	add	r24, r24
    5c88:	99 1f       	adc	r25, r25
    5c8a:	82 1b       	sub	r24, r18
    5c8c:	93 0b       	sbc	r25, r19
    5c8e:	9c 01       	movw	r18, r24
    5c90:	2f 5e       	subi	r18, 0xEF	; 239
    5c92:	3d 4f       	sbci	r19, 0xFD	; 253
    5c94:	ca 01       	movw	r24, r20
    5c96:	88 0f       	add	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	88 0f       	add	r24, r24
    5c9c:	99 1f       	adc	r25, r25
    5c9e:	88 0f       	add	r24, r24
    5ca0:	99 1f       	adc	r25, r25
    5ca2:	84 1b       	sub	r24, r20
    5ca4:	95 0b       	sbc	r25, r21
    5ca6:	8f 5e       	subi	r24, 0xEF	; 239
    5ca8:	9d 4f       	sbci	r25, 0xFD	; 253
    5caa:	39 8b       	std	Y+17, r19	; 0x11
    5cac:	28 8b       	std	Y+16, r18	; 0x10
    5cae:	9b 8b       	std	Y+19, r25	; 0x13
    5cb0:	8a 8b       	std	Y+18, r24	; 0x12
    5cb2:	97 e0       	ldi	r25, 0x07	; 7
    5cb4:	9c 8b       	std	Y+20, r25	; 0x14
    5cb6:	ea 89       	ldd	r30, Y+18	; 0x12
    5cb8:	fb 89       	ldd	r31, Y+19	; 0x13
    5cba:	00 80       	ld	r0, Z
    5cbc:	2a 89       	ldd	r18, Y+18	; 0x12
    5cbe:	3b 89       	ldd	r19, Y+19	; 0x13
    5cc0:	2f 5f       	subi	r18, 0xFF	; 255
    5cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc4:	3b 8b       	std	Y+19, r19	; 0x13
    5cc6:	2a 8b       	std	Y+18, r18	; 0x12
    5cc8:	e8 89       	ldd	r30, Y+16	; 0x10
    5cca:	f9 89       	ldd	r31, Y+17	; 0x11
    5ccc:	00 82       	st	Z, r0
    5cce:	28 89       	ldd	r18, Y+16	; 0x10
    5cd0:	39 89       	ldd	r19, Y+17	; 0x11
    5cd2:	2f 5f       	subi	r18, 0xFF	; 255
    5cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd6:	39 8b       	std	Y+17, r19	; 0x11
    5cd8:	28 8b       	std	Y+16, r18	; 0x10
    5cda:	3c 89       	ldd	r19, Y+20	; 0x14
    5cdc:	31 50       	subi	r19, 0x01	; 1
    5cde:	3c 8b       	std	Y+20, r19	; 0x14
    5ce0:	8c 89       	ldd	r24, Y+20	; 0x14
    5ce2:	88 23       	and	r24, r24
    5ce4:	41 f7       	brne	.-48     	; 0x5cb6 <CRTOS_voidDeleteTask+0x10c>
			taskArr[taskIndex+1] = temp;
    5ce6:	89 81       	ldd	r24, Y+1	; 0x01
    5ce8:	88 2f       	mov	r24, r24
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	9c 01       	movw	r18, r24
    5cee:	2f 5f       	subi	r18, 0xFF	; 255
    5cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf2:	c9 01       	movw	r24, r18
    5cf4:	88 0f       	add	r24, r24
    5cf6:	99 1f       	adc	r25, r25
    5cf8:	88 0f       	add	r24, r24
    5cfa:	99 1f       	adc	r25, r25
    5cfc:	88 0f       	add	r24, r24
    5cfe:	99 1f       	adc	r25, r25
    5d00:	82 1b       	sub	r24, r18
    5d02:	93 0b       	sbc	r25, r19
    5d04:	8f 5e       	subi	r24, 0xEF	; 239
    5d06:	9d 4f       	sbci	r25, 0xFD	; 253
    5d08:	9e 8b       	std	Y+22, r25	; 0x16
    5d0a:	8d 8b       	std	Y+21, r24	; 0x15
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	32 96       	adiw	r30, 0x02	; 2
    5d10:	f8 8f       	std	Y+24, r31	; 0x18
    5d12:	ef 8b       	std	Y+23, r30	; 0x17
    5d14:	f7 e0       	ldi	r31, 0x07	; 7
    5d16:	f9 8f       	std	Y+25, r31	; 0x19
    5d18:	ef 89       	ldd	r30, Y+23	; 0x17
    5d1a:	f8 8d       	ldd	r31, Y+24	; 0x18
    5d1c:	00 80       	ld	r0, Z
    5d1e:	2f 89       	ldd	r18, Y+23	; 0x17
    5d20:	38 8d       	ldd	r19, Y+24	; 0x18
    5d22:	2f 5f       	subi	r18, 0xFF	; 255
    5d24:	3f 4f       	sbci	r19, 0xFF	; 255
    5d26:	38 8f       	std	Y+24, r19	; 0x18
    5d28:	2f 8b       	std	Y+23, r18	; 0x17
    5d2a:	ed 89       	ldd	r30, Y+21	; 0x15
    5d2c:	fe 89       	ldd	r31, Y+22	; 0x16
    5d2e:	00 82       	st	Z, r0
    5d30:	2d 89       	ldd	r18, Y+21	; 0x15
    5d32:	3e 89       	ldd	r19, Y+22	; 0x16
    5d34:	2f 5f       	subi	r18, 0xFF	; 255
    5d36:	3f 4f       	sbci	r19, 0xFF	; 255
    5d38:	3e 8b       	std	Y+22, r19	; 0x16
    5d3a:	2d 8b       	std	Y+21, r18	; 0x15
    5d3c:	39 8d       	ldd	r19, Y+25	; 0x19
    5d3e:	31 50       	subi	r19, 0x01	; 1
    5d40:	39 8f       	std	Y+25, r19	; 0x19
    5d42:	89 8d       	ldd	r24, Y+25	; 0x19
    5d44:	88 23       	and	r24, r24
    5d46:	41 f7       	brne	.-48     	; 0x5d18 <CRTOS_voidDeleteTask+0x16e>
	}


	if(taskIndex != (MAX_ARR_SIZE-1))
	{
		for(;taskIndex < taskCounter; taskIndex++)
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
    5d4a:	8f 5f       	subi	r24, 0xFF	; 255
    5d4c:	89 83       	std	Y+1, r24	; 0x01
    5d4e:	90 91 02 02 	lds	r25, 0x0202
    5d52:	89 81       	ldd	r24, Y+1	; 0x01
    5d54:	89 17       	cp	r24, r25
    5d56:	08 f4       	brcc	.+2      	; 0x5d5a <CRTOS_voidDeleteTask+0x1b0>
    5d58:	59 cf       	rjmp	.-334    	; 0x5c0c <CRTOS_voidDeleteTask+0x62>
			CRTOS_TCP_t temp = taskArr[taskIndex];
			taskArr[taskIndex] = taskArr[taskIndex+1];
			taskArr[taskIndex+1] = temp;
		}
	}
	taskCounter--;
    5d5a:	80 91 02 02 	lds	r24, 0x0202
    5d5e:	81 50       	subi	r24, 0x01	; 1
    5d60:	80 93 02 02 	sts	0x0202, r24
}
    5d64:	69 96       	adiw	r28, 0x19	; 25
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	cf 91       	pop	r28
    5d72:	df 91       	pop	r29
    5d74:	08 95       	ret

00005d76 <AUTO_voidReCenter>:
extern volatile u8 RC_SYSTEM_u8_Mode;

u8 endLineReached = 0;

void AUTO_voidReCenter()
{
    5d76:	df 93       	push	r29
    5d78:	cf 93       	push	r28
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
	DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD, AUTO_u16_STANDERED_RPM);
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	69 e1       	ldi	r22, 0x19	; 25
    5d82:	70 e0       	ldi	r23, 0x00	; 0
    5d84:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
	SERVO_voidMoveAngle(90);
    5d88:	8a e5       	ldi	r24, 0x5A	; 90
    5d8a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
}
    5d8e:	cf 91       	pop	r28
    5d90:	df 91       	pop	r29
    5d92:	08 95       	ret

00005d94 <AUTO_voidInit>:


void AUTO_voidInit()
{
    5d94:	df 93       	push	r29
    5d96:	cf 93       	push	r28
    5d98:	cd b7       	in	r28, 0x3d	; 61
    5d9a:	de b7       	in	r29, 0x3e	; 62
	//IR
	IR_voidEnable(EXTI_u8_EXTI0); // enable exi 0 Low level
    5d9c:	80 e0       	ldi	r24, 0x00	; 0
    5d9e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <IR_voidEnable>
	IR_voidEnable(EXTI_u8_EXTI1); // enable exi 1 Low level
    5da2:	81 e0       	ldi	r24, 0x01	; 1
    5da4:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <IR_voidEnable>

	IR_voidSetCallBack(AUTO_voidIr0,EXTI_u8_EXTI0); // set callback for isr0
    5da8:	8d ed       	ldi	r24, 0xDD	; 221
    5daa:	9f e2       	ldi	r25, 0x2F	; 47
    5dac:	60 e0       	ldi	r22, 0x00	; 0
    5dae:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <IR_voidSetCallBack>
	IR_voidSetCallBack(AUTO_voidIr1,EXTI_u8_EXTI1); // set call back for isr1
    5db2:	80 ef       	ldi	r24, 0xF0	; 240
    5db4:	9f e2       	ldi	r25, 0x2F	; 47
    5db6:	61 e0       	ldi	r22, 0x01	; 1
    5db8:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <IR_voidSetCallBack>

//enable timer 0 to reset direction after one second
//TIM0_voidInit();


TIM0_voidSetOverFlowCallBack(tim0isr);
    5dbc:	85 ea       	ldi	r24, 0xA5	; 165
    5dbe:	9f e2       	ldi	r25, 0x2F	; 47
    5dc0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <TIM0_voidSetOverFlowCallBack>
TIM0_voidEnableOverFlowInterrupt();
    5dc4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <TIM0_voidEnableOverFlowInterrupt>

}
    5dc8:	cf 91       	pop	r28
    5dca:	df 91       	pop	r29
    5dcc:	08 95       	ret

00005dce <AUTO_voidStart>:


void AUTO_voidStart()
{
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	cd b7       	in	r28, 0x3d	; 61
    5dd4:	de b7       	in	r29, 0x3e	; 62
	AUTO_voidInit();
    5dd6:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <AUTO_voidInit>

	AUTO_voidReCenter();
    5dda:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <AUTO_voidReCenter>
	while(1)
	{
		if(RC_SYSTEM_u8_Mode != RC_SYSTEM_u8_AUTO_MODE)
    5dde:	80 91 00 02 	lds	r24, 0x0200
    5de2:	81 30       	cpi	r24, 0x01	; 1
    5de4:	89 f4       	brne	.+34     	; 0x5e08 <AUTO_voidStart+0x3a>
//		{
//			DSC_voidStop();
//			return;
//		}

		if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    5de6:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    5dea:	dc 01       	movw	r26, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	bc 01       	movw	r22, r24
    5df0:	cd 01       	movw	r24, r26
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	40 ea       	ldi	r20, 0xA0	; 160
    5df8:	51 e4       	ldi	r21, 0x41	; 65
    5dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dfe:	88 23       	and	r24, r24
    5e00:	74 f7       	brge	.-36     	; 0x5dde <AUTO_voidStart+0x10>
		{
//			UART_voidTransmitNumber(USS_f32GetDistance());
//			UART_voidTransmitNewLine();
			DSC_voidStop();
    5e02:	0e 94 12 2b 	call	0x5624	; 0x5624 <DSC_voidStop>
    5e06:	eb cf       	rjmp	.-42     	; 0x5dde <AUTO_voidStart+0x10>
//		else
//		{
//			AUTO_voidReCenter();
//		}
	}
}
    5e08:	cf 91       	pop	r28
    5e0a:	df 91       	pop	r29
    5e0c:	08 95       	ret

00005e0e <AUTO_voidAvoidObstacle>:

void AUTO_voidAvoidObstacle( )
{
    5e0e:	df 93       	push	r29
    5e10:	cf 93       	push	r28
    5e12:	00 d0       	rcall	.+0      	; 0x5e14 <AUTO_voidAvoidObstacle+0x6>
    5e14:	00 d0       	rcall	.+0      	; 0x5e16 <AUTO_voidAvoidObstacle+0x8>
    5e16:	00 d0       	rcall	.+0      	; 0x5e18 <AUTO_voidAvoidObstacle+0xa>
    5e18:	cd b7       	in	r28, 0x3d	; 61
    5e1a:	de b7       	in	r29, 0x3e	; 62
	SERVO_voidMoveAngle(0);
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
	u8 leftBlock = 0;
    5e22:	1e 82       	std	Y+6, r1	; 0x06
	u8 middleBlock = 0;
    5e24:	1d 82       	std	Y+5, r1	; 0x05
	u8 rightBlock = 0;
    5e26:	1c 82       	std	Y+4, r1	; 0x04


	for(u8 index = 0; index < 20; index++)
    5e28:	1b 82       	std	Y+3, r1	; 0x03
    5e2a:	1e c0       	rjmp	.+60     	; 0x5e68 <AUTO_voidAvoidObstacle+0x5a>
	{
		SERVO_voidMoveAngle(index*3);
    5e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2e:	28 2f       	mov	r18, r24
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	c9 01       	movw	r24, r18
    5e34:	88 0f       	add	r24, r24
    5e36:	99 1f       	adc	r25, r25
    5e38:	82 0f       	add	r24, r18
    5e3a:	93 1f       	adc	r25, r19
    5e3c:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
		if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    5e40:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	bc 01       	movw	r22, r24
    5e4a:	cd 01       	movw	r24, r26
    5e4c:	20 e0       	ldi	r18, 0x00	; 0
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	40 ea       	ldi	r20, 0xA0	; 160
    5e52:	51 e4       	ldi	r21, 0x41	; 65
    5e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e58:	88 23       	and	r24, r24
    5e5a:	1c f4       	brge	.+6      	; 0x5e62 <AUTO_voidAvoidObstacle+0x54>
		{
			leftBlock++;
    5e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    5e5e:	8f 5f       	subi	r24, 0xFF	; 255
    5e60:	8e 83       	std	Y+6, r24	; 0x06
	u8 leftBlock = 0;
	u8 middleBlock = 0;
	u8 rightBlock = 0;


	for(u8 index = 0; index < 20; index++)
    5e62:	8b 81       	ldd	r24, Y+3	; 0x03
    5e64:	8f 5f       	subi	r24, 0xFF	; 255
    5e66:	8b 83       	std	Y+3, r24	; 0x03
    5e68:	8b 81       	ldd	r24, Y+3	; 0x03
    5e6a:	84 31       	cpi	r24, 0x14	; 20
    5e6c:	f8 f2       	brcs	.-66     	; 0x5e2c <AUTO_voidAvoidObstacle+0x1e>
		{
			leftBlock++;
		}
	}

	for(u8 index = 20; index < 40; index++)
    5e6e:	84 e1       	ldi	r24, 0x14	; 20
    5e70:	8a 83       	std	Y+2, r24	; 0x02
    5e72:	1e c0       	rjmp	.+60     	; 0x5eb0 <AUTO_voidAvoidObstacle+0xa2>
	{
		SERVO_voidMoveAngle(index*3);
    5e74:	8a 81       	ldd	r24, Y+2	; 0x02
    5e76:	28 2f       	mov	r18, r24
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	c9 01       	movw	r24, r18
    5e7c:	88 0f       	add	r24, r24
    5e7e:	99 1f       	adc	r25, r25
    5e80:	82 0f       	add	r24, r18
    5e82:	93 1f       	adc	r25, r19
    5e84:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
		if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    5e88:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    5e8c:	dc 01       	movw	r26, r24
    5e8e:	cb 01       	movw	r24, r22
    5e90:	bc 01       	movw	r22, r24
    5e92:	cd 01       	movw	r24, r26
    5e94:	20 e0       	ldi	r18, 0x00	; 0
    5e96:	30 e0       	ldi	r19, 0x00	; 0
    5e98:	40 ea       	ldi	r20, 0xA0	; 160
    5e9a:	51 e4       	ldi	r21, 0x41	; 65
    5e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ea0:	88 23       	and	r24, r24
    5ea2:	1c f4       	brge	.+6      	; 0x5eaa <AUTO_voidAvoidObstacle+0x9c>
		{
			middleBlock++;
    5ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea6:	8f 5f       	subi	r24, 0xFF	; 255
    5ea8:	8d 83       	std	Y+5, r24	; 0x05
		{
			leftBlock++;
		}
	}

	for(u8 index = 20; index < 40; index++)
    5eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    5eac:	8f 5f       	subi	r24, 0xFF	; 255
    5eae:	8a 83       	std	Y+2, r24	; 0x02
    5eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb2:	88 32       	cpi	r24, 0x28	; 40
    5eb4:	f8 f2       	brcs	.-66     	; 0x5e74 <AUTO_voidAvoidObstacle+0x66>
		{
			middleBlock++;
		}
	}

	for(u8 index = 40; index < AUTO_u8_MAX_VIEW_SIZE; index++)
    5eb6:	88 e2       	ldi	r24, 0x28	; 40
    5eb8:	89 83       	std	Y+1, r24	; 0x01
    5eba:	1e c0       	rjmp	.+60     	; 0x5ef8 <AUTO_voidAvoidObstacle+0xea>
	{
		SERVO_voidMoveAngle(index*3);
    5ebc:	89 81       	ldd	r24, Y+1	; 0x01
    5ebe:	28 2f       	mov	r18, r24
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	c9 01       	movw	r24, r18
    5ec4:	88 0f       	add	r24, r24
    5ec6:	99 1f       	adc	r25, r25
    5ec8:	82 0f       	add	r24, r18
    5eca:	93 1f       	adc	r25, r19
    5ecc:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
		if(USS_f32GetDistance() < USS_f32_COLLISION_DIST)
    5ed0:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <USS_f32GetDistance>
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	bc 01       	movw	r22, r24
    5eda:	cd 01       	movw	r24, r26
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	40 ea       	ldi	r20, 0xA0	; 160
    5ee2:	51 e4       	ldi	r21, 0x41	; 65
    5ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ee8:	88 23       	and	r24, r24
    5eea:	1c f4       	brge	.+6      	; 0x5ef2 <AUTO_voidAvoidObstacle+0xe4>
		{
			rightBlock++;
    5eec:	8c 81       	ldd	r24, Y+4	; 0x04
    5eee:	8f 5f       	subi	r24, 0xFF	; 255
    5ef0:	8c 83       	std	Y+4, r24	; 0x04
		{
			middleBlock++;
		}
	}

	for(u8 index = 40; index < AUTO_u8_MAX_VIEW_SIZE; index++)
    5ef2:	89 81       	ldd	r24, Y+1	; 0x01
    5ef4:	8f 5f       	subi	r24, 0xFF	; 255
    5ef6:	89 83       	std	Y+1, r24	; 0x01
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	8c 33       	cpi	r24, 0x3C	; 60
    5efc:	f8 f2       	brcs	.-66     	; 0x5ebc <AUTO_voidAvoidObstacle+0xae>
		{
			rightBlock++;
		}
	}

	if(middleBlock < 2)
    5efe:	8d 81       	ldd	r24, Y+5	; 0x05
    5f00:	82 30       	cpi	r24, 0x02	; 2
    5f02:	18 f4       	brcc	.+6      	; 0x5f0a <AUTO_voidAvoidObstacle+0xfc>
	{
		AUTO_voidReCenter();
    5f04:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <AUTO_voidReCenter>
    5f08:	0d c0       	rjmp	.+26     	; 0x5f24 <AUTO_voidAvoidObstacle+0x116>
	}
	else if(rightBlock < 2)
    5f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    5f0c:	82 30       	cpi	r24, 0x02	; 2
    5f0e:	20 f4       	brcc	.+8      	; 0x5f18 <AUTO_voidAvoidObstacle+0x10a>
	{
		//avoid to the right
		AUTO_voidGoToClearSide(AUTO_u8_GO_RIGHT);
    5f10:	81 e0       	ldi	r24, 0x01	; 1
    5f12:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <AUTO_voidGoToClearSide>
    5f16:	06 c0       	rjmp	.+12     	; 0x5f24 <AUTO_voidAvoidObstacle+0x116>
	}
	else if(leftBlock < 2)
    5f18:	8e 81       	ldd	r24, Y+6	; 0x06
    5f1a:	82 30       	cpi	r24, 0x02	; 2
    5f1c:	18 f4       	brcc	.+6      	; 0x5f24 <AUTO_voidAvoidObstacle+0x116>
	{
		//avoid to the left
		AUTO_voidGoToClearSide(AUTO_u8_GO_LEFT);
    5f1e:	80 e0       	ldi	r24, 0x00	; 0
    5f20:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <AUTO_voidGoToClearSide>
	}


}
    5f24:	26 96       	adiw	r28, 0x06	; 6
    5f26:	0f b6       	in	r0, 0x3f	; 63
    5f28:	f8 94       	cli
    5f2a:	de bf       	out	0x3e, r29	; 62
    5f2c:	0f be       	out	0x3f, r0	; 63
    5f2e:	cd bf       	out	0x3d, r28	; 61
    5f30:	cf 91       	pop	r28
    5f32:	df 91       	pop	r29
    5f34:	08 95       	ret

00005f36 <AUTO_voidGoToClearSide>:


void AUTO_voidGoToClearSide(u8 AUTO_u8_Clear_Side)
{
    5f36:	df 93       	push	r29
    5f38:	cf 93       	push	r28
    5f3a:	0f 92       	push	r0
    5f3c:	cd b7       	in	r28, 0x3d	; 61
    5f3e:	de b7       	in	r29, 0x3e	; 62
    5f40:	89 83       	std	Y+1, r24	; 0x01
//
//		break;
//	case AUTO_u8_GO_RIGHT:
//		break;
//	}
}
    5f42:	0f 90       	pop	r0
    5f44:	cf 91       	pop	r28
    5f46:	df 91       	pop	r29
    5f48:	08 95       	ret

00005f4a <tim0isr>:
u16 AUTO_count = 0;



void tim0isr()
{
    5f4a:	df 93       	push	r29
    5f4c:	cf 93       	push	r28
    5f4e:	cd b7       	in	r28, 0x3d	; 61
    5f50:	de b7       	in	r29, 0x3e	; 62

	AUTO_count++;
    5f52:	80 91 05 02 	lds	r24, 0x0205
    5f56:	90 91 06 02 	lds	r25, 0x0206
    5f5a:	01 96       	adiw	r24, 0x01	; 1
    5f5c:	90 93 06 02 	sts	0x0206, r25
    5f60:	80 93 05 02 	sts	0x0205, r24


if (AUTO_count >= ((u16)(0.5*3906)) )
    5f64:	80 91 05 02 	lds	r24, 0x0205
    5f68:	90 91 06 02 	lds	r25, 0x0206
    5f6c:	27 e0       	ldi	r18, 0x07	; 7
    5f6e:	81 3a       	cpi	r24, 0xA1	; 161
    5f70:	92 07       	cpc	r25, r18
    5f72:	30 f0       	brcs	.+12     	; 0x5f80 <tim0isr+0x36>
	// prescaler 8
	// 8 mega freq
	// 256 ticks (tim0)
	//after around 3906 interrupt (1 sec it centers)

	AUTO_count=0;
    5f74:	10 92 06 02 	sts	0x0206, r1
    5f78:	10 92 05 02 	sts	0x0205, r1
AUTO_voidReCenter(); // center the car
    5f7c:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <AUTO_voidReCenter>
//DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,DSC_u8_FORWARD);// forword 100RPM

	}

}
    5f80:	cf 91       	pop	r28
    5f82:	df 91       	pop	r29
    5f84:	08 95       	ret

00005f86 <AUTO_voidIRen>:
u8 AUTO_IR0state = 1; //enabled by default
u8 AUTO_IR1state = 1; //enabled by default


void AUTO_voidIRen(u8 Copy_u8EXTINo )
{
    5f86:	df 93       	push	r29
    5f88:	cf 93       	push	r28
    5f8a:	0f 92       	push	r0
    5f8c:	cd b7       	in	r28, 0x3d	; 61
    5f8e:	de b7       	in	r29, 0x3e	; 62
    5f90:	89 83       	std	Y+1, r24	; 0x01

IR_voidEnable(Copy_u8EXTINo); // enable exi 0 Low level
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <IR_voidEnable>

}
    5f98:	0f 90       	pop	r0
    5f9a:	cf 91       	pop	r28
    5f9c:	df 91       	pop	r29
    5f9e:	08 95       	ret

00005fa0 <AUTO_voidIRdis>:

void AUTO_voidIRdis(u8 Copy_u8EXTINo)
{
    5fa0:	df 93       	push	r29
    5fa2:	cf 93       	push	r28
    5fa4:	0f 92       	push	r0
    5fa6:	cd b7       	in	r28, 0x3d	; 61
    5fa8:	de b7       	in	r29, 0x3e	; 62
    5faa:	89 83       	std	Y+1, r24	; 0x01
IR_voidDisable(Copy_u8EXTINo);
    5fac:	89 81       	ldd	r24, Y+1	; 0x01
    5fae:	0e 94 99 27 	call	0x4f32	; 0x4f32 <IR_voidDisable>



}
    5fb2:	0f 90       	pop	r0
    5fb4:	cf 91       	pop	r28
    5fb6:	df 91       	pop	r29
    5fb8:	08 95       	ret

00005fba <AUTO_voidIr0>:


void AUTO_voidIr0()
{
    5fba:	df 93       	push	r29
    5fbc:	cf 93       	push	r28
    5fbe:	cd b7       	in	r28, 0x3d	; 61
    5fc0:	de b7       	in	r29, 0x3e	; 62
//		endLineReached = 1;
//		return;
//	}


	DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,AUTO_u16_SLOW_RPM);// forword 50RPM
    5fc2:	81 e0       	ldi	r24, 0x01	; 1
    5fc4:	67 e1       	ldi	r22, 0x17	; 23
    5fc6:	70 e0       	ldi	r23, 0x00	; 0
    5fc8:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>
	SERVO_voidMoveAngle(AUTO_u8RIGHT); // move right
    5fcc:	87 e8       	ldi	r24, 0x87	; 135
    5fce:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
	AUTO_count = 0;
    5fd2:	10 92 06 02 	sts	0x0206, r1
    5fd6:	10 92 05 02 	sts	0x0205, r1
//		AUTO_IR1state = 1;
//		AUTO_voidIRen(1);
//
//		}

}
    5fda:	cf 91       	pop	r28
    5fdc:	df 91       	pop	r29
    5fde:	08 95       	ret

00005fe0 <AUTO_voidIr1>:

void AUTO_voidIr1()
{
    5fe0:	df 93       	push	r29
    5fe2:	cf 93       	push	r28
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
//		{
//			endLineReached = 1;
//			return;
//		}

	DSC_voidSetDirectionAndRPM(DSC_u8_FORWARD,AUTO_u16_SLOW_RPM);// forword 50RPM
    5fe8:	81 e0       	ldi	r24, 0x01	; 1
    5fea:	67 e1       	ldi	r22, 0x17	; 23
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <DSC_voidSetDirectionAndRPM>

	SERVO_voidMoveAngle(AUTO_u8LEFT); // move left
    5ff2:	8d e2       	ldi	r24, 0x2D	; 45
    5ff4:	0e 94 70 22 	call	0x44e0	; 0x44e0 <SERVO_voidMoveAngle>
	AUTO_count = 0;
    5ff8:	10 92 06 02 	sts	0x0206, r1
    5ffc:	10 92 05 02 	sts	0x0205, r1
//	AUTO_IR0state = 1;
//	AUTO_voidIRen(0);
//
//	}

}
    6000:	cf 91       	pop	r28
    6002:	df 91       	pop	r29
    6004:	08 95       	ret

00006006 <main>:

#include "APP/RC_SYSTEM/RC_SYSTEM_interface.h"


int main()
{
    6006:	df 93       	push	r29
    6008:	cf 93       	push	r28
    600a:	cd b7       	in	r28, 0x3d	; 61
    600c:	de b7       	in	r29, 0x3e	; 62
	RC_SYSTEM_voidStart();
    600e:	0e 94 90 2b 	call	0x5720	; 0x5720 <RC_SYSTEM_voidStart>
    6012:	ff cf       	rjmp	.-2      	; 0x6012 <main+0xc>

00006014 <__mulsi3>:
    6014:	62 9f       	mul	r22, r18
    6016:	d0 01       	movw	r26, r0
    6018:	73 9f       	mul	r23, r19
    601a:	f0 01       	movw	r30, r0
    601c:	82 9f       	mul	r24, r18
    601e:	e0 0d       	add	r30, r0
    6020:	f1 1d       	adc	r31, r1
    6022:	64 9f       	mul	r22, r20
    6024:	e0 0d       	add	r30, r0
    6026:	f1 1d       	adc	r31, r1
    6028:	92 9f       	mul	r25, r18
    602a:	f0 0d       	add	r31, r0
    602c:	83 9f       	mul	r24, r19
    602e:	f0 0d       	add	r31, r0
    6030:	74 9f       	mul	r23, r20
    6032:	f0 0d       	add	r31, r0
    6034:	65 9f       	mul	r22, r21
    6036:	f0 0d       	add	r31, r0
    6038:	99 27       	eor	r25, r25
    603a:	72 9f       	mul	r23, r18
    603c:	b0 0d       	add	r27, r0
    603e:	e1 1d       	adc	r30, r1
    6040:	f9 1f       	adc	r31, r25
    6042:	63 9f       	mul	r22, r19
    6044:	b0 0d       	add	r27, r0
    6046:	e1 1d       	adc	r30, r1
    6048:	f9 1f       	adc	r31, r25
    604a:	bd 01       	movw	r22, r26
    604c:	cf 01       	movw	r24, r30
    604e:	11 24       	eor	r1, r1
    6050:	08 95       	ret

00006052 <__udivmodsi4>:
    6052:	a1 e2       	ldi	r26, 0x21	; 33
    6054:	1a 2e       	mov	r1, r26
    6056:	aa 1b       	sub	r26, r26
    6058:	bb 1b       	sub	r27, r27
    605a:	fd 01       	movw	r30, r26
    605c:	0d c0       	rjmp	.+26     	; 0x6078 <__udivmodsi4_ep>

0000605e <__udivmodsi4_loop>:
    605e:	aa 1f       	adc	r26, r26
    6060:	bb 1f       	adc	r27, r27
    6062:	ee 1f       	adc	r30, r30
    6064:	ff 1f       	adc	r31, r31
    6066:	a2 17       	cp	r26, r18
    6068:	b3 07       	cpc	r27, r19
    606a:	e4 07       	cpc	r30, r20
    606c:	f5 07       	cpc	r31, r21
    606e:	20 f0       	brcs	.+8      	; 0x6078 <__udivmodsi4_ep>
    6070:	a2 1b       	sub	r26, r18
    6072:	b3 0b       	sbc	r27, r19
    6074:	e4 0b       	sbc	r30, r20
    6076:	f5 0b       	sbc	r31, r21

00006078 <__udivmodsi4_ep>:
    6078:	66 1f       	adc	r22, r22
    607a:	77 1f       	adc	r23, r23
    607c:	88 1f       	adc	r24, r24
    607e:	99 1f       	adc	r25, r25
    6080:	1a 94       	dec	r1
    6082:	69 f7       	brne	.-38     	; 0x605e <__udivmodsi4_loop>
    6084:	60 95       	com	r22
    6086:	70 95       	com	r23
    6088:	80 95       	com	r24
    608a:	90 95       	com	r25
    608c:	9b 01       	movw	r18, r22
    608e:	ac 01       	movw	r20, r24
    6090:	bd 01       	movw	r22, r26
    6092:	cf 01       	movw	r24, r30
    6094:	08 95       	ret

00006096 <__prologue_saves__>:
    6096:	2f 92       	push	r2
    6098:	3f 92       	push	r3
    609a:	4f 92       	push	r4
    609c:	5f 92       	push	r5
    609e:	6f 92       	push	r6
    60a0:	7f 92       	push	r7
    60a2:	8f 92       	push	r8
    60a4:	9f 92       	push	r9
    60a6:	af 92       	push	r10
    60a8:	bf 92       	push	r11
    60aa:	cf 92       	push	r12
    60ac:	df 92       	push	r13
    60ae:	ef 92       	push	r14
    60b0:	ff 92       	push	r15
    60b2:	0f 93       	push	r16
    60b4:	1f 93       	push	r17
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	cd b7       	in	r28, 0x3d	; 61
    60bc:	de b7       	in	r29, 0x3e	; 62
    60be:	ca 1b       	sub	r28, r26
    60c0:	db 0b       	sbc	r29, r27
    60c2:	0f b6       	in	r0, 0x3f	; 63
    60c4:	f8 94       	cli
    60c6:	de bf       	out	0x3e, r29	; 62
    60c8:	0f be       	out	0x3f, r0	; 63
    60ca:	cd bf       	out	0x3d, r28	; 61
    60cc:	09 94       	ijmp

000060ce <__epilogue_restores__>:
    60ce:	2a 88       	ldd	r2, Y+18	; 0x12
    60d0:	39 88       	ldd	r3, Y+17	; 0x11
    60d2:	48 88       	ldd	r4, Y+16	; 0x10
    60d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    60d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    60d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    60da:	8c 84       	ldd	r8, Y+12	; 0x0c
    60dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    60de:	aa 84       	ldd	r10, Y+10	; 0x0a
    60e0:	b9 84       	ldd	r11, Y+9	; 0x09
    60e2:	c8 84       	ldd	r12, Y+8	; 0x08
    60e4:	df 80       	ldd	r13, Y+7	; 0x07
    60e6:	ee 80       	ldd	r14, Y+6	; 0x06
    60e8:	fd 80       	ldd	r15, Y+5	; 0x05
    60ea:	0c 81       	ldd	r16, Y+4	; 0x04
    60ec:	1b 81       	ldd	r17, Y+3	; 0x03
    60ee:	aa 81       	ldd	r26, Y+2	; 0x02
    60f0:	b9 81       	ldd	r27, Y+1	; 0x01
    60f2:	ce 0f       	add	r28, r30
    60f4:	d1 1d       	adc	r29, r1
    60f6:	0f b6       	in	r0, 0x3f	; 63
    60f8:	f8 94       	cli
    60fa:	de bf       	out	0x3e, r29	; 62
    60fc:	0f be       	out	0x3f, r0	; 63
    60fe:	cd bf       	out	0x3d, r28	; 61
    6100:	ed 01       	movw	r28, r26
    6102:	08 95       	ret

00006104 <_exit>:
    6104:	f8 94       	cli

00006106 <__stop_program>:
    6106:	ff cf       	rjmp	.-2      	; 0x6106 <__stop_program>
